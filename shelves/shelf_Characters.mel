global proc shelf_Characters () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_lFootIKC ;\nselect -add marv_rig:rig_lToeIKC ;\nselect -add marv_rig:rig_lKneeIKC ;\nselect -add marv_rig:rig_lLegSwitchC ;\nselect -add marv_rig:rig_rFootIKC ;\nselect -add marv_rig:rig_rToeIKC ;\nselect -add marv_rig:rig_rLegSwitchC ;\nselect -add marv_rig:rig_rKneeIKC ;\nselect -add marv_rig:rig_MainHipC ;\nselect -add marv_rig:rig_lHipFKC ;\nselect -add marv_rig:rig_rHipFKC ;\nselect -add marv_rig:rig_SpineMidIKC ;\nselect -add marv_rig:rig_SpineTopIKC ;\nselect -add marv_rig:rig_rClavicleC ;\nselect -add marv_rig:rig_lClavicleC ;\nselect -add marv_rig:rig_HeadC ;\nselect -add marv_rig:rig_rShoulderFKC ;\nselect -add marv_rig:rig_rElbowFKC ;\nselect -add marv_rig:rig_rArmSwitchC ;\nselect -add marv_rig:rig_rWristFKC ;\nselect -add marv_rig:rig_rPalmC ;\nselect -add marv_rig:rig_rFinger3J1C ;\nselect -add marv_rig:rig_rFinger3J2C ;\nselect -add marv_rig:rig_rFinger3J3C ;\nselect -add marv_rig:rig_rFinger1J1C ;\nselect -add marv_rig:rig_rFinger2J2C ;\nselect -add marv_rig:rig_rFinger2J3C ;\nselect -add marv_rig:rig_rFinger1J1C ;\nselect -add marv_rig:rig_rFinger1J2C ;\nselect -add marv_rig:rig_rFinger1J3C ;\nselect -add marv_rig:rig_rThumbJ1C ;\nselect -add marv_rig:rig_rThumbJ2C ;\nselect -add marv_rig:rig_rThumbJ3C ;\nselect -add marv_rig:rig_lShoulderFKC ;\nselect -add marv_rig:rig_lElbowFKC ;\nselect -add marv_rig:rig_lWristFKC ;\nselect -add marv_rig:rig_lArmSwitchC ;\nselect -add marv_rig:rig_lPalmC ;\nselect -add marv_rig:rig_lThumbJ1C ;\nselect -add marv_rig:rig_lThumbJ2C ;\nselect -add marv_rig:rig_lThumbJ3C ;\nselect -add marv_rig:rig_lFinger1J1C ;\nselect -add marv_rig:rig_lFinger1J2C ;\nselect -add marv_rig:rig_lFinger1J3C ;\nselect -add marv_rig:rig_lFinger2J1C ;\nselect -add marv_rig:rig_lFinger2J2C ;\nselect -add marv_rig:rig_lFinger2J3C ;\nselect -add marv_rig:rig_lFinger3J1C ;\nselect -add marv_rig:rig_lFinger3J2C ;\nselect -add marv_rig:rig_lFinger3J3C ;\nselect -add marv_rig:rig_rWristIKC ;\nselect -add marv_rig:rig_lHipFKC ;\nselect -add marv_rig:rig_lKneeFKC ;\nselect -add marv_rig:rig_lAnkleFKC ;\nselect -add marv_rig:rig_lBallFKC ;\nselect -add marv_rig:rig_rHipFKC ;\nselect -add marv_rig:rig_rKneeFKC ;\nselect -add marv_rig:rig_rAnkleFKC ;\nselect -add marv_rig:rig_rBallFKC ;\nselect -add marv_rig:rig_rElbowIKC ;\nselect -add marv_rig:rig_lWristIKC ;\nselect -add marv_rig:rig_lElbowIKC ;" 
        -enableBackground 0
        -align "center" 
        -label "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_lFootI..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "MARV" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_lFootIKC ;\nselect -add marv_rig:rig_lToeIKC ;\nselect -add marv_rig:rig_lKneeIKC ;\nselect -add marv_rig:rig_lLegSwitchC ;\nselect -add marv_rig:rig_rFootIKC ;\nselect -add marv_rig:rig_rToeIKC ;\nselect -add marv_rig:rig_rLegSwitchC ;\nselect -add marv_rig:rig_rKneeIKC ;\nselect -add marv_rig:rig_MainHipC ;\nselect -add marv_rig:rig_lHipFKC ;\nselect -add marv_rig:rig_rHipFKC ;\nselect -add marv_rig:rig_SpineMidIKC ;\nselect -add marv_rig:rig_SpineTopIKC ;\nselect -add marv_rig:rig_rClavicleC ;\nselect -add marv_rig:rig_lClavicleC ;\nselect -add marv_rig:rig_HeadC ;\nselect -add marv_rig:rig_rShoulderFKC ;\nselect -add marv_rig:rig_rElbowFKC ;\nselect -add marv_rig:rig_rArmSwitchC ;\nselect -add marv_rig:rig_rWristFKC ;\nselect -add marv_rig:rig_rPalmC ;\nselect -add marv_rig:rig_rFinger3J1C ;\nselect -add marv_rig:rig_rFinger3J2C ;\nselect -add marv_rig:rig_rFinger3J3C ;\nselect -add marv_rig:rig_rFinger1J1C ;\nselect -add marv_rig:rig_rFinger2J2C ;\nselect -add marv_rig:rig_rFinger2J3C ;\nselect -add marv_rig:rig_rFinger1J1C ;\nselect -add marv_rig:rig_rFinger1J2C ;\nselect -add marv_rig:rig_rFinger1J3C ;\nselect -add marv_rig:rig_rThumbJ1C ;\nselect -add marv_rig:rig_rThumbJ2C ;\nselect -add marv_rig:rig_rThumbJ3C ;\nselect -add marv_rig:rig_lShoulderFKC ;\nselect -add marv_rig:rig_lElbowFKC ;\nselect -add marv_rig:rig_lWristFKC ;\nselect -add marv_rig:rig_lArmSwitchC ;\nselect -add marv_rig:rig_lPalmC ;\nselect -add marv_rig:rig_lThumbJ1C ;\nselect -add marv_rig:rig_lThumbJ2C ;\nselect -add marv_rig:rig_lThumbJ3C ;\nselect -add marv_rig:rig_lFinger1J1C ;\nselect -add marv_rig:rig_lFinger1J2C ;\nselect -add marv_rig:rig_lFinger1J3C ;\nselect -add marv_rig:rig_lFinger2J1C ;\nselect -add marv_rig:rig_lFinger2J2C ;\nselect -add marv_rig:rig_lFinger2J3C ;\nselect -add marv_rig:rig_lFinger3J1C ;\nselect -add marv_rig:rig_lFinger3J2C ;\nselect -add marv_rig:rig_lFinger3J3C ;\nselect -add marv_rig:rig_rWristIKC ;\nselect -add marv_rig:rig_lHipFKC ;\nselect -add marv_rig:rig_lKneeFKC ;\nselect -add marv_rig:rig_lAnkleFKC ;\nselect -add marv_rig:rig_lBallFKC ;\nselect -add marv_rig:rig_rHipFKC ;\nselect -add marv_rig:rig_rKneeFKC ;\nselect -add marv_rig:rig_rAnkleFKC ;\nselect -add marv_rig:rig_rBallFKC ;\nselect -add marv_rig:rig_rElbowIKC ;\nselect -add marv_rig:rig_lWristIKC ;\nselect -add marv_rig:rig_lElbowIKC ;\n\nselect -add squash3Handle ;\nselect -add squash3 ;\nselect -add marv_rig:rig_MainC ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_rFootIKC ;\nselect -add marv_rig:rig_lFootIKC ;" 
        -enableBackground 0
        -align "center" 
        -label "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_rFootI..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "MOVE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_rFootIKC ;\nselect -add marv_rig:rig_lFootIKC ;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -add marv_rig:lowerleg_L_geo marv_rig:upperleg_L_geo marv_rig:lowerleg_R_geo marv_rig:upperleg_R_geo marv_rig:foot_L_geo marv_rig:foot_R_geo marv_rig:arm_r_group|marv_rig:forearm_R_geo marv_rig:arm_r_group|marv_rig:upperarm_R_geo marv_rig:hand_R_group|marv_rig:R_palm_R_geo marv_rig:hand_R_group|marv_rig:R_thumbinner_a_geo marv_rig:hand_R_group|marv_rig:R_thumbinner_b_geo marv_rig:hand_R_group|marv_rig:R_thumbinner_a_geo1 marv_rig:hand_R_group|marv_rig:R_fingerouter_a_geo marv_rig:hand_R_group|marv_rig:R_fingerouter_b_geo marv_rig:hand_R_group|marv_rig:R_fingerinner_a_geo marv_rig:hand_R_group|marv_rig:R_fingerinner_b_geo marv_rig:hand_R_group|marv_rig:R_fingerouter_b_geo1 marv_rig:hand_R_group|marv_rig:R_fingerinner_b_geo1 marv_rig:arm_l_group|marv_rig:forearm_R_geo marv_rig:arm_l_group|marv_rig:upperarm_R_geo marv_rig:hand_L_group|marv_rig:R_palm_R_geo marv_rig:hand_L_group|marv_rig:R_thumbinner_a_geo marv_rig:hand_L_group|marv_rig:R_thumbinner_b_geo marv_rig:hand_L_group|marv_rig:R_thumbinner_a_geo1 marv_rig:hand_L_group|marv_rig:R_fingerouter_a_geo marv_rig:hand_L_group|marv_rig:R_fingerouter_b_geo marv_rig:hand_L_group|marv_rig:R_fingerinner_a_geo marv_rig:hand_L_group|marv_rig:R_fingerinner_b_geo marv_rig:hand_L_group|marv_rig:R_fingerouter_b_geo1 marv_rig:hand_L_group|marv_rig:R_fingerinner_b_geo1 marv_rig:head_geo marv_rig:neck_geo marv_rig:torso_geo marv_rig:hips_geo ;\n" 
        -enableBackground 0
        -align "center" 
        -label "select -add marv_rig:lowerleg_L_geo marv_rig:upperleg_L_geo marv..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "GEO" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -r marv_rig:lowerleg_L_geo marv_rig:upperleg_L_geo marv_rig:lowerleg_R_geo marv_rig:upperleg_R_geo marv_rig:foot_L_geo marv_rig:foot_R_geo marv_rig:forearm_R_geo marv_rig:upperarm_R_geo marv_rig:R_palm_R_geo marv_rig:R_thumbinner_a_geo marv_rig:R_thumbinner_b_geo marv_rig:R_thumbinner_a_geo1 marv_rig:R_fingerouter_a_geo marv_rig:R_fingerouter_b_geo marv_rig:R_fingerinner_a_geo marv_rig:R_fingerinner_b_geo marv_rig:R_fingerouter_b_geo1 marv_rig:R_fingerinner_b_geo1 marv_rig:forearm_L_geo marv_rig:upperarm_L_geo marv_rig:L_palm_R_geo marv_rig:L_thumbinner_a_geo marv_rig:L_thumbinner_b_geo marv_rig:L_thumbinner_a_geo1 marv_rig:L_fingerouter_a_geo marv_rig:L_fingerouter_b_geo marv_rig:L_fingerinner_a_geo marv_rig:L_fingerinner_b_geo marv_rig:L_fingerouter_b_geo1 marv_rig:L_fingerinner_b_geo1 marv_rig:head_geo marv_rig:neck_geo marv_rig:torso_geo marv_rig:hips_geo ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_lFootIKC ;\nselect -add marv_rig:rig_lToeIKC ;\nselect -add marv_rig:rig_lKneeIKC ;\nselect -add marv_rig:rig_lLegSwitchC ;\nselect -add marv_rig:rig_rFootIKC ;\nselect -add marv_rig:rig_rToeIKC ;\nselect -add marv_rig:rig_rLegSwitchC ;\nselect -add marv_rig:rig_rKneeIKC ;\nselect -add marv_rig:rig_MainHipC ;\nselect -add marv_rig:rig_lHipFKC ;\nselect -add marv_rig:rig_rHipFKC ;\nselect -add marv_rig:rig_SpineMidIKC ;\nselect -add marv_rig:rig_SpineTopIKC ;\nselect -add marv_rig:rig_rClavicleC ;\nselect -add marv_rig:rig_lClavicleC ;\nselect -add marv_rig:rig_HeadC ;\nselect -add marv_rig:rig_rShoulderFKC ;\nselect -add marv_rig:rig_rElbowFKC ;\nselect -add marv_rig:rig_rArmSwitchC ;\nselect -add marv_rig:rig_rWristFKC ;\nselect -add marv_rig:rig_rPalmC ;\nselect -add marv_rig:rig_rFinger3J1C ;\nselect -add marv_rig:rig_rFinger3J2C ;\nselect -add marv_rig:rig_rFinger3J3C ;\nselect -add marv_rig:rig_rFinger1J1C ;\nselect -add marv_rig:rig_rFinger2J2C ;\nselect -add marv_rig:rig_rFinger2J3C ;\nselect -add marv_rig:rig_rFinger1J1C ;\nselect -add marv_rig:rig_rFinger1J2C ;\nselect -add marv_rig:rig_rFinger1J3C ;\nselect -add marv_rig:rig_rThumbJ1C ;\nselect -add marv_rig:rig_rThumbJ2C ;\nselect -add marv_rig:rig_rThumbJ3C ;\nselect -add marv_rig:rig_lShoulderFKC ;\nselect -add marv_rig:rig_lElbowFKC ;\nselect -add marv_rig:rig_lWristFKC ;\nselect -add marv_rig:rig_lArmSwitchC ;\nselect -add marv_rig:rig_lPalmC ;\nselect -add marv_rig:rig_lThumbJ1C ;\nselect -add marv_rig:rig_lThumbJ2C ;\nselect -add marv_rig:rig_lThumbJ3C ;\nselect -add marv_rig:rig_lFinger1J1C ;\nselect -add marv_rig:rig_lFinger1J2C ;\nselect -add marv_rig:rig_lFinger1J3C ;\nselect -add marv_rig:rig_lFinger2J1C ;\nselect -add marv_rig:rig_lFinger2J2C ;\nselect -add marv_rig:rig_lFinger2J3C ;\nselect -add marv_rig:rig_lFinger3J1C ;\nselect -add marv_rig:rig_lFinger3J2C ;\nselect -add marv_rig:rig_lFinger3J3C ;\nselect -add marv_rig:rig_rWristIKC ;\nselect -add marv_rig:rig_lHipFKC ;\nselect -add marv_rig:rig_lKneeFKC ;\nselect -add marv_rig:rig_lAnkleFKC ;\nselect -add marv_rig:rig_lBallFKC ;\nselect -add marv_rig:rig_rHipFKC ;\nselect -add marv_rig:rig_rKneeFKC ;\nselect -add marv_rig:rig_rAnkleFKC ;\nselect -add marv_rig:rig_rBallFKC ;\nselect -add marv_rig:rig_rElbowIKC ;\nselect -add marv_rig:rig_lWristIKC ;\nselect -add marv_rig:rig_lElbowIKC ;\n\nselect -add MAIN_CAMERA ;\nselect -add HelicopterRIG:ChopperMAIN ;\nselect -add squash1Handle ;\nselect -add squash2Handle ;\nselect -add squash1 ;\nselect -add squash2 ;\n\nselect -add pCube15 ;\nselect -add pCube13 ;\nselect -add pCube12 ;\nselect -add pCube11 ;\nselect -add pCube14 ;\n\nselect -add Burger_anim_grp ;\nselect -add nurbsCircle1 ;\nselect -add joint2_ctrl ;" 
        -enableBackground 0
        -align "center" 
        -label "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_lFootI..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SCENE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_lFootIKC ;\nselect -add marv_rig:rig_lToeIKC ;\nselect -add marv_rig:rig_lKneeIKC ;\nselect -add marv_rig:rig_lLegSwitchC ;\nselect -add marv_rig:rig_rFootIKC ;\nselect -add marv_rig:rig_rToeIKC ;\nselect -add marv_rig:rig_rLegSwitchC ;\nselect -add marv_rig:rig_rKneeIKC ;\nselect -add marv_rig:rig_MainHipC ;\nselect -add marv_rig:rig_lHipFKC ;\nselect -add marv_rig:rig_rHipFKC ;\nselect -add marv_rig:rig_SpineMidIKC ;\nselect -add marv_rig:rig_SpineTopIKC ;\nselect -add marv_rig:rig_rClavicleC ;\nselect -add marv_rig:rig_lClavicleC ;\nselect -add marv_rig:rig_HeadC ;\nselect -add marv_rig:rig_rShoulderFKC ;\nselect -add marv_rig:rig_rElbowFKC ;\nselect -add marv_rig:rig_rArmSwitchC ;\nselect -add marv_rig:rig_rWristFKC ;\nselect -add marv_rig:rig_rPalmC ;\nselect -add marv_rig:rig_rFinger3J1C ;\nselect -add marv_rig:rig_rFinger3J2C ;\nselect -add marv_rig:rig_rFinger3J3C ;\nselect -add marv_rig:rig_rFinger1J1C ;\nselect -add marv_rig:rig_rFinger2J2C ;\nselect -add marv_rig:rig_rFinger2J3C ;\nselect -add marv_rig:rig_rFinger1J1C ;\nselect -add marv_rig:rig_rFinger1J2C ;\nselect -add marv_rig:rig_rFinger1J3C ;\nselect -add marv_rig:rig_rThumbJ1C ;\nselect -add marv_rig:rig_rThumbJ2C ;\nselect -add marv_rig:rig_rThumbJ3C ;\nselect -add marv_rig:rig_lShoulderFKC ;\nselect -add marv_rig:rig_lElbowFKC ;\nselect -add marv_rig:rig_lWristFKC ;\nselect -add marv_rig:rig_lArmSwitchC ;\nselect -add marv_rig:rig_lPalmC ;\nselect -add marv_rig:rig_lThumbJ1C ;\nselect -add marv_rig:rig_lThumbJ2C ;\nselect -add marv_rig:rig_lThumbJ3C ;\nselect -add marv_rig:rig_lFinger1J1C ;\nselect -add marv_rig:rig_lFinger1J2C ;\nselect -add marv_rig:rig_lFinger1J3C ;\nselect -add marv_rig:rig_lFinger2J1C ;\nselect -add marv_rig:rig_lFinger2J2C ;\nselect -add marv_rig:rig_lFinger2J3C ;\nselect -add marv_rig:rig_lFinger3J1C ;\nselect -add marv_rig:rig_lFinger3J2C ;\nselect -add marv_rig:rig_lFinger3J3C ;\nselect -add marv_rig:rig_rWristIKC ;\nselect -add marv_rig:rig_lHipFKC ;\nselect -add marv_rig:rig_lKneeFKC ;\nselect -add marv_rig:rig_lAnkleFKC ;\nselect -add marv_rig:rig_lBallFKC ;\nselect -add marv_rig:rig_rHipFKC ;\nselect -add marv_rig:rig_rKneeFKC ;\nselect -add marv_rig:rig_rAnkleFKC ;\nselect -add marv_rig:rig_rBallFKC ;\nselect -add marv_rig:rig_rElbowIKC ;\nselect -add marv_rig:rig_lWristIKC ;\nselect -add marv_rig:rig_lElbowIKC ;\n\nselect -add MAIN_CAMERA ;\nselect -add HelicopterRIG:ChopperMAIN ;\nselect -add squash1Handle ;\nselect -add squash2Handle ;\nselect -add squash1 ;\nselect -add squash2 ;\n\nselect -add pCube15 ;\nselect -add pCube13 ;\nselect -add pCube12 ;\nselect -add pCube11 ;\nselect -add pCube14 ;\n\nselect -add Burger_anim_grp ;\nselect -add nurbsCircle1 ;\nselect -add joint2_ctrl ;\n\nselect -add jack_rig:rig_rFootIKC ;\nselect -add jack_rig:rig_lFootIKC ;\nselect -add jack_rig:rig_lToeIKC ;\nselect -add jack_rig:rig_rToeIKC ;\nselect -add jack_rig:rig_lLegSwitchC ;\nselect -add jack_rig:rig_rLegSwitchC ;\nselect -add jack_rig:rig_lKneeIKC ;\nselect -add jack_rig:rig_rKneeIKC ;\nselect -add jack_rig:rig_lHipFKC ;\nselect -add jack_rig:rig_rHipFKC ;\nselect -add jack_rig:rig_MainHipC ;\nselect -add jack_rig:rig_ROOTC ;\nselect -add jack_rig:rig_SpineMidIKC ;\nselect -add jack_rig:rig_SpineTopIKC ;\nselect -add jack_rig:rig_rClavicleC ;\nselect -add jack_rig:rig_rShoulderFKC ;\nselect -add jack_rig:rig_rElbowIKC ;\nselect -add jack_rig:rig_rWristIKC ;\nselect -add jack_rig:rig_rArmSwitchC ;\nselect -add jack_rig:rig_rPalmC ;\nselect -add jack_rig:rig_rFinger3J1C ;\nselect -add jack_rig:rig_rFinger3J2C ;\nselect -add jack_rig:rig_rFinger3J3C ;\nselect -add jack_rig:rig_rFinger2J1C ;\nselect -add jack_rig:rig_rFinger2J2C ;\nselect -add jack_rig:rig_rFinger2J3C ;\nselect -add jack_rig:rig_rFinger1J1C ;\nselect -add jack_rig:rig_rFinger1J2C ;\nselect -add jack_rig:rig_rFinger1J3C ;\nselect -add jack_rig:rig_rThumbJ1C ;\nselect -add jack_rig:rig_rThumbJ2C ;\nselect -add jack_rig:rig_rThumbJ3C ;\nselect -add jack_rig:rig_HeadC ;\nselect -add jack_rig:rig_lClavicleC ;\nselect -add jack_rig:rig_lShoulderFKC ;\nselect -add jack_rig:rig_lElbowIKC ;\nselect -add jack_rig:rig_lThumbJ1C ;\nselect -add jack_rig:rig_lWristIKC ;\nselect -add jack_rig:rig_lPalmC ;\nselect -add jack_rig:rig_lArmSwitchC ;\nselect -add jack_rig:rig_lFinger1J1C ;\nselect -add jack_rig:rig_lFinger1J2C ;\nselect -add jack_rig:rig_lFinger1J3C ;\nselect -add jack_rig:rig_lFinger2J1C ;\nselect -add jack_rig:rig_lFinger2J2C ;\nselect -add jack_rig:rig_lFinger2J3C ;\nselect -add jack_rig:rig_lFinger3J1C ;\nselect -add jack_rig:rig_lFinger3J2C ;\nselect -add jack_rig:rig_lFinger3J3C ;\nselect -add jack_rig:rig_lThumbJ2C ;\nselect -add jack_rig:rig_lThumbJ3C ;\n\nselect -add fishing_global_ctrl ;\nselect -add joint2_ctrl ;\n\nselect -add squash3Handle ;\nselect -add squash3 ;\n\nselect -add group1_pointConstraint1 ;\nselect -add fishing_bend_ctrl ;\nselect -add marv_rig:rig_MainC ;\n\nselect -add rope_top_ctrl ;\nselect -add rope_midTop_ctrl ;\nselect -add rope_midBottom_ctrl ;\nselect -add rope_bottom_ctrl ;\nselect -add rope_global ;\nselect -add rope_global_pointConstraint1 ;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import colorKey as cK\ncKUI = cK.ColorKey()" 
        -enableBackground 0
        -align "center" 
        -label "import colorKey as cK\ncKUI = cK.ColorKey()" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "COLKEY" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import colorKey as cK\ncKUI = cK.ColorKey()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_rElbowIKC ;\nselect -add marv_rig:rig_lElbowIKC ;\nselect -add marv_rig:rig_rWristIKC ;\nselect -add marv_rig:rig_lWristIKC ;" 
        -enableBackground 0
        -align "center" 
        -label "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_rElbow..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -add marv_rig:rig_ROOTC ;\nselect -add marv_rig:rig_rElbowIKC ;\nselect -add marv_rig:rig_lElbowIKC ;\nselect -add marv_rig:rig_rWristIKC ;\nselect -add marv_rig:rig_lWristIKC ;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 16
        -height 11
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "//" 
        -enableBackground 1
        -align "center" 
        -label "//" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0.127517 0.127517 0.127517 0.2 
        -image "arrowUp.png" 
        -image1 "arrowUp.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -add jack_rig:rig_rFootIKC ;\nselect -add jack_rig:rig_lFootIKC ;\nselect -add jack_rig:rig_lToeIKC ;\nselect -add jack_rig:rig_rToeIKC ;\nselect -add jack_rig:rig_lLegSwitchC ;\nselect -add jack_rig:rig_rLegSwitchC ;\nselect -add jack_rig:rig_lKneeIKC ;\nselect -add jack_rig:rig_rKneeIKC ;\nselect -add jack_rig:rig_lHipFKC ;\nselect -add jack_rig:rig_rHipFKC ;\nselect -add jack_rig:rig_MainHipC ;\nselect -add jack_rig:rig_ROOTC ;\nselect -add jack_rig:rig_SpineMidIKC ;\nselect -add jack_rig:rig_SpineTopIKC ;\nselect -add jack_rig:rig_rClavicleC ;\nselect -add jack_rig:rig_rShoulderFKC ;\nselect -add jack_rig:rig_rElbowIKC ;\nselect -add jack_rig:rig_rWristIKC ;\nselect -add jack_rig:rig_rArmSwitchC ;\nselect -add jack_rig:rig_rPalmC ;\nselect -add jack_rig:rig_rFinger3J1C ;\nselect -add jack_rig:rig_rFinger3J2C ;\nselect -add jack_rig:rig_rFinger3J3C ;\nselect -add jack_rig:rig_rFinger2J1C ;\nselect -add jack_rig:rig_rFinger2J2C ;\nselect -add jack_rig:rig_rFinger2J3C ;\nselect -add jack_rig:rig_rFinger1J1C ;\nselect -add jack_rig:rig_rFinger1J2C ;\nselect -add jack_rig:rig_rFinger1J3C ;\nselect -add jack_rig:rig_rThumbJ1C ;\nselect -add jack_rig:rig_rThumbJ2C ;\nselect -add jack_rig:rig_rThumbJ3C ;\nselect -add jack_rig:rig_HeadC ;\nselect -add jack_rig:rig_lClavicleC ;\nselect -add jack_rig:rig_lShoulderFKC ;\nselect -add jack_rig:rig_lElbowIKC ;\nselect -add jack_rig:rig_lThumbJ1C ;\nselect -add jack_rig:rig_lWristIKC ;\nselect -add jack_rig:rig_lPalmC ;\nselect -add jack_rig:rig_lArmSwitchC ;\nselect -add jack_rig:rig_lFinger1J1C ;\nselect -add jack_rig:rig_lFinger1J2C ;\nselect -add jack_rig:rig_lFinger1J3C ;\nselect -add jack_rig:rig_lFinger2J1C ;\nselect -add jack_rig:rig_lFinger2J2C ;\nselect -add jack_rig:rig_lFinger2J3C ;\nselect -add jack_rig:rig_lFinger3J1C ;\nselect -add jack_rig:rig_lFinger3J2C ;\nselect -add jack_rig:rig_lFinger3J3C ;\nselect -add jack_rig:rig_lThumbJ2C ;\nselect -add jack_rig:rig_lThumbJ3C ;" 
        -enableBackground 0
        -align "center" 
        -label "select -add jack_rig:rig_rFootIKC ;\nselect -add jack_rig:rig_lFo..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "JACK" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -add jack_rig:rig_rFootIKC ;\nselect -add jack_rig:rig_lFootIKC ;\nselect -add jack_rig:rig_lToeIKC ;\nselect -add jack_rig:rig_rToeIKC ;\nselect -add jack_rig:rig_lLegSwitchC ;\nselect -add jack_rig:rig_rLegSwitchC ;\nselect -add jack_rig:rig_lKneeIKC ;\nselect -add jack_rig:rig_rKneeIKC ;\nselect -add jack_rig:rig_lHipFKC ;\nselect -add jack_rig:rig_rHipFKC ;\nselect -add jack_rig:rig_MainHipC ;\nselect -add jack_rig:rig_ROOTC ;\nselect -add jack_rig:rig_SpineMidIKC ;\nselect -add jack_rig:rig_SpineTopIKC ;\nselect -add jack_rig:rig_rClavicleC ;\nselect -add jack_rig:rig_rShoulderFKC ;\nselect -add jack_rig:rig_rElbowIKC ;\nselect -add jack_rig:rig_rWristIKC ;\nselect -add jack_rig:rig_rArmSwitchC ;\nselect -add jack_rig:rig_rPalmC ;\nselect -add jack_rig:rig_rFinger3J1C ;\nselect -add jack_rig:rig_rFinger3J2C ;\nselect -add jack_rig:rig_rFinger3J3C ;\nselect -add jack_rig:rig_rFinger2J1C ;\nselect -add jack_rig:rig_rFinger2J2C ;\nselect -add jack_rig:rig_rFinger2J3C ;\nselect -add jack_rig:rig_rFinger1J1C ;\nselect -add jack_rig:rig_rFinger1J2C ;\nselect -add jack_rig:rig_rFinger1J3C ;\nselect -add jack_rig:rig_rThumbJ1C ;\nselect -add jack_rig:rig_rThumbJ2C ;\nselect -add jack_rig:rig_rThumbJ3C ;\nselect -add jack_rig:rig_HeadC ;\nselect -add jack_rig:rig_lClavicleC ;\nselect -add jack_rig:rig_lShoulderFKC ;\nselect -add jack_rig:rig_lElbowIKC ;\nselect -add jack_rig:rig_lThumbJ1C ;\nselect -add jack_rig:rig_lWristIKC ;\nselect -add jack_rig:rig_lPalmC ;\nselect -add jack_rig:rig_lArmSwitchC ;\nselect -add jack_rig:rig_lFinger1J1C ;\nselect -add jack_rig:rig_lFinger1J2C ;\nselect -add jack_rig:rig_lFinger1J3C ;\nselect -add jack_rig:rig_lFinger2J1C ;\nselect -add jack_rig:rig_lFinger2J2C ;\nselect -add jack_rig:rig_lFinger2J3C ;\nselect -add jack_rig:rig_lFinger3J1C ;\nselect -add jack_rig:rig_lFinger3J2C ;\nselect -add jack_rig:rig_lFinger3J3C ;\nselect -add jack_rig:rig_lThumbJ2C ;\nselect -add jack_rig:rig_lThumbJ3C ;\n\nselect -add group1_pointConstraint1 ;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r jack_rig:rig_lFootIKC ;\nselect -tgl jack_rig:rig_rFootIKC ;\nselect -tgl jack_rig:rig_lKneeIKC ;\nselect -tgl jack_rig:rig_rKneeIKC ;\nselect -tgl jack_rig:rig_rWristIKC ;\nselect -tgl jack_rig:rig_rElbowIKC ;\nselect -tgl jack_rig:rig_lWristIKC ;\nselect -tgl jack_rig:rig_lElbowIKC ;\nselect -tgl jack_rig:rig_ROOTC ;" 
        -enableBackground 0
        -align "center" 
        -label "select -r jack_rig:rig_lFootIKC ;\nselect -tgl jack_rig:rig_rFoot..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -r jack_rig:rig_lFootIKC ;\nselect -tgl jack_rig:rig_rFootIKC ;\nselect -tgl jack_rig:rig_lKneeIKC ;\nselect -tgl jack_rig:rig_rKneeIKC ;\nselect -tgl jack_rig:rig_rWristIKC ;\nselect -tgl jack_rig:rig_rElbowIKC ;\nselect -tgl jack_rig:rig_lWristIKC ;\nselect -tgl jack_rig:rig_lElbowIKC ;\nselect -tgl jack_rig:rig_ROOTC ;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -tgl jack_rig:rig_lWristIKC ;\nselect -tgl jack_rig:rig_lElbowIKC ;\nselect -tgl jack_rig:rig_rElbowIKC ;" 
        -enableBackground 0
        -align "center" 
        -label "select -tgl jack_rig:rig_lWristIKC ;\nselect -tgl jack_rig:rig_lE..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -tgl jack_rig:rig_lWristIKC ;\nselect -tgl jack_rig:rig_lElbowIKC ;\nselect -tgl jack_rig:rig_rElbowIKC ;\nselect -tgl jack_rig:rig_ROOTC ;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select object(s) to generate a motion trail over time" 
        -enableBackground 0
        -align "center" 
        -label "Create Editable Motion Trail" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "motionTrail.png" 
        -image1 "motionTrail.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "doMotionTrail 2 { \"snapshot  -motionTrail 1  -increment 1 -startTime `playbackOptions -query -min` -endTime `playbackOptions -query -max`\", \"1\",\"0\",\"0\",\"1\",\"1\",\"1\"}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "List the objects in the scene" 
        -enableBackground 0
        -align "center" 
        -label "Outliner" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Outl" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "OutlinerWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Edit animation curves" 
        -enableBackground 0
        -align "center" 
        -label "Graph Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "GE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "GraphEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\n#Select Geometry, then hit 'Create'. To refresh just hit 'Create' again.\n\ndef OnionUI():\n    if (cmds.window(\"OnionSkin\", exists=True)):\n        cmds.deleteUI(\"OnionSkin\")\n    OnionWindow = cmds.window(\"OnionSkin\", title=\"Onion Skinner\", iconName='oSkin', widthHeight=(250, 100),sizeable=False )\n    \n    cmds.columnLayout()\n    cmds.separator(style='in')\n    cmds.text('            Onion Skinner')\n    cmds.separator(style='in')\n    cmds.setParent( '..' )\n    \n    #cmds.columnLayout()\n    #select_objects = cmds.ls(selection=True)\n    #cmds.textFieldButtonGrp(l='loadObject', e=True, text='select_objects[0]',buttonLabel='Load Mesh')\n    #cmds.setParent( '..' )\n    \n    cmds.rowColumnLayout( nr=1)\n    cmds.text('  ')\n    StartIntField = cmds.intField('Start',w=50,v=1)\n    cmds.text(l='')\n    cmds.text(' to ')\n    cmds.text(l='')\n    EndtIntField = cmds.intField('End',w=50,v=25)\n    cmds.setParent( '..' )\n    \n    \n    cmds.rowColumnLayout( nr=1)\n    cmds.text(l='   Every  ')\n    EveryIntField = cmds.intField('Every',w=50,v=1)\n    cmds.text(l='  Frames')\n    cmds.separator(style='in')\n    cmds.setParent( '..' )\n    \n    cmds.rowColumnLayout( nr=1)\n    cmds.text('   Opacity   ')\n    cmds.floatSlider('opacity',min = 0, max = 1, value=0.5,dc=('opacityChange((cmds.floatSlider(\"opacity\",q=True,v=True)))'))\n    cmds.setParent('..')  \n    \n    CL2 = cmds.columnLayout( adjustableColumn=True )\n    RL2 = cmds.rowLayout(numberOfColumns = 3)\n    cmds.button( label='Create', command=('onionSkin(cmds.intField(\"Start\",q=1,v=1),cmds.intField(\"End\",q=1,v=1),cmds.intField(\"Every\",q=1,v=1))'))\n    cmds.button( label='Delete', command=('cmds.delete(\"OnionSkinMeshes\")'))\n    cmds.button( label='Show/Hide', command=('visCheck(\"OnionSkinMeshes\")'))\n    cmds.setParent( '..' )\n    cmds.text(l='www.alextavener.co.uk, 2014')\n    cmds.showWindow( OnionWindow )\n\ndef visCheck(object):\n    vis = cmds.getAttr(object+\".visibility\")\n    if vis == 1:\n        cmds.setAttr(object+\".visibility\",0)\n    else:\n        cmds.setAttr(object+\".visibility\",1)\n    \n\ndef onionSkin(start,end,every):\n    \n    #If already exists, delete\n    if cmds.objExists('OnionSkinMeshes'):\n        cmds.delete('OnionSkinMeshes')\n\n    #Create base variables\n    geo = cmds.ls(sl=True)\n    onionGeo = []\n    global onionShader\n    \n    \n    #for i in set timerange, duplicate mesh\n    for i in range(start,end+1,every):\n        cmds.currentTime(i)\n        copy = cmds.duplicate(geo)\n        for j in copy:\n            newName = cmds.rename(j,str(j)+'frame'+str(i))\n            onionGeo.append(newName)\n            cmds.parent(newName,w=True)\n            cmds.select(newName)\n            shape = cmds.pickWalk(d='down')\n            cmds.setAttr(shape[0]+'.overrideEnabled',1)\n            cmds.setAttr(shape[0]+'.overrideDisplayType',2)\n    \n    #Deselect, and create transparent shader\n    cmds.select(d=True)\n    onionShader=cmds.shadingNode(\"lambert\",asShader=True,n='onionShader')\n    cmds.setAttr(onionShader+\".transparency\", 0.5, 0.5, 0.5)\n    \n    #select all duplicated meshes\n    for i in onionGeo:\n        cmds.select(i,add=True)\n        \n    #assign shader\n    cmds.hyperShade(a=onionShader)\n\n    #group meshes\n    onionGroup = cmds.group(n='OnionSkinMeshes')\n\ndef opacityChange(num):\n    cmds.setAttr(onionShader+\".transparency\",num,num,num)\n\nOnionUI()\n#onionSkin(1,90,2)" 
        -enableBackground 0
        -align "center" 
        -label "import maya.cmds as cmds\n\n#Select Geometry, then hit 'Create'. T..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\n#Select Geometry, then hit 'Create'. To refresh just hit 'Create' again.\n\ndef OnionUI():\n    if (cmds.window(\"OnionSkin\", exists=True)):\n        cmds.deleteUI(\"OnionSkin\")\n    OnionWindow = cmds.window(\"OnionSkin\", title=\"Onion Skinner\", iconName='oSkin', widthHeight=(250, 100),sizeable=False )\n    \n    cmds.columnLayout()\n    cmds.separator(style='in')\n    cmds.text('            Onion Skinner')\n    cmds.separator(style='in')\n    cmds.setParent( '..' )\n    \n    #cmds.columnLayout()\n    #select_objects = cmds.ls(selection=True)\n    #cmds.textFieldButtonGrp(l='loadObject', e=True, text='select_objects[0]',buttonLabel='Load Mesh')\n    #cmds.setParent( '..' )\n    \n    cmds.rowColumnLayout( nr=1)\n    cmds.text('  ')\n    StartIntField = cmds.intField('Start',w=50,v=1)\n    cmds.text(l='')\n    cmds.text(' to ')\n    cmds.text(l='')\n    EndtIntField = cmds.intField('End',w=50,v=25)\n    cmds.setParent( '..' )\n    \n    \n    cmds.rowColumnLayout( nr=1)\n    cmds.text(l='   Every  ')\n    EveryIntField = cmds.intField('Every',w=50,v=1)\n    cmds.text(l='  Frames')\n    cmds.separator(style='in')\n    cmds.setParent( '..' )\n    \n    cmds.rowColumnLayout( nr=1)\n    cmds.text('   Opacity   ')\n    cmds.floatSlider('opacity',min = 0, max = 1, value=0.5,dc=('opacityChange((cmds.floatSlider(\"opacity\",q=True,v=True)))'))\n    cmds.setParent('..')  \n    \n    CL2 = cmds.columnLayout( adjustableColumn=True )\n    RL2 = cmds.rowLayout(numberOfColumns = 3)\n    cmds.button( label='Create', command=('onionSkin(cmds.intField(\"Start\",q=1,v=1),cmds.intField(\"End\",q=1,v=1),cmds.intField(\"Every\",q=1,v=1))'))\n    cmds.button( label='Delete', command=('cmds.delete(\"OnionSkinMeshes\")'))\n    cmds.button( label='Show/Hide', command=('visCheck(\"OnionSkinMeshes\")'))\n    cmds.setParent( '..' )\n    cmds.text(l='www.alextavener.co.uk, 2014')\n    cmds.showWindow( OnionWindow )\n\ndef visCheck(object):\n    vis = cmds.getAttr(object+\".visibility\")\n    if vis == 1:\n        cmds.setAttr(object+\".visibility\",0)\n    else:\n        cmds.setAttr(object+\".visibility\",1)\n    \n\ndef onionSkin(start,end,every):\n    \n    #If already exists, delete\n    if cmds.objExists('OnionSkinMeshes'):\n        cmds.delete('OnionSkinMeshes')\n\n    #Create base variables\n    geo = cmds.ls(sl=True)\n    onionGeo = []\n    global onionShader\n    \n    \n    #for i in set timerange, duplicate mesh\n    for i in range(start,end+1,every):\n        cmds.currentTime(i)\n        copy = cmds.duplicate(geo)\n        for j in copy:\n            newName = cmds.rename(j,str(j)+'frame'+str(i))\n            onionGeo.append(newName)\n            cmds.parent(newName,w=True)\n            cmds.select(newName)\n            shape = cmds.pickWalk(d='down')\n            cmds.setAttr(shape[0]+'.overrideEnabled',1)\n            cmds.setAttr(shape[0]+'.overrideDisplayType',2)\n    \n    #Deselect, and create transparent shader\n    cmds.select(d=True)\n    onionShader=cmds.shadingNode(\"lambert\",asShader=True,n='onionShader')\n    cmds.setAttr(onionShader+\".transparency\", 0.5, 0.5, 0.5)\n    \n    #select all duplicated meshes\n    for i in onionGeo:\n        cmds.select(i,add=True)\n        \n    #assign shader\n    cmds.hyperShade(a=onionShader)\n\n    #group meshes\n    onionGroup = cmds.group(n='OnionSkinMeshes')\n\ndef opacityChange(num):\n    cmds.setAttr(onionShader+\".transparency\",num,num,num)\n\nOnionUI()\n#onionSkin(1,90,2)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "/*\nabWeightLifter v 1.9\nbrendan ross  06.01.2005\nwww.supercrumbly.com\n\nupdate -- 03.08.05:  Mirror tolerance was too small for copy.  Broke it out into two discreet user configurable variables.\nupdate -- 03.11.05:  Faster on subsequent mirror copies (Keep the script open to avoid having to rebuild the symmetry table).  Added option to show/hide unconnected influences warning dialogue.\nupdate -- 03.15.05:  Better method for copying vertices weighted to individual influences.  Added \"Show Selection Influences\", \"Select Influences\", and \"Include Dest Strays\".  Options mirror direction checkbox now actually does something.\nupdate -- 03.16.05:  Fixed \"Include Dest Strays\" selection bug.  Added \"Deselect Influenced\" button in Influence window.\nupdate -- 03.19.05:  Objects, connections, and symmetry table are now retained for mirror operations when the main UI is closed with the menu bar close button.\nupdate -- 03.21.05:  Added \"Cull Matching Weights\" to prefs.  If enabled matching src/dest vertex weights will be culled from the copy operation; much faster copies when > 60% (wild guess) of the vertex weights match properly.\nupdate -- 03.26.05:  Various bugs fixed.  Option for alphanumeric connection display (if you've got lots of infs).  Weight culling actually works now.\nupdate -- 06.01.05:  Added option to perform a copy like a mirror with \"Mirror Across Origin\" in the \"Copy Vertices Using:\" drop down; plus a few bug tweaks.\nupdate -- 09.23.05:  Fixed Maya 7 fatal error related to alphanumeric connection labels.  Added \"Show SymTable Vertices\" and \"Clear SymTable\" to options.\nupdate -- 06.04.07:  Interface now scales; skinCluster selection bug fixed; Select Influences button now works as expected -- if joints or transforms are selected when clicked, overlapping selection will be hilited in the filter influence list, otherwise selected items in the filter influence list will be selected in the scene; Select Influences window Select Influences button now selects influence transforms which is more useful than highlighting transforms in the source object scrollList.  Added \"Replace Skin\" to Tools menu.  To use it, select two meshes, one skinned the other not.  When you invoke the command, the unskinned mesh will be bound to the influences on the skinned mesh, all weights will be copied, the originally skinned mesh will be unbound and deleted.\nupdate -- 04.14.08:  \"Select Influenced Verts\" is now more sensitive.\nupdate -- 04.16.08:  Added \"Move Weights\" button to UI.  It will move all the weights of the source influence to the destination influence.  You can limit the scope of the operation by selecting vertices on your mesh (otherwise it will act on the entire mesh).  Avoid specifying the same inf in more than one connection at a time (infs connected to themselves are ignored).  Improved symmetry feedback.  A prompt now alerts you if the mesh isn't symmetrical.  SymTable menu items are disabled when there's no symTable data.  \nupdate -- 04.17.08:  Added \"Check Symmetry\", \"Get Symmetry From Selected\" and \"Copy Skin to Mesh\" to tools menu.  \"Check Symmetry\" will check for symmetry for mirror operations on both one object and across objects.  \"Get Symmetry From Selected\" will determine symmetry on your source and destination object (they must be the same) from another copy of the mesh.  This is useful for establishing symmetry when your symmetrical skinned mesh isn't reading as symmetrical because of skin weights (or whatever).  To use \"Copy Skin to Mesh\" you must first select a skinned and (at least partially overlapping) unskinned mesh and then click the menu item.  Once the UI appears you can select some vertices on the skinned mesh to limit which influences get skinned to the target mesh (if you don't select any vertices, the target will be bound to all source's influences).\nupdate -- 06.03.08:  Verts that lie on the origin will now be accounted for when \"Auto Weight Origin Verts\" is enabled in the preferences UI.  Added \"Select Centerline Vertices\" to the Options menu.\nupdate -- 02.06.09:  Added the ability to save and import weights (still no interpolation).   The import will be restricted to any selected verts on the destination mesh.  Improved auto connect and added find and replace fields to the UI for use with auto connecting (ignored in mirror mode).  Also various speed improvements and bug fixes (thanks Jiet).\nupdate -- 09.30.13:  Tweaked abWlReplaceSkin2() to be more reliable; changed name of \"Copy Skin to Mesh\" to \"Bind New Mesh To Skinned Mesh Infs\" so it's more clear.  Added two more search and replace fields to aid in auto-connecting influences.\n\nuse:\n\ngetting me out of a pickle\n\ndirections:\n\nSee help\n*/\n\n\n\nglobal proc string[] abWlBuildSymTable(string $srcObj, string $destObj, int $axis, int $posToNeg, float $tol, int $usePiv, int $checkSym){\n\t// if $checkSym is true, proc will not update the symTable (it will actually delete the current table).  This proc returns $aNonSymVerts;\n\t\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlOriginVts[];\n\tstring $aNegVerts[], $aPosVerts[], $aMidVerts[], $aNonSymVerts[], $aStr[], $vtx, $str;\n\tfloat $aNegVertTrans[], $aPosVertTrans[], $aVtxTrans[], $aVtx2Trans[], $bBox[], $mid, $midOffset, $posOffset, $negOffset, $flt, $progNum, $progDenom;\n\tint $aPosVertsInt[], $aNegVertsInt[], $aInt[], $totVtx, $i, $j, $mod, $prog, $ret;\n\tint $mAxisInd = $axis - 1; //mirror axis index (for xform)\n\tint $axis2Ind = ($mAxisInd + 1) % 3;\n\tint $axis3Ind = ($mAxisInd + 2) % 3;\n\tint $vertCounter = 0;\n\tint $singleObj = ($srcObj == $destObj);\n\t\n\tfloat $progUpdate = 50.0; //what percentage of time (during an operation) does the prog bar update itself\n\t\n\tif ($singleObj){\n\t\tif ($usePiv){\n\t\t\t$aVtxTrans = `xform -q -ws -t $srcObj`;\n\t\t\t$mid = $aVtxTrans[$mAxisInd];\n\t\t}else{\n\t\t\t$bBox = `xform -q -ws -boundingBox $srcObj`;\n\t\t\t$mid = $bBox[$mAxisInd] + (($bBox[($mAxisInd+3)] - $bBox[$mAxisInd])/2);\n\t\t}\n\t}else{\n\t\t$mid = 0;\n\t}\n\t\n\t$aInt = `polyEvaluate -v $srcObj`; \n\t$totVtx = $aInt[0];\n\t\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Sorting\";\n\t$progDenom = $totVtx;\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t\n\tif ($singleObj){\n\t\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\t\n\t\t\t//prog win\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t\t//end prog win\n\t\t\t\n\t\t\t$vtx = $srcObj+\".vtx[\"+$i+\"]\";\n\t\t\t$aVtxTrans = `xform -q -ws -translation $vtx`;\n\t\t\t$midOffset = $aVtxTrans[$mAxisInd] - $mid;\n\t\t\t\n\t\t\tif (abs($midOffset) < $tol){\n\t\t\t\t// it's a mid vertex\n\t\t\t\t$aMidVerts[size($aMidVerts)] = $vtx;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif ($midOffset >= 0){\n\t\t\t\t$aPosVerts[size($aPosVerts)] = $vtx;\n\t\t\t\t$aPosVertsInt[size($aPosVertsInt)] = $i;\n\t\t\t\t$aVtxTrans = `xform -q -ws -t $vtx`;\n\t\t\t\t$aPosVertTrans[size($aPosVertTrans)] = $aVtxTrans[$mAxisInd];\n\t\t\t}else{\n\t\t\t\tif ($midOffset < 0){\n\t\t\t\t\t$aNegVerts[size($aNegVerts)] = $vtx;\n\t\t\t\t\t$aNegVertsInt[size($aNegVertsInt)] = $i;\n\t\t\t\t\t$aVtxTrans = `xform -q -ws -t $vtx`;\n\t\t\t\t\t$aNegVertTrans[size($aNegVertTrans)] = $aVtxTrans[$mAxisInd];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}else{\n\t\t\n\t\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\t\n\t\t\t//prog win\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*50.0;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t\t//end prog win\n\t\t\t\n\t\t\t$vtx = $srcObj+\".vtx[\"+$i+\"]\";\n\t\t\t$aPosVerts[size($aPosVerts)] = $vtx;\n\t\t\t$aPosVertsInt[size($aPosVertsInt)] = $i;\n\t\t}\n\t\t$aInt = `polyEvaluate -v $destObj`; \n\t\tint $totDestVtx = $aInt[0];\n\t\t\n\t\t$progDenom = $totDestVtx;\n\t\t$mod = int(ceil($progDenom/$progUpdate));\n\t\t\n\t\tfor ($i=0;$i<$totDestVtx;$i++){\n\t\t\t\n\t\t\t//prog win\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*50.0 + 50;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t\t//end prog win\n\t\t\t\n\t\t\t$vtx = $destObj+\".vtx[\"+$i+\"]\";\n\t\t\t$aNegVerts[size($aNegVerts)] = $vtx;\n\t\t\t$aNegVertsInt[size($aNegVertsInt)] = $i;\n\t\t}\n\t}\n\t\n\tstring $aPosVertsComp[] = $aPosVerts;\n\tstring $aNegVertsComp[] = $aNegVerts;\n\t\n\tprogressWindow -e -progress 0 -status \"Building Symmetry Table\";\n\t\n\t$progDenom = size($aPosVertsComp);\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t\n\t//now find nonsymverts\n\tfor ($i=0;$i<size($aPosVertsComp);$i++){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = $progNum/$progDenom*100;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$vtx = $aPosVertsComp[$i];\n\t\t$posOffset = ($aPosVertTrans[$i] - $mid);\n\t\tif ($singleObj){\n\t\t\tif ($posOffset < $tol){\n\t\t\t\t$aPosVertsComp[$i] = \"m\";\n\t\t\t\t$vertCounter ++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tfor ($j=0;$j<size($aNegVertsComp);$j++){\n\t\t\tif ($aNegVertsComp[$j] == \"m\") continue;\n\t\t\t$negOffset = $mid - $aNegVertTrans[$j];\n\t\t\tif ($singleObj){\n\t\t\t\tif ($negOffset < $tol){\n\t\t\t\t\t$aNegVertsComp[$j] = \"m\";\n\t\t\t\t\t$vertCounter ++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (abs($posOffset - $negOffset) <= $tol){\n\t\t\t\t$aVtxTrans = `xform -q -ws -t $vtx`;\n\t\t\t\t$aVtx2Trans = `xform -q -ws -t $aNegVertsComp[$j]`;\n\t\t\t\t$test1 = $aVtxTrans[$axis2Ind] - $aVtx2Trans[$axis2Ind];\n\t\t\t\t$test2 = $aVtxTrans[$axis3Ind] - $aVtx2Trans[$axis3Ind];\n\t\t\t\tif (abs($test1) < $tol && abs($test2) < $tol){\n\t\t\t\t\t//match\n\t\t\t\t\t//use this info to build symmetry table\n\t\t\t\t\t$abWlSymTable[size($abWlSymTable)] = $srcObj+\".vtx[\"+$aPosVertsInt[$i]+\"]\";\n\t\t\t\t\t$abWlSymTable[size($abWlSymTable)] = $destObj+\".vtx[\"+$aNegVertsInt[$j]+\"]\";\n\t\t\t\t\t$vertCounter += 2;\n\t\t\t\t\t$aPosVertsComp[$i] = $aNegVertsComp[$j] = \"m\"; //m is for match\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//now strip out \"m\" from $aPosVertsComp and $aNegVertsComp, and we'll have asymmetry\n\t$aStr = {\"m\"};\n\t$aPosVertsComp = stringArrayRemove($aStr, $aPosVertsComp);\n\t$aNegVertsComp = stringArrayRemove($aStr, $aNegVertsComp);\n\t$aNonSymVerts = stringArrayCatenate($aPosVertsComp, $aNegVertsComp);\n\t\n\tif (size($aMidVerts) > 0) $abWlOriginVts = $aMidVerts;\n\t\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n\t\n\tif (!$checkSym){\n\t\tif (size($aPosVertsComp)+size($aNegVertsComp) > 0){\n\t\t\t//object is not symmetrical\n\t\t\tstring $result = `confirmDialog -title \"Confirm\" -message \"The base geometry is not symmetrical.  Not all weights\\ncan be mirrored.  If you think your mesh is symmetrical,\\ntry lowering the mirror tolerance in the options window.\\n\\nKeep the symmetry data?\" -button \"Yes\" -button \"No\" -defaultButton \"No\" -cancelButton \"No\" -dismissString \"No\"`;\n\t\t\tif ($result == \"No\"){\n\t\t\t\tclear($abWlSymTable);\n\t\t\t\tclear($abWlOriginVts);\n\t\t\t\t$vertCounter = 0;\n\t\t\t\tselect -r $aNonSymVerts;\n\t\t\t}\n\t\t}\n\t}else{\n\t\tclear($abWlSymTable);\n\t\tclear($abWlOriginVts);\n\t}\n\t\n\treturn $aNonSymVerts;\n\t\n}\n\n\nglobal proc abWlMirrorWeights(string $srcObj, string $destObj, int $axis, int $posToNeg, float $tol, int $usePiv, int $normalize){\n\t//$abWlSymTable goes a little like {obj.vtx[pos mAxis 1], obj.vtx[neg mAxis 1]}\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlOriginVts[];\n\tglobal string $abWlPrefs[];\n\tstring $aNegVerts[], $aPosVerts[], $vtxCopyList[], $vtx, $str, $aStr[], $aTemp[];\n\tint $i, $j, $k, $vtxNum;\n\tint $weightOriginVts = $abWlPrefs[12];\n\tint $originVtModCounter = 0;\n\t\n\tint $buildTable = (size($abWlSymTable) == 0) ? true : false; //flag -> true if need to build table\n\tif ($buildTable){\n\t\tabWlBuildSymTable($srcObj, $destObj, $axis, $posToNeg, $tol, $usePiv, false);\n\t}\n\t\n\tif (size($abWlSymTable) == 0){\n\t\twarning \"The symmetry table is empty.  Unable to proceed\";\n\t\treturn;\n\t}\n\t\n\t//copy weights from one side to the other\n\tstring $aSelVts[] = `filterExpand -sm 31`;\n\tif (size($aSelVts) == 0){\n\t\t//$aVtsToCopy = ($posToNeg) ? $aPosVerts : $aNegVerts;\n\t\tif ($posToNeg){\n\t\t\t$vtxCopyList = $abWlSymTable;\n\t\t}else{\n\t\t\t//reverse table\n\t\t\tfor ($i=0;$i<size($abWlSymTable);$i+=2){\n\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $abWlSymTable[$i+1];\n\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $abWlSymTable[$i];\n\t\t\t}\n\t\t}\n\t}else{\n\t\tfor ($i=0;$i<size($abWlSymTable);$i+=2){\n\t\t\t$aPosVerts[size($aPosVerts)] = $abWlSymTable[$i];\n\t\t\t$aNegVerts[size($aNegVerts)] = $abWlSymTable[$i+1];\n\t\t}\n\t\t\n\t\t//make sure $aSelVts are all on the copy side of the object\n\t\tstring $copySideVts[] = ($posToNeg) ? $aPosVerts : $aNegVerts;\n\t\tstring $myIntersector = `stringArrayIntersector`;\n\t\tstringArrayIntersector -edit -intersect $copySideVts $myIntersector;\n\t\tstringArrayIntersector -edit -intersect $aSelVts $myIntersector;\n\t\tstring $aVtsToCopy[] = `stringArrayIntersector -query $myIntersector`;\n\t\tdeleteUI $myIntersector;\n\t\t\n\t\t//make the copy list\n\t\tstring $mirrorVtx;\n\t\tfor ($i=0;$i<size($aVtsToCopy);$i++){\n\t\t\t$mirrorVtx = abWlGetSymVtx($aVtsToCopy[$i]);\n\t\t\tif ($mirrorVtx != \"\"){\n\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $aVtsToCopy[$i];\n\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $mirrorVtx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tabWlWeightCopy($vtxCopyList, $normalize);\n\t\n\t// take care of origin vertices if this is a single mesh mirror\n\t\n\tif ($weightOriginVts && size($abWlOriginVts) > 0 && $srcObj == $destObj){\n\t\t\n\t\tstring $aConnEdges[], $aConnVerts[], $cmd;\n\t\tstring $cluster = abWlGetSkinCluster($destObj);\n\t\tfloat $aWeights[], $aTempWeights[], $denom;\n\t\tstring $aInfs[] = `skinCluster -q -inf $cluster`;\n\t\tint $matchCounter;\n\t\t\n\t\t// make origin vert int array for easy indexing (currently $abWlOriginVts are strings)\n\t\tint $aOriginVtsInt[];\n\t\tfor ($i=0;$i<size($abWlOriginVts);$i++){\n\t\t\t\n\t\t\t$str = `match \".vtx\\[[0-9]+\\]\" $abWlOriginVts[$i]`;\n\t\t\t$str = `match \"[0-9]+\" $str`;\n\t\t\t\n\t\t\t$aOriginVtsInt[size($aOriginVtsInt)] = int($str);\n\t\t\t\n\t\t}\n\t\t\n\t\tfor ($i=0;$i<size($abWlOriginVts);$i++){\n\t\t\t\n\t\t\tclear($aConnVerts);\n\t\t\tclear($aConnEdges);\n\t\t\tclear($aWeights);\n\t\t\tclear($aTempWeights);\n\t\t\t\n\t\t\t// get current vtx number\n\t\t\t$vtxNum = $aOriginVtsInt[$i];\n\t\t\t\n\t\t\t// first get connected verts for each origin vtx\n\t\t\t$aTemp = `polyInfo -vertexToEdge $abWlOriginVts[$i]`;\n\t\t\ttokenize($aTemp[0], $aStr);\n\t\t\t\n\t\t\t// get connected edges\n\t\t\tfor ($j=2;$j<size($aStr);$j++) $aConnEdges[size($aConnEdges)] = $destObj+\".e[\"+$aStr[$j]+\"]\"; \n\t\t\t\n\t\t\tif (size($aConnEdges) == 0) continue;\n\t\t\t\n\t\t\t// get connected verts\n\t\t\tfor ($j=0;$j<size($aConnEdges);$j++){\n\t\t\t\t\n\t\t\t\t$aTemp = `polyInfo -edgeToVertex $aConnEdges[$j]`;\n\t\t\t\ttokenize($aTemp[0], $aStr);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor ($k=2;$k<size($aStr);$k++){\n\t\t\t\t\tif (int($aStr[$k]) != $vtxNum){\n\t\t\t\t\t\tif ( `match \"[0-9]*\" $aStr[$k]` != \"\"){ \n\t\t\t\t\t\t\t// throw out other origin verts\n\t\t\t\t\t\t\tif (abWlIntGetPos(int($aStr[$k]), $aOriginVtsInt) == -1){\n\t\t\t\t\t\t\t\t$aConnVerts[size($aConnVerts)] = $destObj+\".vtx[\"+$aStr[$k]+\"]\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t// average connected weights in common\n\t\t\tfor ($j=0;$j<size($aConnVerts);$j++){\n\t\t\t\t\n\t\t\t\tif ($j == 0){\n\t\t\t\t\t$aWeights = `skinPercent -query -value $cluster $aConnVerts[$j]`;\n\t\t\t\t}else{\n\t\t\t\t\t$aTempWeights = `skinPercent -query -value $cluster $aConnVerts[$j]`;\n\t\t\t\t\tfor ($k=0;$k<size($aWeights);$k++) $aWeights[$k] = $aWeights[$k] + $aTempWeights[$k];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$denom = float(size($aConnVerts));\n\t\t\t\n\t\t\tfor ($j=0;$j<size($aWeights);$j++) $aWeights[$j] = $aWeights[$j]/$denom;\n\t\t\t\n\t\t\t// skinPercent\n\t\t\tif (size($aInfs) == size($aWeights)){\n\t\t\t\t\n\t\t\t\t// check existing weights against $aWeights\n\t\t\t\t$aTempWeights = `skinPercent -query -value $cluster $abWlOriginVts[$i]`;\n\t\t\t\t$matchCounter = 0;\n\t\t\t\t\n\t\t\t\tfor ($j=0;$j<size($aTempWeights);$j++){\n\t\t\t\t\tif (abs($aTempWeights[$j] - $aWeights[$j]) < $tol) $matchCounter++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// if this vert's weights are already where we want them then skip it\n\t\t\t\tif ($matchCounter == size($aWeights)) continue;\n\t\t\t\t\n\t\t\t\t//adjust weights\t\t\t\t\n\t\t\t\t$cmd = \"skinPercent -normalize \"+$normalize;\n\t\t\t\tfor ($j=0;$j<size($aInfs);$j++){\n\t\t\t\t\t$cmd += \" -tv \"+$aInfs[$j]+\" \"+$aWeights[$j];\n\t\t\t\t}\n\t\t\t\t$cmd += \" \"+$cluster+\" \"+$abWlOriginVts[$i];\n\t\t\t\teval($cmd);\n\t\t\t\t$originVtModCounter++;\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\t// done with origin verts\n\t\n\tstring $msgStr;\n\t$msgStr = ((size($vtxCopyList))/2)+\" vertex weight(s) copied.\";\n\tif ($originVtModCounter > 0) $msgStr += \"  \"+$originVtModCounter+\" origin vertex weight(s) modified.\";\n\t\n\tprint $msgStr;\n\t\n}\n\n\nglobal proc string[] abWlCullMatchingWeights(string $aVts[]){\n\t//$aVts is array of matching verts (src, dest) on same or different objects (mirror or copy) -- returns only verts with non matching weights\n\t\n\tstring $ret[], $srcInfs[], $destInfs[], $srcVtx, $destVtx, $conInf;\n\tint $i, $j, $match, $tInd;\n\t\n\tstring $srcObj = `textField -q -text soFld`;\n\tstring $destObj = `textField -q -text doFld`;\n\tstring $srcCluster = abWlGetSkinCluster($srcObj);\n\tstring $destCluster = ($srcObj != $destObj) ? abWlGetSkinCluster($destObj) : $srcCluster;\n\tstring $srcInfsStr, $destInfsStr, $srcComp[], $destComp[];\n\tfloat $aSrcWeights[], $aDestWeights[];\n\tfloat $matchTol = .0000000001;\n\t\n\t//build connection arrays for faster lookup\n\tglobal string $abWlSrcInf[], $abWlDestInf[];\n\tstring $destConLU[], $inf;\n\tfor ($i=0;$i<size($abWlSrcInf);$i++){\n\t\t$tInd = abWlGetConnectedInf($i, -1);\n\t\tif ($tInd >= 0) $destConLU[$i] = $abWlDestInf[$tInd];\n\t}\n\t\n\tint $mod, $prog;\n\tfloat $flt, $progNum, $progDenom;\n\tfloat $progUpdate = 50.0;\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Culling Matching Weights\";\n\t$progDenom = size($aVts);\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t\n\tfor ($i=0;$i<size($aVts);$i+=2){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$match = 0;\n\t\t$srcVtx = $aVts[$i];\n\t\t$destVtx = $aVts[$i+1];\n\t\t$srcInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $srcCluster $srcVtx`;\n\t\t$aSrcWeights = `skinPercent -ib .00000000000000000000000000000000000000001 -q -v $srcCluster $srcVtx`;\n\t\t$destInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $destCluster $destVtx`;\n\t\t$aDestWeights = `skinPercent -ib .00000000000000000000000000000000000000001 -q -v $destCluster $destVtx`;\n\t\t\n\t\tif (size($srcInfs) == size($destInfs)){\n\t\t\tfor ($j=0;$j<size($srcInfs);$j++){\n\t\t\t\t$tInd = abWlStrGetPos($srcInfs[$j], $abWlSrcInf);\n\t\t\t\tif ($tInd >= 0){\n\t\t\t\t\t$conInf = $destConLU[$tInd];\n\t\t\t\t\tif (abWlStrGetPos($conInf, $destInfs) != -1){\n\t\t\t\t\t\t//if (`skinPercent -t ($srcInfs[$j]) -q -v $srcCluster $srcVtx` - `skinPercent -t $conInf -q -v $destCluster $destVtx` < $matchTol){\n\t\t\t\t\t\tif ($aSrcWeights[$tInd] - $aDestWeights[$tInd] < $matchTol){\n\t\t\t\t\t\t\t$match ++;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($match != size($srcInfs)){\n\t\t\t$ret[size($ret)] = $srcVtx;\n\t\t\t$ret[size($ret)] = $destVtx;\n\t\t}\n\t}\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n\tprint (\"Culled \"+(size($aVts)-size($ret))+\" verts with symmetrical weighting from selection\\n\");\n\treturn $ret;\n}\n\n\nglobal proc string[] abWlStrArrayCatenateUnique(string $array1[], string $array2[]){\n\t//combines two string arrays culling duplicate values\n\t\n\tstring $ret[] = stringArrayCatenate($array1, $array2);\n\t$ret = stringArrayRemoveDuplicates($ret);\n\tselect -r $array2;\t\n\treturn $ret;\n}\n\n\nglobal proc abWlMoveWeights(){\n\t// called from move weights button in the UI -- calls abWlReplaceWeights if all is good to go\n\t\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tstring $obj = `textField -q -text \"soFld\"`;\n\tstring $aSelVts[];\n\t\n\t// make infTable\n\tint $i;\n\tstring $aInfTable[];\n\t\n\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t\n\t\t$aInfTable[size($aInfTable)] = $abWlSrcInf[$abWlInfConnections[$i]];\n\t\t$aInfTable[size($aInfTable)] = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t}\n\t\n\tif (size($aInfTable) == 0){\n\t\twarning \"Make some connections between influences and try again\";\n\t\treturn;\n\t}\n\t\n\tstring $aHilite[] = `ls -hilite`;\n\tif (size($aHilite) == 1 && $aHilite[0] == $obj){\n\t\t$aSelVts = `filterExpand -sm 31`;\n\t}else if (size($aHilite) > 1){\n\t\twarning \"Multiple objects are in component mode.  Select vertices on your source mesh to limit the move operation.  Unable to proceed.\";\n\t\treturn;\n\t}\n\t\n\tabWlReplaceWeights($obj, $aInfTable, $aSelVts);\n\t\n}\n\n\nglobal proc abWlReplaceWeights(string $obj, string $aInfTable[], string $aVts[]){\n\t// operates on a single object ($srcObj = $destObj), instead of a mirror copy this proc takes all weights of a source inf and move them to the dest inf\n\t// $aInfTable is in the form of {$srcInf, $destInf, $src2Inf, $dest2Inf}\n\t// confined to selected ($aVts) vertices.  If $aVts is empty it uses the entire object.\n\t\n\tif (!objExists($obj)){\n\t\twarning ($obj+\" doesn't exist.\");\n\t\treturn;\n\t}\n\t\n\tstring $cluster = abWlGetSkinCluster($obj);\n\t\n\tif ($cluster == \"\"){\n\t\twarning ($obj+\" is not a skinned mesh\");\n\t\treturn;\n\t}\n\t\n\tint $i, $aInt[], $totVts;\n\tstring $srcInf, $destInf, $aInfVts[], $aSrcInfVts[], $vtx;\n\tfloat $aSrcWeight, $aDestWeight;\n\tint $infCounter = 0;\n\tint $vtxCounter = 0;\n\t\n\t// fill $aVts if empty\n\tif (size($aVts) == 0){\n\t\t\n\t\t$aInt = `polyEvaluate -v $obj`;\n\t\t$totVts = $aInt[0];\n\t\t\n\t\tstring $vtxStr = $obj+\".vtx[\";\n\t\t\n\t\tfor ($i=0;$i<$totVts;$i++) $aVts[size($aVts)] = $vtxStr+$i+\"]\";\n\t}\n\t\n\t// iterate through infs and intersect inf verts with aVts to create selection to work on\n\tstring $myIntersector = `stringArrayIntersector`;\n\t\n\tfor ($i=0;$i<size($aInfTable);$i+=2){\n\t\t\n\t\t$srcInf = $aInfTable[$i];\n\t\t$destInf = $aInfTable[$i+1];\n\t\t\n\t\tif (!objExists($srcInf) || !objExists($destInf) || $srcInf == $destInf) continue;\n\t\t\n\t\tstringArrayIntersector -edit -reset $myIntersector;\n\t\t\n\t\t$aSrcInfVts = abWlGetAffectedVertsByInf($obj, {$srcInf});\n\t\t\n\t\tstringArrayIntersector -edit -intersect $aVts $myIntersector;\n\t\tstringArrayIntersector -edit -intersect $aSrcInfVts $myIntersector;\n\t\t\n\t\t$aInfVts = `stringArrayIntersector -query $myIntersector`;\n\t\t\n\t\tfor ($vtx in $aInfVts){\n\t\t\t// move the weights from srcInf to destInf\n\t\t\t\n\t\t\t$aSrcWeight = `skinPercent -transform $srcInf -query $cluster $vtx`;\n\t\t\t$aDestWeight = `skinPercent -transform $destInf -query $cluster $vtx`;\n\t\t\t$aDestWeight += $aSrcWeight;\n\t\t\t\n\t\t\t// set weights\n\t\t\tskinPercent -transformValue $srcInf 0 -transformValue $destInf $aDestWeight $cluster $vtx;\n\t\t\t\n\t\t\t$vtxCounter++;\n\t\t}\n\t\t$infCounter++;\n\t}\n\t\n\tdeleteUI $myIntersector;\n\t\n\tstring $pairStr = ($infCounter == 1) ? \"pair\" : \"pairs\";\n\tstring $weightStr = ($vtxCounter == 1) ? \"weight\" : \"weights\";\n\tprint (\"Moved \"+$vtxCounter+\" \"+$weightStr+\" between \"+$infCounter+\" influence \"+$pairStr+\".\\n\");\n\t\n}\n\n\nglobal proc abWl2MeshWeightCopy(string $srcObj, string $destObj, float $tol, int $normalize, int $copyType){\n\t//sets up vertCopyList and sends it to abWlWeightCopy for mesh to mesh copies\n\t//mode is 1 worldSpace, 2 objectSpace, 3 vertexNum\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSymTable[];\n\tstring $destVtx, $srcVtx;\n\tint $i, $j, $k;\n\tint $aInt[] = `polyEvaluate -v $srcObj`;\n\tint $totSrcVts = $aInt[0];\n\t$aInt = `polyEvaluate -v $destObj`;\n\tint $totDestVts = $aInt[0];\n\tfloat $aFlt[];\n\tfloat $progUpdate = 50.0;\n\t\n\tstring $aSrcVts[];\n\tfor ($i=0;$i<$totSrcVts;$i++){\n\t\t$aSrcVts[size($aSrcVts)] = $srcObj+\".vtx[\"+$i+\"]\";\n\t}\n\tstring $aDestVts[];\n\tfor ($i=0;$i<$totDestVts;$i++){\n\t\t$aDestVts[size($aDestVts)] = $destObj+\".vtx[\"+$i+\"]\";\n\t}\n\t\n\tstring $aSelVts[] = `filterExpand -sm 31`;\n\tif (size($aSelVts) == 0){\n\t\t$aSelVts = $aSrcVts;\n\t}\n\t\n\t//make sure only srcObj verts are selected\n\tstring $myIntersector = `stringArrayIntersector`;\n\tstringArrayIntersector -edit -intersect $aSrcVts $myIntersector;\n\tstringArrayIntersector -edit -intersect $aSelVts $myIntersector;\n\tstring $aVtsToCopy[] = `stringArrayIntersector -query $myIntersector`;\n\tdeleteUI $myIntersector;\n\t\n\tint $totVtsToCopy = size($aVtsToCopy);\n\tstring $vtxCopyList[];\n\t\n\tif ($copyType == 1 || $copyType == 2){\n\t\t\n\t\tint $matchInd;\n\t\tfloat $floatMatchFlag = -666666.0;\n\t\t\n\t\tstring $space = ($copyType == 1) ? \"-ws\" : \"-os\";\n\t\t\n\t\tint $mod;\n\t\tint $prog;\n\t\tfloat $flt;\n\t\tfloat $progNum;\n\t\t\n\t\twaitCursor -state on;\n\t\tprogressWindow -title \"Working\" -progress 0 -status \"Checking Overlap\";\n\t\t$progDenom = $totVtsToCopy;\n\t\t$flt = ceil($progDenom/$progUpdate);\n\t\t$mod = $flt;\n\t\t\n\t\t//make lookup for destObj\n\t\tfloat $destXTransLU[], $destYTransLU[], $destZTransLU[];\n\t\tfor ($i=0;$i<$totDestVts;$i++){\n\t\t\t$destVtx = $aDestVts[$i];\n\t\t\t$aFlt = eval(\"xform \"+$space+\" -q -translation \"+$destVtx);\n\t\t\t$destXTransLU[size($destXTransLU)] = $aFlt[0];\n\t\t\t$destYTransLU[size($destYTransLU)] = $aFlt[1];\n\t\t\t$destZTransLU[size($destZTransLU)] = $aFlt[2];\n\t\t}\n\t\t\n\t\tfor ($i=0;$i<$totVtsToCopy;$i++){\n\t\t\t\n\t\t\t//prog win\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t\t//end prog win\n\t\t\t\n\t\t\t$srcVtx = $aVtsToCopy[$i];\n\t\t\t$aFlt = eval(\"xform \"+$space+\" -q -translation \"+$srcVtx);\n\t\t\tfor ($j=0;$j<$totDestVts;$j++){\n\t\t\t\tif ($aFlt[0] == $floatMatchFlag){ //this might slow things down, I'll have to check\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (abs($destXTransLU[$j] - $aFlt[0]) < $tol){\n\t\t\t\t\t//passed the first gate\n\t\t\t\t\tif (abs($destYTransLU[$j] - $aFlt[1]) < $tol){\n\t\t\t\t\t\t//second, and...\n\t\t\t\t\t\tif (abs($destZTransLU[$j] - $aFlt[2]) < $tol){\n\t\t\t\t\t\t\t//match!\n\t\t\t\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $srcVtx;\n\t\t\t\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $aDestVts[$j];\n\t\t\t\t\t\t\t$destXTransLU[$j] = $destYTransLU[$j] = $destZTransLU[$j] = $floatMatchFlag;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tprogressWindow -endProgress;\n\t\twaitCursor -state off;\n\t\t\n\t}else if ($copyType == 3){\n\t\t//copy by vtx (I doubt anyone but me will ever need this)\n\t\tint $srcObjStrOffset = size($srcObj)+1;\n\t\tint $srcVtxStrSize;\n\t\tfor ($i=0;$i<$totVtsToCopy;$i++){\n\t\t\t$srcVtx = $aVtsToCopy[$i];\n\t\t\t$srcVtxStrSize = size($srcVtx);\n\t\t\t$destVtx = $destObj + `substring $srcVtx $srcObjStrOffset $srcVtxStrSize`;\n\t\t\t$vtxCopyList[size($vtxCopyList)] = $srcVtx;\n\t\t\t$vtxCopyList[size($vtxCopyList)] = $destVtx;\n\t\t}\n\t}\n\t\n\tabWlWeightCopy($vtxCopyList, $normalize);\n\t\n\tprint (((size($vtxCopyList))/2)+\" vertex weight(s) copied\\n\");\n}\n\n\nglobal proc abWlWeightCopy(string $vtsCopyList[], int $normalize){\n\t//here's where the heavy lifting is done -- pass a paired list of verts [pair1src.vtx, pair1dest.vtx, pair2src.vtx, pair2dest.vtx] and this proc will copy infs according to the infconnectionlist\n\t//if a src inf isn't connected to a dest inf, it won't be copied, it will be normalized though, so the weights won't be symmetrical\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlPrefs[];\n\tint $i, $j;\n\t\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tstring $destObj = `textField -q -text \"doFld\"`;\n\tstring $srcCluster = abWlGetSkinCluster($srcObj);\n\tstring $destCluster = abWlGetSkinCluster($destObj);\n\tstring $srcVtx, $destVtx, $tSrcInfs[], $tCurInfs[], $tDestInfsCopy[], $tvStr;\n\tfloat $tWeight;\n\tfloat $progUpdate = 50.0;\n\tint $destVtxInd;\n\t\n\tint $utInt = $abWlPrefs[10];\n\tif ($utInt) $vtsCopyList = abWlCullMatchingWeights($vtsCopyList);\n\t\n\tstring $tInfName, $tSrcInfName, $tDestInfName;\n\tstring $srcConLU[]; //source connection lookup\n\tstring $destConLU[]; //dest connection lookup\n\tstring $aInfsCopyList[]; //convert connections list from int to string\n\tint $aInitDestLock[]; //stores init state of lockweights\n\t\n\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t$tDestInfName = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t\t$aInitDestLock[size($aInitDestLock)] = `skinCluster -inf $tDestInfName -q -lockWeights $destCluster`;\n\t\tskinCluster -e -inf $tDestInfName -lockWeights 0 $destCluster; //make sure all infs are unlocked so weights can be pruned to 0\n\t\t\n\t\t//make 2 lists to speed lookup of connections -- first with connected srcnames, second with destnames at corresponding indices\n\t\t$srcConLU[size($srcConLU)] = $abWlSrcInf[$abWlInfConnections[$i]];\n\t\t$destConLU[size($destConLU)] = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t}\n\t\n\tint $scNormWeights = `getAttr ($destCluster+\".normalizeWeights\")`;\n\tif ($scNormWeights == (1-$normalize)){\n\t\tsetAttr ($destCluster+\".normalizeWeights\") $normalize;\n\t}\n\t\n\tint $mod;\n\tint $prog;\n\tfloat $flt;\n\tfloat $progNum;\n\tfloat $progDenom;\n\t\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Copying Weights\";\n\t$progDenom = size($vtsCopyList);\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t//string $testDestVtx[];\n\tfor ($i=0;$i<size($vtsCopyList);$i+=2){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$srcVtx = $vtsCopyList[$i];\n\t\t$destVtx = $vtsCopyList[$i+1];\n\t\t//get infs on src vtx\n\t\t\n\t\t$tSrcInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -transform $srcCluster $srcVtx`;\n\t\t\n\t\t//get corresponding dest infs to copy to\n\t\t$tvStr = \"\";\n\t\tclear($tCurInfs);\n\t\tfor ($j=0;$j<size($tSrcInfs);$j++){\n\t\t\t$tSrcInfName = $tSrcInfs[$j];\n\t\t\t$destVtxInd = abWlStrGetPos($tSrcInfName, $srcConLU);\n\t\t\tif ($destVtxInd != -1){\n\t\t\t\t$tDestInfName = $destConLU[$destVtxInd];\n\t\t\t\t$tWeight = `skinPercent -transform $tSrcInfName -q $srcCluster $srcVtx`;\n\t\t\t\t$tvStr += \" -tv \"+$tDestInfName+\" \"+$tWeight;\n\t\t\t\t$tCurInfs[size($tCurInfs)] = $tDestInfName;\n\t\t\t}\n\t\t}\n\t\tif ($tvStr != \"\"){\n\t\t\t$tDestInfsCopy = $abWlDestInf;\n\t\t\t$tDestInfsCopy = stringArrayRemove($tCurInfs, $tDestInfsCopy); //tDestInfsCopy is now all infs on destobj that will be set to 0\n\t\t\tfor ($tDestInfName in $tDestInfsCopy){\n\t\t\t\t$tvStr += \" -tv \"+$tDestInfName+\" 0\";\n\t\t\t}\n\t\t\t\n\t\t\teval(\"skinPercent -nrm 0\"+$tvStr+\" \"+$destCluster+\" \"+$destVtx);\n\t\t\tif($normalize){\n\t\t\t\tskinPercent -nrm 1 -prw .00000000000000000000000000000000000000001 $destCluster $destVtx;\n\t\t\t}\n\t\t}\n\t}\n\t//select -r $testDestVtx;\n\tsetAttr ($destCluster+\".normalizeWeights\") $scNormWeights;\n\tfor ($i=0;$i<size($aInitDestLock);$i++){\n\t\tskinCluster -e -inf $destConLU[$i] -lockWeights $aInitDestLock[$i] $destCluster;\n\t}\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n}\n\n\nglobal proc abWlDoIt(){\n\t//copy weights\n\t\n\tglobal string $abWlPrefs[]; //{\"lf_\", \"rt_\", \"3\", \"1\", \"3\"}\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSrcInf[];\n\tint $mirrorAxis = $abWlPrefs[2];\n\tint $mirrorPos2Neg = $abWlPrefs[3];\n\tint $copyType = $abWlPrefs[4];\n\t//int $normalize = ($abWlPrefs[5] == \"1\") ? 1 : 0;\n\tint $normalize = $abWlPrefs[5];\n\tint $ok = false; //true if all src infs have connections\n\tfloat $mTol = $abWlPrefs[6];\n\tfloat $cTol = $abWlPrefs[7];\n\tint $showDialogue = $abWlPrefs[8];\n\tstring $importFileName = $abWlPrefs[13];\n\t\n\tif (size($abWlSrcInf) == (size($abWlInfConnections)/2)){\n\t\t$ok = true;\n\t}else{\n\t\tif (size($abWlInfConnections) > 0){\n\t\t\tif ($showDialogue){\n\t\t\t\tstring $result = `confirmDialog -title \"Confirm\" -message \"At least one source influence is unconnected.\\nThis could lead to lead to funky results.\\n\\nAre you sure you want to proceed?\" -button \"Yes\" -button \"No\" -defaultButton \"No\" -cancelButton \"No\" -dismissString \"No\"`;\n\t\t\t\tif ($result == \"Yes\"){\n\t\t\t\t\t$ok = true;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t$ok = true;\n\t\t\t}\n\t\t}else{\n\t\t\twarning (\"You need to specify at least one connection between a source and destination influence\");\n\t\t}\n\t}\n\t\n\tif (size($abWlInfConnections) > 0 && $ok){\n\t\tstring $srcObj = `textField -q -text \"soFld\"`;\n\t\tstring $destObj = `textField -q -text \"doFld\"`;\n\t\tif ($srcObj != \"\" && $destObj != \"\"){\n\t\t\tif ($srcObj == $destObj || $copyType == 4){\n\t\t\t\t//mirror this object\n\t\t\t\tif ($importFileName == \"\"){\n\t\t\t\t\tabWlMirrorWeights($srcObj, $destObj, $mirrorAxis, $mirrorPos2Neg, $mTol, 1, $normalize);\n\t\t\t\t}else{\n\t\t\t\t\twarning \"Mirror copies aren't supported for imports.\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif ($importFileName == \"\"){\n\t\t\t\t\t//copy from $srcObj to $destObj\n\t\t\t\t\tabWl2MeshWeightCopy($srcObj, $destObj, $cTol, $normalize, $copyType);\n\t\t\t\t}else{\n\t\t\t\t\t//impoprt from file to $destObj\n\t\t\t\t\tabWlImportWeights($srcObj, $destObj, $cTol, $normalize, $copyType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nglobal proc string abWlGetSymVtx(string $vtx){\n\t//works with string versions of vtx names (unlike abSymMesh)\n\t\n\tglobal string $abWlSymTable[];\n\t\n\tstring $mVtx = \"\";\n\tint $i;\n\t\n\tfor ($i=0;$i<size($abWlSymTable);$i++){\n\t\tif ($vtx == $abWlSymTable[$i]){\n\t\t\t//match\n\t\t\tif (($i % 2) == 0){\n\t\t\t\t//even number, match is record above (it's a positive vert)\n\t\t\t\t$mVtx = $abWlSymTable[$i+1];\n\t\t\t}else{\n\t\t\t\t$mVtx = $abWlSymTable[$i-1];\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $mVtx;\n}\n\n\nglobal proc abWlAutoConnect(){\n\t//attempts to connect items in src and dest pane\n\t\n\tglobal string $abWlPrefs[];\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tint $autoConnections[], $i, $j, $srcInd, $destInd;\n\tstring $infName, $conInfName; //connected (potential) inf name\n\tstring $lp = $abWlPrefs[0];\n\tstring $rp = $abWlPrefs[1];\n\tstring $abWlDestInfLeaves[];\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tstring $destObj = `textField -q -text \"doFld\"`;\n\t\n\tstring $find = $abWlPrefs[14];\n\tstring $replace = $abWlPrefs[15];\n\tstring $find2 = $abWlPrefs[16];\n\tstring $replace2 = $abWlPrefs[17];\n\tstring $find3 = $abWlPrefs[18];\n\tstring $replace3 = $abWlPrefs[19];\n\t\n\tint $lpSize = size($lp);\n\tint $rpSize = size($rp);\n\tint $connectCounter = 0;\n\tint $noConnectCounter = 0;\n\t\n\t//run through srcInf array attempting to match with items from destInf array\n\t\n\tfor ($i=0;$i<size($abWlDestInf);$i++){\n\t\t$abWlDestInfLeaves[size($abWlDestInfLeaves)] = `match \"[a-zA-Z0-9_]+$\" $abWlDestInf[$i]`;\n\t}\n\t\n\tif ($lp != \"\" && $rp != \"\"){\n\t\tfor ($i=0;$i<size($abWlSrcInf);$i++){\n\t\t\t$infName = `match \"[a-zA-Z0-9_]+$\" $abWlSrcInf[$i]`;\n\t\t\t//flip inf to other prefix (if it has a prefix)\n\t\t\tif ($srcObj == $destObj || $abWlPrefs[4] == 4){\n\t\t\t\tif (startsWith($infName, $lp)){\n\t\t\t\t\t$conInfName = $rp + endString($infName, size($infName)-$lpSize);\n\t\t\t\t}else if (startsWith($infName, $rp)){\n\t\t\t\t\t$conInfName = $lp + endString($infName, size($infName)-$rpSize);\n\t\t\t\t}else{\n\t\t\t\t\tif (`match $lp $infName` != \"\"){\n\t\t\t\t\t\t$conInfName = substitute($lp, $infName, $rp);\n\t\t\t\t\t}else if (`match $rp $infName` != \"\"){\n\t\t\t\t\t\t$conInfName = substitute($rp, $infName, $lp);\n\t\t\t\t\t}else{\n\t\t\t\t\t\t$conInfName = $infName;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t$conInfName = $infName;\n\t\t\t}\n\t\t\t\n\t\t\tif ($find != \"\" && $srcObj != $destObj) $conInfName = substitute($find, $conInfName, $replace);\n\t\t\tif ($find2 != \"\" && $srcObj != $destObj) $conInfName = substitute($find2, $conInfName, $replace2);\n\t\t\tif ($find3 != \"\" && $srcObj != $destObj) $conInfName = substitute($find3, $conInfName, $replace3);\n\t\t\t\n\t\t\t$destInd = abWlStrGetPos($conInfName, $abWlDestInfLeaves);\n\t\t\t\n\t\t\tif ($destInd != -1){\n\t\t\t\t$srcInd = $i;\n\t\t\t\tabWlConnectInfs($srcInd, $destInd, 0);\n\t\t\t\t$connectCounter++;\n\t\t\t}else{\n\t\t\t\t$noConnectCounter++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif ($connectCounter == 0){\n\t\tif ($srcObj == $destObj){\n\t\t\tprint \"No mirror connections were made.  Make sure that the left and right prefixes in the options UI match your own naming conventions.\\n\";\n\t\t}else{\n\t\t\tif ($abWlPrefs[4] == 4){\n\t\t\t\tprint \"No mirror connections were made.  Make sure that the left and right prefixes in the options UI match your own naming conventions.\\n\";\n\t\t\t}else{\n\t\t\t\tprint \"No copy connections were made.  If you are trying to mirror weights across the origin, remember to specify \\\"Mirror Across Origin\\\" in the preferences UI.\\n\";\n\t\t\t}\n\t\t}\n\t}else{\n\t\tprint ($connectCounter+\" connection(s) made.  Unable to connect \"+$noConnectCounter+\" influence(s).\\n\");\n\t}\n\t\n}\n\n\nglobal proc abWlClose(){\n\t//close window\n\t\n\tdeleteUI -window abWlWin;\n\tif (`window -exists abWlPrefsWin`){\n\t\tdeleteUI -window abWlPrefsWin;\n\t}\n\tif (`window -exists abWlHelp`){\n\t\tdeleteUI -window abWlHelp;\n\t}\n\tif (`window -exists abWlVertInfs`){\n\t\tdeleteUI -window abWlVertInfs;\n\t}\n\tabWlClearGlobals();\n}\n\n\nglobal proc abWlClearGlobals(){\n\t\n\tglobal int $abWlSelList[];\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlOriginVts[];\n\t\n\tclear($abWlSelList);\n\tclear($abWlSrcInf);\n\tclear($abWlDestInf);\n\tclear($abWlInfConnections);\n\tclear($abWlSymTable);\n\tclear($abWlOriginVts);\n}\n\n\nglobal proc string[] abGetSrc2DestConInfsAsStr(string $aSelInfs[]){\n\t//returns a string of connected infs when given array of src infs\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\t\n\tstring $aConInfs[];\n\tint $tConInf, $i, $j;\n\tfor ($i=0;$i<size($aSelInfs);$i++){\n\t\t//need to find index of cur $aInfs item in $abWlSrcInf\n\t\tfor ($j=0;$j<size($abWlSrcInf);$j++){\n\t\t\tif ($aSelInfs[$i] == $abWlSrcInf[$j]){\n\t\t\t\t$tConInf = abWlGetConnectedInf($j, -1);\n\t\t\t\tif ($tConInf != -1){\n\t\t\t\t\t$aConInfs[size($aConInfs)] = $abWlDestInf[$tConInf];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $aConInfs;\n}\n\n\nglobal proc abWlFWSelVerts(){\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlPrefs[];\n\tglobal int $abWlInfConnections[];\n\tint $aSelInd[] = `textScrollList -q -sii \"fiList\"`;\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tstring $destObj = `textField -q -text \"doFld\"`;\n\tstring $srcCluster = abWlGetSkinCluster($srcObj);\n\tstring $destCluster = abWlGetSkinCluster($destObj);\n\tstring $aSelInfs[], $selVerts[], $aConInfs[];\n\tint $ind;\n\t\n\tfor ($ind in $aSelInd){\n\t\t$aSelInfs[size($aSelInfs)] = $abWlSrcInf[$ind-1];\n\t}\n\t\n\tif (size($aSelInd) != 0){\n\t\tselectMode -object;\n\t\tselect -r $srcObj;\n\t\tselectMode -component;\n\t\tselectType -vertex true;\n\t\t\n\t\tif ($abWlPrefs[9] == true){\n\t\t\t\n\t\t\t//make sure there's a symtable if $srcObj == $destObj\n\t\t\tif ($srcObj == $destObj){\n\t\t\t\tif (size($abWlSymTable) == 0){\n\t\t\t\t\tint $mirrorAxis = $abWlPrefs[2];\n\t\t\t\t\tint $mirrorPos2Neg = $abWlPrefs[3];\n\t\t\t\t\tfloat $mTol = $abWlPrefs[6];\n\t\t\t\t\tabWlBuildSymTable($srcObj, $destObj, $mirrorAxis, $mirrorPos2Neg, $mTol, true, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//get connected infs\n\t\t\t\tif (size($abWlInfConnections) > 0){\n\t\t\t\t\t$aConInfs = abGetSrc2DestConInfsAsStr($aSelInfs);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//check to see if connected\n\t\t\t\tstring $result = \"Yes\";\n\t\t\t\tif (size($aSelInfs) != size($aConInfs)){\n\t\t\t\t\t//at least on sel inf is unconnected\n\t\t\t\t\t$result = `confirmDialog -title \"Confirm\" -message \"Do you want to Auto-connect influences now\\nto include stray influenced vertices in copy?\" -button \"Yes\" -button \"No\" -defaultButton \"Yes\" -cancelButton \"No\" -dismissString \"No\"`;\n\t\t\t\t\tif ($result == \"Yes\"){\n\t\t\t\t\t\tabWlAutoConnect();\n\t\t\t\t\t\t$aConInfs = abGetSrc2DestConInfsAsStr($aSelInfs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstring $aVerts[] = abWlGetAffectedVertsByInf($srcObj, $aSelInfs);\n\t\t\t\tstring $aConVerts[] = abWlGetAffectedVertsByInf($destObj, $aConInfs);\n\t\t\t\t//bring $aConVerts back to source object by mirroring them in this case\n\t\t\t\tstring $mConVerts[]; //mirrored connected verts\n\t\t\t\tstring $vtx;\n\t\t\t\tfor ($i=0;$i<size($aConVerts);$i++){\n\t\t\t\t\t$vtx = abWlGetSymVtx($aConVerts[$i]);\n\t\t\t\t\tif ($vtx != \"\"){\n\t\t\t\t\t\t$mConVerts[size($mConVerts)] = $vtx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$selVerts = abWlStrArrayCatenateUnique($aVerts, $mConVerts);\n\t\t\t}else{\n\t\t\t\t//do copy deal here\n\t\t\t\t$selVerts = abWlGetAffectedVertsByInf($srcObj, $aSelInfs);\n\t\t\t}\n\t\t}else{\n\t\t\t$selVerts = abWlGetAffectedVertsByInf($srcObj, $aSelInfs);\n\t\t}\n\t\tselect -r $selVerts;\n\t}else{\n\t\twarning(\"You must select at least one influence from the \\\"Select Verts By Influence\\\" scroll field\");\n\t}\n}\n\n\nglobal proc string[] abWlGetAffectedVertsByInf(string $obj, string $aInfs[]){\n\t//returns affected verts \"object.vtx[2]\" -- if $includeStrays then connected infs affected verts are also selected and mirrored\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\t\n\tint $aInt[] = `polyEvaluate -v $obj`;\n\tint $totVts = $aInt[0];\n\tint $h, $i, $selectedVts[];\n\tstring $cluster = abWlGetSkinCluster($obj);\n\tstring $ret[], $aCurVtxInfs[], $vtx;\n\t\n\tif ($cluster != \"\"){\n\t\t\t\t\n\t\tfor ($i=0;$i<$totVts;$i++){\n\t\t\t\t\t\t\n\t\t\t$vtx = $obj+\".vtx[\"+$i+\"]\";\n\t\t\t$aCurVtxInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -transform $cluster $vtx`;\n\t\t\tfor ($h=0;$h<size($aInfs);$h++){\n\t\t\t\t$inf = $aInfs[$h];\n\t\t\t\tif (abWlStrGetPos($inf, $aCurVtxInfs) != -1){\n\t\t\t\t\t$ret[size($ret)] = $vtx;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\nglobal proc abWlShowSrcListItems(int $aIndsToShow[]) {\n\t//hides or shows items in \"soInfFld\" based on passed array of indices -- empty array shows all\n\t\n\tglobal string $abWlSrcInf[];\n\tstring $infName;\n\tint $i;\n\tint $ind;\n\t\n\ttextScrollList -e -ra \"soInfList\";\n\t\n\tif (size($aIndsToShow) > 0){\n\t\tfor ($i=0;$i<size($aIndsToShow);$i++){\n\t\t\t$ind = $aIndsToShow[$i];\n\t\t\tif (abWlIntGetPos($ind, $aIndsToShow) != -1){\n\t\t\t\t$infName = `match \"[a-zA-Z0-9_]+$\" $abWlSrcInf[$ind]`;\n\t\t\t\ttextScrollList -e -append $infName \"soInfList\";\n\t\t\t}\n\t\t}\n\t}else{\n\t\tfor ($i=0;$i<size($abWlSrcInf);$i++){\n\t\t\t$infName = `match \"[a-zA-Z0-9_]+$\" $abWlSrcInf[$i]`;\n\t\t\ttextScrollList -e -append $infName \"soInfList\";\n\t\t}\n\t}\n}\n\n\nglobal proc int abWlStrGetPos(string $str, string $aStr[]){\n\t//returns position of string in array, or -1 if not in array\n\t\n\tint $i;\n\tint $ret = -1;\n\tfor ($i=0;$i<size($aStr);$i++){\n\t\tif ($aStr[$i] == $str){\n\t\t\t$ret = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\nglobal proc int abWlIntGetPos(int $int, int $aInt[]){\n\t//returns position of int in array, or -1 if not in array\n\t\n\tint $i;\n\tint $ret = -1;\n\tfor ($i=0;$i<size($aInt);$i++){\n\t\tif ($aInt[$i] == $int){\n\t\t\t$ret = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\nglobal proc abWlFWSelect(){\n\t//item in Filter textScrollList has been clicked -- want to deselect component selection to avoid confusion when applying filter (it will use selected verts which might not correspond to just selected infs)\n\t\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tselectMode -object;\n\tselect -clear;\n\t//select -r $srcObj;\n}\n\n\nglobal proc string abGetSelSkinnedObject(){\n\t//returns first item in `ls -sl` array\n\t\n\tstring $selObj[];\n\tstring $ret;\n\tstring $sel[] = `ls -sl -o`;\n\tif (size($sel) == 0){\n\t\t$sel = `ls -hl`;\n\t}\n\t$selObj = `filterExpand -sm 12 $sel`; //select only polys\n\tif (size($selObj) > 0){\n\t\tif (size($selObj) > 1){\n\t\t\twarning (\"Select only one item.  \"+$selObj[0]+\" selected -- other objects in selection set ignored\");\n\t\t}\n\t\tif (abWlGetSkinCluster($selObj[0]) != \"\"){\n\t\t\t$ret = $selObj[0];\n\t\t}else{\n\t\t\twarning ($selObj[0]+\" is not a skinned mesh\");\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\nglobal proc string abWlGetSkinCluster(string $obj){\n\t//returns skincluster name on $obj or \"\" if there isn't one\n\t\n\tstring $aStr[];\n\tstring $str;\n\tstring $sc;\n\t\n\t$aStr = `listHistory $obj`;\n\tfor ($str in $aStr){\n\t\tif (`nodeType $str` == \"skinCluster\"){\n\t\t\t$sc = $str;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $sc;\n}\n\n\nglobal proc abWlSelObject(string $cField){\n\t//$cField is name of field that the name of the ui field that this object will be put into\n\t\n\t// make sure a single object is selected\n\tint $selOk = false;\n\t\n\tstring $aSel[] = `ls -sl`;\n\tstring $aHiliteSel[] = `ls -hilite`;\n\t\n\tif (size($aSel) + size($aHiliteSel) <= 1) $selOk = true;\n\t\n\tif (!$selOk){\n\t\tstring $objStr = ($cField == \"soFld\") ? \"source object.\" : \"destination object.\";\n\t\twarning (\"Multiple objects selected.  Unable to specify a \"+$objStr);\n\t\treturn;\n\t}\n\t\n\t// ok, now that that ugly bit of business is done let's continue on, shall we?\n\tstring $selObj = abGetSelSkinnedObject();\n\t\n\tif ($cField == \"soFld\"){\n\t\t\n\t\tabWlSoFldCleanup();\n\t\t\n\t\t//clear infs in selection infs window\n\t\tif (`window -exists abWlVertInfs`) abWlUpdateSelInfList(); \n\t}\n\t\n\tif ($selObj != \"\"){\n\t\ttextField -e -text $selObj $cField;\n\t\tabWlPopulateInfFields($cField, 0, false);\n\t}else{\n\t\ttextField -e -text \"\" $cField;\n\t\tabWlPopulateInfFields($cField, 1, false);\n\t}\n\t\n\tabWlRefreshSoDoBns();\n\t\n}\n\n\nglobal proc abWlSoFldCleanup(){\n\t// cleans up some globals when an object is selected in the soFld\n\t\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlOriginVts[];\n\tglobal string $abWlPrefs[];\n\t\n\tclear($abWlSymTable);\n\tclear($abWlOriginVts);\n\t$abWlPrefs[13] = \"\";\n\t\n}\n\n\nglobal proc abWlRefreshSoDoBns(){\n\t// enables buttons if both so and do fields are filled, otherwise disables them\n\t\n\tint $enable = (`textField -q -text soFld` != \"\" && `textField -q -text doFld` != \"\") ? true : false;\n\tabWlEnableButtons($enable);\n\tabWlVisualizeConnections();\n\t\n}\n\n\nglobal proc abWlEnableButtons(int $enable){\n\t//if $enable, buttons that require src and dest obj fields to be filled are enabled\n\t\n\tglobal string $abWlPrefs[];\n\tstring $importFileName = $abWlPrefs[13];\n\t\n\tif ($enable){\n\t\t//enable options that require both objects selected\n\t\t\n\t\tif ($importFileName == \"\"){\n\t\t\t// objects in both so and do fields\n\t\t\tabWlPopulateCopyList(1);\n\t\t\tbutton -e -en true sivBn;\n\t\t\tbutton -e -en true siBn;\n\t\t\tbutton -e -en true acBn;\n\t\t\tbutton -e -en true ccBn;\n\t\t\tbutton -e -en true actionBn;\n\t\t\tbutton -e -en true ssiBn;\n\t\t}else{\n\t\t\t// if this is an import (file name in soFld)\n\t\t\tabWlPopulateCopyList(0);\n\t\t\tbutton -e -en false sivBn;\n\t\t\tbutton -e -en false siBn;\n\t\t\tbutton -e -en true acBn;\n\t\t\tbutton -e -en true ccBn;\n\t\t\tbutton -e -en true actionBn;\n\t\t\tbutton -e -en false ssiBn;\n\t\t\t\n\t\t}\n\t\t\n\t\tif (`textField -q -text soFld` == `textField -q -text doFld`){\n\t\t\tcheckBox -e -en true isChkBx;\n\t\t\tbutton -e -en true abWlMoveWtsBn;\n\t\t\t\n\t\t\t// enable mirror options, disable copy\n\t\t\tabWlDisablePrefs(0, 1);\n\t\t\tabWlDisablePrefs(1, 0);\n\t\t\t\n\t\t\ttextField -e -en false fndFld;\n\t\t\ttextField -e -en false rplcFld;\n\t\t\ttext -e -en false fndTxt;\n\t\t\ttext -e -en false rplcTxt;\n\t\t\ttextField -e -en false fnd2Fld;\n\t\t\ttextField -e -en false rplc2Fld;\n\t\t\ttext -e -en false fnd2Txt;\n\t\t\ttext -e -en false rplc2Txt;\n\t\t\ttextField -e -en false fnd3Fld;\n\t\t\ttextField -e -en false rplc3Fld;\n\t\t\ttext -e -en false fnd3Txt;\n\t\t\ttext -e -en false rplc3Txt;\n\t\t\t\n\t\t}else{\n\t\t\tcheckBox -e -en false isChkBx;\n\t\t\tbutton -e -en false abWlMoveWtsBn;\n\t\t\t\n\t\t\t// enable copy options, disable mirror\n\t\t\tabWlDisablePrefs(0, 0);\n\t\t\tabWlDisablePrefs(1, 1);\n\t\t\t\n\t\t\ttextField -e -en true fndFld;\n\t\t\ttextField -e -en true rplcFld;\n\t\t\ttext -e -en true fndTxt;\n\t\t\ttext -e -en true rplcTxt;\n\t\t\ttextField -e -en true fnd2Fld;\n\t\t\ttextField -e -en true rplc2Fld;\n\t\t\ttext -e -en true fnd2Txt;\n\t\t\ttext -e -en true rplc2Txt;\n\t\t\ttextField -e -en true fnd3Fld;\n\t\t\ttextField -e -en true rplc3Fld;\n\t\t\ttext -e -en true fnd3Txt;\n\t\t\ttext -e -en true rplc3Txt;\n\t\t}\n\t}else{\n\t\tabWlPopulateCopyList(0);\n\t\tbutton -e -en false sivBn;\n\t\tbutton -e -en false siBn;\n\t\tbutton -e -en false acBn;\n\t\tbutton -e -en false ccBn;\n\t\tbutton -e -en false actionBn;\n\t\tbutton -e -en false ssiBn;\n\t\tbutton -e -en false abWlMoveWtsBn;\n\t\tcheckBox -e -en false isChkBx;\n\t\ttextField -e -en false fndFld;\n\t\ttextField -e -en false rplcFld;\n\t\ttext -e -en false fndTxt;\n\t\ttext -e -en false rplcTxt;\n\t\ttextField -e -en false fnd2Fld;\n\t\ttextField -e -en false rplc2Fld;\n\t\ttext -e -en false fnd2Txt;\n\t\ttext -e -en false rplc2Txt;\n\t\ttextField -e -en false fnd3Fld;\n\t\ttextField -e -en false rplc3Fld;\n\t\ttext -e -en false fnd3Txt;\n\t\ttext -e -en false rplc3Txt;\n\t\t\n\t\t// enable both mirror and copy options\n\t\tabWlDisablePrefs(0, 1);\n\t\tabWlDisablePrefs(1, 1);\n\t}\n}\n\n\nglobal proc abWlPopulateCopyList(int $populate){\n\t//if !$populate then empty the field (I know, it's not consistent with abWlPopulateInfFields)\n\tglobal string $abWlPrefs[];\n\t\n\tstring $importFileName = $abWlPrefs[13];\n\t\n\tif ($populate && $importFileName == \"\"){\n\t\tstring $sc = abWlGetSkinCluster(`textField -q -text soFld`);\n\t\tstring $aInfs[] = `skinCluster -q -influence $sc`;\n\t\tstring $aInfCopy[], $inf;\n\t\t\n\t\ttextScrollList -e -ra fiList;\n\t\tfor ($inf in $aInfs){\n\t\t\t$infLeaf = `match \"[a-zA-Z0-9_]+$\" $inf`;\n\t\t\t$aInfCopy[size($aInfCopy)] = $infLeaf;\n\t\t}\n\t\t\n\t\t// sort the list\n\t\t$aInfCopy = sort($aInfCopy);\n\t\t\n\t\t// populate the text scroll list\n\t\tfor ($inf in $aInfCopy) textScrollList -e -append $inf fiList;\n\t\t\n\t}else{\n\t\ttextScrollList -e -ra fiList;\n\t}\n}\n\n\nglobal proc abWlPopulateInfFields(string $cField, int $dePopulate, int $keepConnections){\n\t//bool $dePopulate true = empty field; $keepConnections true = infconnections not cleared (only called from main ui proc to recapture existing connections)\n\t\n\tglobal int $abWlSelList[];\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal string $abWlPrefs[];\n\tglobal int $abWlInfConnections[]; //array of paired indices with srcIndex always the first of the two (eg. [srcTextScrollList.ind2, srcTextScrollList.ind6])\n\tstring $aInfList[]; //used as reference to get values into correct global array\n\tstring $ctextListFld;\n\tint $selListInd;\n\t\n\tstring $importFileName = $abWlPrefs[13];\n\t\n\tif (!$keepConnections) clear($abWlInfConnections);\n\tif ($cField == \"soFld\"){\n\t\t$ctextListFld = \"soInfList\";\n\t\t$selListInd = 0;\n\t\tclear($abWlSrcInf);\n\t}else{\n\t\t$ctextListFld = \"doInfList\";\n\t\t$selListInd = 1;\n\t\tclear($abWlDestInf);\n\t}\n\t\n\ttextScrollList -e -removeAll $ctextListFld;\n\t\n\tif (!$dePopulate){\n\t\t\n\t\tstring $inf, $infLeaf, $aInfs[];\n\t\t\n\t\tif ($importFileName == \"\" || $cField == \"doFld\"){\n\t\t\t\n\t\t\t// soFld has an object in it -- get infs\n\t\t\tstring $obj = `textField -q -text $cField`;\n\t\t\tstring $sc = abWlGetSkinCluster($obj);\n\t\t\t$aInfs = `skinCluster -q -influence $sc`;\n\t\t\t\n\t\t}else{\n\t\t\t\n\t\t\t// soFld contains an import filePath -- get infs\n\t\t\t$aInfs = abWlGetImportInfs($importFileName);\n\t\t\t\n\t\t}\n\t\t\n\t\t// sort the list\n\t\t$aInfList = sort($aInfs);\n\t\t\n\t\tfor ($inf in $aInfList){\n\t\t\t$infLeaf = `match \"[a-zA-Z0-9_]+$\" $inf`;\n\t\t\ttextScrollList -e -append $infLeaf $ctextListFld;\n\t\t}\n\t\t\n\t\t//unset last selected\n\t\t$abWlSelList[$selListInd] = 0;\n\t\t\n\t\tif ($cField == \"soFld\"){\n\t\t\t$abWlSrcInf = $aInfList;\n\t\t}else{\n\t\t\t$abWlDestInf = $aInfList;\n\t\t}\n\t}\n\t\n}\n\n\nglobal proc int abWlSrcInd2ListPos(int $srcInd){\n\t//send a src array index and this returns its position in textScrollList (or 0 if not in scrollList)\n\t\n\tint $ret = 0;\n\tint $int;\n\t$ret = $srcInd + 1;\n\treturn $ret;\n}\n\n\nglobal proc int abWlListPos2SrcInd(int $slInd){\n\t//send a textScrollList position and this returns its src array index (-1 on not in array)\n\t\n\tint $ret = -1;\n\tint $int;\n\tif ($slInd > 0){\n\t\t$ret = $slInd - 1;\n\t}\n\treturn $ret;\n}\n\n\nglobal proc abWlSelectInfs(string $aInfs[]){\n\t//take any infs in selection and select them in the filter list\n\t\n\tglobal string $abWlSrcInf[];\n\t\n\tstring $myIntersector = `stringArrayIntersector`;\n\tstringArrayIntersector -edit -intersect $aInfs $myIntersector;\n\tstringArrayIntersector -edit -intersect $abWlSrcInf $myIntersector;\n\tstring $infsToSelect[] = `stringArrayIntersector -query $myIntersector`;\n\tdeleteUI $myIntersector;\n\t\n\tint $i, $j, $ind;\n\tstring $selStr;\n\tfor ($i=0;$i<size($abWlSrcInf);$i++){\n\t\t$ind = abWlStrGetPos($abWlSrcInf[$i], $infsToSelect);\n\t\tif ($ind != -1){\n\t\t\t$selStr += \" -sii \"+($i+1);\n\t\t}else{\n\t\t\t$selStr += \" -dii \"+($i+1);\n\t\t}\n\t}\n\t\n\teval(\"textScrollList -e\"+$selStr+\" fiList\");\n}\n\n\nglobal proc abWlScrollListSelect(string $cScrollList){\n\t//called when an item in the scroll list is selected\n\t\n\tglobal int $abWlSelList[]; //[0] is index of last soInfList clicked and [1] is doInfList\n\t\t\n\t//populate array if it doesn't exist\n\tif (size($abWlSelList) == 0){\n\t\t$abWlSelList = {0, 0};\n\t}\n\tint $cSelListPos = ($cScrollList == \"soInfList\") ? 0 : 1;\n\t\t\n\tint $scrollListsSelInd[]; //[0] is srcFld selected index, [1] is destFld -si, and [2] is srcFld position with no filter (ie position w/ regard to all src infs)\n\tint $aInt[] = `textScrollList -q -selectIndexedItem \"soInfList\"`;\n\t\n\t$scrollListsSelInd[0] = $aInt[0]; //textScrollList index of item currently selected in soInfList (0 if nothing selected)\n\t$scrollListsSelInd[2] = abWlListPos2SrcInd($scrollListsSelInd[0]); //this index is the position of this influence in $abWlSrcInfs (-1 if nothing is selected)\n\t$aInt = `textScrollList -q -sii \"doInfList\"`;\n\t$scrollListsSelInd[1] = $aInt[0]; //textScrollList index of item currently selected in doInfList (0 if nothing selected)\n\t$scrollListsSelInd[3] = $scrollListsSelInd[1]-1; //this index is the position of this influence in $abWlDestInfs (-1 if nothing is selected)\n\tint $cSelItem = $scrollListsSelInd[$cSelListPos];\n\tint $otherSelItem = $scrollListsSelInd[1-$cSelListPos];\n\t\n\tif ($cSelItem == $abWlSelList[$cSelListPos]){\n\t\t//clicking an already selected item -- deselect\n\t\tif ($otherSelItem != 0 && $cScrollList == \"doInfList\"){\n\t\t\t//this index has an existing connection -- since it's in the destination pane we can disconnect it\n\t\t\tabWlConnectInfs($scrollListsSelInd[2], $scrollListsSelInd[3], 1);\n\t\t}\n\t\ttextScrollList -e -deselectIndexedItem $cSelItem $cScrollList;\n\t\t$abWlSelList[$cSelListPos] = 0;\n\t\tif ($cScrollList == \"soInfList\"){\n\t\t\t//need to deselect dest pane item too\n\t\t\ttextScrollList -e -deselectAll \"doInfList\";\n\t\t}\n\t}else{\n\t\tif ($otherSelItem != 0 && $cScrollList == \"doInfList\"){\n\t\t\t//make a connection -- can only make and break connections in the destination scroll window\n\t\t\tabWlConnectInfs($scrollListsSelInd[2], $scrollListsSelInd[3], 0);\n\t\t}else if ($cScrollList == \"soInfList\"){\n\t\t\t//highlight connected item since clicking in src pane\n\t\t\ttextScrollList -e -deselectAll \"doInfList\";\n\t\t\t$abWlSelList[1-$cSelListPos] = 0;\n\t\t\tint $doSelInd = abWlGetConnectedInf($scrollListsSelInd[2], -1);\n\t\t\tif ($doSelInd != -1){\n\t\t\t\ttextScrollList -e -sii ($doSelInd+1) \"doInfList\";\n\t\t\t\t$abWlSelList[1] = $doSelInd+1;\n\t\t\t}\n\t\t}\n\t\t$abWlSelList[$cSelListPos] = $scrollListsSelInd[$cSelListPos];\n\t}\n}\n\n\nglobal proc abWlVisualizeConnections(){\n\t//modifies contents of soInfList and \"doInfList\" to visualize connections\n\t\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal string $abWlPrefs[];\n\tstring $alphabet[] = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\tfloat $fAlphabetSize = size($alphabet);\n\tint $aInt[] = `textScrollList -q -sii \"soInfList\"`;\n\tint $srcSelInd = $aInt[0];\n\t$aInt = `textScrollList -q -sii \"doInfList\"`;\n\tint $destSelInd = $aInt[0];\n\tstring $conNamedSrcInf[]; //list of src infs cleaned up and showing connections -- \"elbowJNT\" turns to \"elbowJNT=>(a)\"\n\tstring $infName, $conNamedDestInf[], $id;\n\tint $i, $k, $tInt;\n\tint $alphaNumId = $abWlPrefs[11]; //id connections as a1, b1, c1, a2, b2, c2 instead of a, b, c, aa, bb, cc\n\t\n\t//first fill $conNamedSrc/DestInf arrays with connected items\n\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t//make appropriate id (form a, b, c, aa, bb, cc); a1, b1, c1, a2, b2, c2, if $alphaNumId == true\n\t\t$id = $alphabet[$i/2 % size($alphabet)];\n\t\t$tInt = floor(($i/2)/$fAlphabetSize); //double (or more) up letters if there are more infs than letters\n\t\tif ($alphaNumId){\n\t\t\tif ($tInt > 0) $id = $id + $tInt;\n\t\t\t//$id += ($tInt > 0) ? $tInt : \"\"; //this line seems to have been the fatal bug culprit in v7\n\t\t}else{\n\t\t\t$k = 0;\n\t\t\twhile ($k < $tInt){\n\t\t\t\t$id += $alphabet[$i/2 % size($alphabet)];\n\t\t\t\t$k++;\n\t\t\t}\n\t\t}\n\t\t$infName = $abWlSrcInf[$abWlInfConnections[$i]];\n\t\t$conNamedSrcInf[$abWlInfConnections[$i]] = `match \"[a-zA-Z0-9_]+$\" $infName`+\" => \"+$id;\n\t\t$infName = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t\t$conNamedDestInf[$abWlInfConnections[$i+1]] = $id+\" <= \"+`match \"[a-zA-Z0-9_]+$\" $infName`;\n\t}\n\t//now for the rest -- update fields with new names\n\tstring $inf;\n\tstring $aSlInfNames[] = `textScrollList -q -allItems \"soInfList\"`; //list of all current scrolllist influence names\n\t\n\tfor ($i=0;$i<size($abWlSrcInf);$i++){\n\t\tif ($conNamedSrcInf[$i] == \"\"){\n\t\t\t$infName = $abWlSrcInf[$i];\n\t\t\t$infName = `match \"[a-zA-Z0-9_]+$\" $infName`;\n\t\t}else{\n\t\t\t$infName = $conNamedSrcInf[$i];\n\t\t}\n\t\tif ($infName != $aSlInfNames[$i]){\n\t\t\ttextScrollList -e -removeIndexedItem ($i+1) \"soInfList\";\n\t\t\ttextScrollList -e -appendPosition ($i+1) $infName \"soInfList\";\n\t\t}\n\t}\n\t\n\t$aSlInfNames = `textScrollList -q -allItems \"doInfList\"`; //list of all current scrolllist influence names\n\tfor ($i=0;$i<size($abWlDestInf);$i++){\n\t\tif ($conNamedDestInf[$i] == \"\"){\n\t\t\t$infName = $abWlDestInf[$i];\n\t\t\t$infName = `match \"[a-zA-Z0-9_]+$\" $infName`;\n\t\t}else{\n\t\t\t$infName = $conNamedDestInf[$i];\n\t\t}\n\t\tif ($infName != $aSlInfNames[$i]){\n\t\t\ttextScrollList -e -removeIndexedItem ($i+1) \"doInfList\";\n\t\t\ttextScrollList -e -appendPosition ($i+1) $infName \"doInfList\";\n\t\t}\n\t}\n\tif ($srcSelInd != 0){\n\t\ttextScrollList -e -deselectAll \"soInfList\";\n\t\ttextScrollList -e -sii $srcSelInd \"soInfList\";\n\t}\n\tif ($destSelInd != 0){\n\t\ttextScrollList -e -deselectAll \"doInfList\";\n\t\ttextScrollList -e -sii $destSelInd \"doInfList\";\n\t}\n}\n\n\nglobal proc int abWlGetConnectedInf(int $srcIndex, int $destIndex) {\n\t//looks up connected inf in $abWlInfConnections for non negative argument -- if no connection exists returns -1;\n\t\n\tglobal int $abWlInfConnections[];\n\tint $ret = -1;\n\t\n\tif ($srcIndex != -1 || $destIndex != -1 && !($srcIndex != -1 && $destIndex != -1)){\n\t\tint $i;\n\t\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t\tif($abWlInfConnections[$i] == $srcIndex || $abWlInfConnections[$i+1] == $destIndex){\n\t\t\t\t$ret = ($srcIndex != -1) ? $abWlInfConnections[$i+1] : $abWlInfConnections[$i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\nglobal proc int abWlConnectInfs(int $srcInd, int $destInd, int $disconnectInf) {\n\t//adds items to $abWlInfConnections creating a connection between them and cleaning up existing connections -- $disconnectInf is a bool => if true connections are cut, use -1 for an empty index -- returns bool on success/failure\n\t\n\tglobal int $abWlInfConnections[];\n\t\n\t//clear array of both indices (and partners) -- each ind can only be connected to one other ind\n\tint $i;\n\tint $ind1;\n\tint $ind2;\n\tint $newInfCon[];\n\t\n\tint $ret = true;\n\tint $j;\n\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t$ind1 = $abWlInfConnections[$i];\n\t\t$ind2 = $abWlInfConnections[$i+1];\n\t\tif ($ind1 == $srcInd || $ind2 == $destInd){\n\t\t\t//do nothing.  don't want to copy this to the new array\n\t\t}else{\n\t\t\t$newInfCon[size($newInfCon)] = $ind1;\n\t\t\t$newInfCon[size($newInfCon)] = $ind2;\n\t\t}\n\t}\n\tclear($abWlInfConnections);\n\t$abWlInfConnections = $newInfCon;\n\t\n\tif (!$disconnectInf){\n\t\t//now add the passed indices\n\t\t$abWlInfConnections[size($abWlInfConnections)] = $srcInd;\n\t\t$abWlInfConnections[size($abWlInfConnections)] = $destInd;\n\t}\n\tabWlVisualizeConnections();\n\treturn $ret;\n}\n\n\nglobal proc abWeightLifter(){\n\t\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlPrefs[];\n\tstring $srcObj, $destObj;\n\tint $utInt;\n\t\n\tif (size($abWlPrefs) == 0){\n\t\t$abWlPrefs = {\"lf_\", \"rt_\", \"1\", \"1\", \"1\", \"0\", \"0.001\", \"0.01\", \"1\", \"0\", \"0\", \"1\", \"1\", \"\", \"\", \"\",\"\",\"\",\"\",\"\"}; //(default left naming prefix, def right naming prefix, default mirror axis (\"1\", \"2\", \"3\"), mirror pos to neg axis, default copy type (\"1\", \"2\", \"3\"), normalize weights, mirror tolerance, copy tolerance, show warning dialogue, include destination strays in vert select, Cull Non-Matching Weights On Copy, Display Connections Alphanumerically (\"a1\" vs \"aa\"), Auto Weight Origin Vertices, Active Imported File, Find Str, Replace Str, Find Str 2, Replace Str 2, Find Str 3, Replace Str 3\n\t}\n\t\n\t//make UI\n\tif (`window -exists abWlWin`){\n\t\tdeleteUI -window abWlWin;\n\t}\n\t//windowPref -remove abWlWin;\n\twindow -t \"abWeightLifter\" -width 300 -height 582 -menuBar true abWlWin;\n\t\n\tmenu -label \"Options\" -postMenuCommand \"global string $abWlSymTable[];string $srcObj = `textField -q -text \\\"soFld\\\"`;string $destObj = `textField -q -text \\\"doFld\\\"`;menuItem -e -en (size($abWlSymTable)!=0) abWlSelSTVtsMnIt;menuItem -e -en (size($abWlSymTable)!=0 && $srcObj != \\\"\\\" && $srcObj == $destObj) abWlSelOriginVtsMnIt;menuItem -e -en (size($abWlSymTable)!=0) abWlClrSTMnIt;\";\n \t\tmenuItem -label \"Options\" -c \"abWlShowPrefs()\";\n\t\tmenuItem -divider true;\n\t\tmenuItem -label \"Select SymTable Vertices\" -c \"global string $abWlSymTable[];select -r $abWlSymTable;\" abWlSelSTVtsMnIt;\n\t\tmenuItem -label \"Select Centerline Vertices\" -c \"global string $abWlOriginVts[];select -r $abWlOriginVts;\" abWlSelOriginVtsMnIt;\n\t\tmenuItem -label \"Clear SymTable\" -c \"global string $abWlSymTable[];global string $abWlOriginVts[];clear($abWlSymTable);clear($abWlOriginVts);\" abWlClrSTMnIt;\n \t\tmenuItem -divider true;\n \t\tmenuItem -label \"Quit\" -c \"abWlClose()\";\n\t\n\tmenu -label \"Tools\" -postMenuCommand \"string $srcObj = `textField -q -text \\\"soFld\\\"`;string $destObj = `textField -q -text \\\"doFld\\\"`; menuItem -e -en ($srcObj != \\\"\\\" && $destObj != \\\"\\\") abWlCheckSymMnIt; menuItem -e -en ($srcObj != \\\"\\\" && $destObj != \\\"\\\" && $srcObj == $destObj) abWlGetSymFrmSelMnIt;\";\n\t\tmenuItem -label \"Check Symmetry\" -c \"abWlCheckSym()\" abWlCheckSymMnIt;\n\t\tmenuItem -label \"Get Symmetry From Selected\" -c \"abWlBuildSymTableFromSelObj()\" abWlGetSymFrmSelMnIt;\n\t\tmenuItem -divider true;\n\t\tmenuItem -label \"Import Weights\" -c \"abWlShowImportWeightDialog()\";\n\t\tmenuItem -label \"Export Weights From Selected\" -c \"abWlShowExportWeightDialog()\";\n\t\tmenuItem -divider true;\n \t\tmenuItem -label \"Bind New Mesh To Skinned Mesh Infs\" -c \"abWlReplaceSkin()\";\n\t\n \tmenu -label \"Help\" -helpMenu true;\n \t\tmenuItem -label \"Help\" -c \"abWlShowHelp()\";\n \t\tmenuItem -label \"Visit Website\" -c \"showHelp -a \\\"http://www.supercrumbly.com/3d.php?sid=124\\\"\";\n \t\n\tformLayout -numberOfDivisions 100 abWlForm;\n\t\t\n\tbutton -label \"Source Object\" -command \"abWlSelObject(\\\"soFld\\\")\" soBn; //source object button\n\ttextField -editable false soFld; //source object field\n\tbutton -label \"Destination Object\" -command \"abWlSelObject(\\\"doFld\\\")\" doBn;\n\ttextField -editable false doFld;\n\t\n\tseparator sep1;\n\ttext -l \"Select Verts By Influence:\" infTxt;\n\ttextScrollList -numberOfRows 6 -allowMultiSelection true -selectCommand \"abWlFWSelect()\" -dcc \"abWlFWSelVerts()\" fiList; //source object influence list\n\tbutton -l \"Select Influenced Verts\" -en false -c \"abWlFWSelVerts()\" sivBn;\n\t$utInt = $abWlPrefs[9];\n\tcheckBox -l \"Include Dest Strays\" -en false -value $utInt -changeCommand \"$abWlPrefs[9] = `checkBox -q -value isChkBx`\" isChkBx; //include strays -- only works for mirror operations at the moment\n\t\n\tbutton -l \"Select Influences\" -en false -c \"string $aSel[] = `ls -sl -o -type joint -type transform`; if (size($aSel) == 0){string $tSel[]=`textScrollList -q -si fiList`;int $i;for ($i=0;$i<size($tSel);$i++){$tSel[$i] =`match \\\"[a-zA-Z0-9_|:]*\\\" $tSel[$i]`;}select -r $tSel;}else{abWlSelectInfs($aSel);}\" siBn; //select influences Button\n\t\n\tbutton -l \"Show Selection Influences\" -en false -c \"abWlShowInfluences()\" ssiBn; //show selection influences Button\n\t\n\tseparator sep2;\n\ttext -l \"source:\" srcTxt;\n\ttext -l \"destination:\" destTxt;\n\ttextScrollList -numberOfRows 15 -allowMultiSelection false -selectCommand \"abWlScrollListSelect(\\\"soInfList\\\")\" soInfList; //source object influence list\n\ttextScrollList -numberOfRows 15 -allowMultiSelection false -selectCommand \"abWlScrollListSelect(\\\"doInfList\\\")\" doInfList; //source object influence list\n\t\n\tseparator sep3;\n\tbutton -l \"Auto Connect Influences\" -en false -c \"abWlAutoConnect()\" acBn; //autoconnect button\n\t\n\ttext -l \"Search:\" -en false fndTxt;\n\ttext -l \"Replace:\" -en false rplcTxt;\n\ttextField -text $abWlPrefs[14] -en false -changeCommand \"$abWlPrefs[14] = `textField -q -text fndFld`\" -editable true fndFld; //find field\n\ttextField -text $abWlPrefs[15] -en false -changeCommand \"$abWlPrefs[15] = `textField -q -text rplcFld`\" -editable true rplcFld; //replace field\n\t\n\ttext -l \"Search:\" -en false fnd2Txt;\n\ttext -l \"Replace:\" -en false rplc2Txt;\n\ttextField -text $abWlPrefs[16] -en false -changeCommand \"$abWlPrefs[16] = `textField -q -text fnd2Fld`\" -editable true fnd2Fld; //find field\n\ttextField -text $abWlPrefs[17] -en false -changeCommand \"$abWlPrefs[17] = `textField -q -text rplc2Fld`\" -editable true rplc2Fld; //replace field\n\t\n\ttext -l \"Search:\" -en false fnd3Txt;\n\ttext -l \"Replace:\" -en false rplc3Txt;\n\ttextField -text $abWlPrefs[18] -en false -changeCommand \"$abWlPrefs[18] = `textField -q -text fnd3Fld`\" -editable true fnd3Fld; //find field\n\ttextField -text $abWlPrefs[19] -en false -changeCommand \"$abWlPrefs[19] = `textField -q -text rplc3Fld`\" -editable true rplc3Fld; //replace field\n\t\n\tbutton -l \"Clear All Connections\" -en false -c \"clear($abWlInfConnections);abWlVisualizeConnections();\" ccBn; //autoconnect button\n\tseparator sep4;\n\t\t\n\tbutton -height 25 -label \"Copy Weights\" -en false -command \"abWlDoIt()\" actionBn;\n\tbutton -height 25 -label \"Move Weights\" -en false -command \"abWlMoveWeights()\" abWlMoveWtsBn;\n\tbutton -height 25 -label \"Close\" -command \"abWlClose()\" closeBn;\n\t\t\n\tint $lmargin = 3;\n\tint $rmargin = 3;\n\tint $labelWidth = 15;\n\t\n\tformLayout -e\n\t\n\t-attachForm soFld \"top\" 8\n\t\t-af soFld \"left\" $lmargin\n\t\t-af soFld \"right\" 110\n\t\t\n\t\t-ac soBn \"left\" 3 soFld\n\t\t-af soBn \"top\" 8\n\t\t-af soBn \"right\" $rmargin\n\t\t\n\t\t-ac doFld \"top\" 5 soBn\n\t\t-af doFld \"left\" $lmargin\n\t\t-af doFld \"right\" 110\n\t\t\n\t\t-ac doBn \"left\" 3 doFld\n\t\t-ac doBn \"top\" 5 soBn\n\t\t-af doBn \"right\" $rmargin\n\t\t\n\t\t-ac sep1 \"top\" 7 doFld\n\t\t-af sep1 \"left\" $lmargin\n\t\t-af sep1 \"right\" $rmargin\n\t\t\n\t\t-ac infTxt \"top\" 3 sep1\n\t\t-af infTxt \"left\" $lmargin\n\t\t-af infTxt \"right\" $rmargin\n\t\t\n\t\t-ac fiList \"top\" 3 infTxt\n\t\t-af fiList \"left\" $lmargin\n\t\t-ap fiList \"right\" $rmargin 50\n\t\t\n\t\t-ac sivBn \"top\" 3 infTxt\n\t\t-ac sivBn \"left\" 6 fiList\n\t\t-af sivBn \"right\" $rmargin\n\t\t\n\t\t-ac isChkBx \"top\" 4 sivBn\n\t\t-ac isChkBx \"left\" 6 fiList\n\t\t-af isChkBx \"right\" $rmargin\n\t\t\n\t\t-ac ssiBn \"top\" 4 isChkBx\n\t\t-ac ssiBn \"left\" 6 fiList\n\t\t-af ssiBn \"right\" $rmargin\n\t\t\n\t\t-ac siBn \"top\" 7 fiList\n\t\t-af siBn \"left\" $lmargin\n\t\t-af siBn \"right\" $rmargin\n\t\t\n\t\t-ac sep2 \"top\" 7 siBn\n\t\t-af sep2 \"left\" $lmargin\n\t\t-af sep2 \"right\" $rmargin\n\t\t\n\t\t-ac srcTxt \"top\" 3 sep2\n\t\t-af srcTxt \"left\" $lmargin\n\t\t-ap srcTxt \"right\" $rmargin 50\n\t\t\n\t\t-ac destTxt \"top\" 3 sep2\n\t\t-af destTxt \"right\" $rmargin\n\t\t-ac destTxt \"left\" 5 srcTxt\n\t\t\n\t\t-af actionBn \"left\" $lmargin\n\t\t-af actionBn \"bottom\" 5\n\t\t-ap actionBn \"right\" $rmargin 35\n\t\t\n\t\t-ac abWlMoveWtsBn \"left\" $lmargin actionBn\n\t\t-af abWlMoveWtsBn \"bottom\" 5\n\t\t-ap abWlMoveWtsBn \"right\" $rmargin 70\n\t\t\n\t\t-ac closeBn \"left\" 3 abWlMoveWtsBn\n\t\t-af closeBn \"bottom\" 5\n\t\t-af closeBn \"right\" $rmargin\n\t\t\n\t\t-ac sep4 \"bottom\" 5 actionBn\n\t\t-af sep4 \"left\" $lmargin\n\t\t-af sep4 \"right\" $rmargin\n\t\t\n\t\t-ac acBn \"bottom\" 7 sep4\n\t\t-af acBn \"right\" 180\n\t\t-af acBn \"left\" $lmargin \n\t\t\n\t\t-ac ccBn \"bottom\" 7 sep4\n\t\t-af ccBn \"right\" $rmargin\n\t\t-ac ccBn \"left\" $lmargin acBn\n\t\t\n\t\t-ac fnd3Txt \"bottom\" 7 acBn\n\t\t-af fnd3Txt \"left\" $labelWidth\n\t\t\n\t\t-ac fnd3Fld \"bottom\" 5 acBn\n\t\t-ac fnd3Fld \"left\" $lmargin fnd3Txt\n\t\t-ap fnd3Fld \"right\" $rmargin 50\n\t\t\n\t\t-ac rplc3Txt \"bottom\" 7 acBn\n\t\t-ac rplc3Txt \"left\" $labelWidth fnd3Fld\n\t\t\n\t\t-ac rplc3Fld \"bottom\" 5 acBn\n\t\t-ac rplc3Fld \"left\" $lmargin rplc3Txt\n\t\t-af rplc3Fld \"right\" $rmargin\n\t\t\n\t\t-ac fnd2Txt \"bottom\" 6 fnd3Fld\n\t\t-af fnd2Txt \"left\" $labelWidth\n\t\t\n\t\t-ac fnd2Fld \"bottom\" 4 fnd3Fld\n\t\t-ac fnd2Fld \"left\" $lmargin fnd2Txt\n\t\t-ap fnd2Fld \"right\" $rmargin 50\n\t\t\n\t\t-ac rplc2Txt \"bottom\" 6 fnd3Fld\n\t\t-ac rplc2Txt \"left\" $labelWidth fnd2Fld\n\t\t\n\t\t-ac rplc2Fld \"bottom\" 4 fnd3Fld\n\t\t-ac rplc2Fld \"left\" $lmargin rplc2Txt\n\t\t-af rplc2Fld \"right\" $rmargin\n\t\t\n\t\t-ac fndTxt \"bottom\" 6 fnd2Fld\n\t\t-af fndTxt \"left\" $labelWidth\n\t\t\n\t\t-ac fndFld \"bottom\" 4 fnd2Fld\n\t\t-ac fndFld \"left\" $lmargin fndTxt\n\t\t-ap fndFld \"right\" $rmargin 50\n\t\t\n\t\t-ac rplcTxt \"bottom\" 6 fnd2Fld\n\t\t-ac rplcTxt \"left\" $labelWidth fndFld\n\t\t\n\t\t-ac rplcFld \"bottom\" 4 fnd2Fld\n\t\t-ac rplcFld \"left\" $lmargin rplcTxt\n\t\t-af rplcFld \"right\" $rmargin\n\t\t\n\t\t-ac sep3 \"bottom\" 5 fndFld\n\t\t-af sep3 \"left\" $lmargin\n\t\t-af sep3 \"right\" $rmargin\n\t\t\n\t\t-ac soInfList \"top\" 3 srcTxt\n\t\t-ac soInfList \"bottom\" 7 sep3\n\t\t-af soInfList \"left\" $lmargin\n\t\t-ap soInfList \"right\" $rmargin 50\n\t\t\n\t\t-ac doInfList \"top\" 3 destTxt\n\t\t-ac doInfList \"bottom\" 7 sep3\n\t\t-af doInfList \"right\" $rmargin\n\t\t-ac doInfList \"left\" 5 soInfList\n\t\t\n\t\tabWlForm\n\t\t;\n\t\t\n\t\tif (size($abWlSymTable) > 0){\n\t\t\t//use existing data\n\t\t\t//make sure it still exists\n\t\t\t$srcObj = match(\"^[a-zA-Z0-9_]+\", $abWlSymTable[0]);\n\t\t\t$destObj = match(\"^[a-zA-Z0-9_]+\", $abWlSymTable[1]);\n\t\t\tif (`objExists $srcObj` && abWlGetSkinCluster($srcObj) != \"\" && `objExists $destObj` && abWlGetSkinCluster($destObj) != \"\"){\n\t\t\t\ttextField -e -text $srcObj soFld; //source object field\n\t\t\t\ttextField -e -text $destObj doFld; //source object field\n\t\t\t\tabWlPopulateInfFields(\"soFld\", 0, true);\n\t\t\t\tabWlPopulateInfFields(\"doFld\", 0, true);\n\t\t\t\tabWlEnableButtons(true);\n\t\t\t\tabWlVisualizeConnections();\n\t\t\t}else{\n\t\t\t\tabWlClearGlobals();\n\t\t\t}\n\t\t}else{\n\t\t\tabWlClearGlobals();\n\t\t}\n\t\t\n\tshowWindow abWlWin;\n\t\n\tscriptJob -uiDeleted \"abWlWin\" \"if (`window -exists abWlPrefsWin`) deleteUI -window abWlPrefsWin;\";\n}\n\n\nglobal proc abWlShowPrefs(){\n\t//show copy options\n\tglobal string $abWlPrefs[];\n\tglobal string $abWlSymTable[];\n\tint $winW = 196;\n\tint $winH = 540;\n\tint $utInt;\n\t\n\tif (`window -exists abWlPrefsWin`){\n\t\tdeleteUI -window abWlPrefsWin;\n\t}\n\tif (`windowPref -exists abWlPrefsWin`) windowPref -remove abWlPrefsWin;\n\t\n\tint $mainLfEdge = `window -q -leftEdge abWlWin`;\n\tint $mainTpEdge = `window -q -topEdge abWlWin`;\n\twindow -t \"Options\" -width $winW -height $winH -leftEdge ($mainLfEdge-$winW) -topEdge $mainTpEdge -minimizeButton false -maximizeButton false abWlPrefsWin;\n\t\n\tformLayout -numberOfDivisions 100 abPrefsForm;\n\t\n\ttext -l \"General Preferences\" -font \"boldLabelFont\" gPrefTxt;\n\tseparator sep1;\n\ttext -l \"left prefix\" lpTxt;\n\ttext -l \"right prefix\" rpTxt;\n\ttextField -text $abWlPrefs[0] -changeCommand \"$abWlPrefs[0] = `textField -q -text lpFld`\" -editable true lpFld; //left prefix field\n\ttextField -text $abWlPrefs[1] -changeCommand \"$abWlPrefs[1] = `textField -q -text rpFld`\" -editable true rpFld; //left prefix field\n\t$utInt = $abWlPrefs[5];\n\tcheckBox -l \"Normalize Weights\" -value $utInt -changeCommand \"$abWlPrefs[5] = `checkBox -q -value nrmChkBx`\" nrmChkBx;\n\t$utInt = $abWlPrefs[10];\n\tcheckBox -l \"Cull Matching Weights\" -value $utInt -changeCommand \"$abWlPrefs[10] = `checkBox -q -value cnmwChkBx`\" cnmwChkBx; //cull non matching weights check box\n\t$utInt = $abWlPrefs[8];\n\tcheckBox -l \"Warn On Unconnected Infs\" -value $utInt -changeCommand \"$abWlPrefs[8] = `checkBox -q -value uwChkBx`\" uwChkBx; //unconnected warn check box\n\t$utInt = $abWlPrefs[11];\n\tcheckBox -l \"Alphanumeric Connections\" -value $utInt -changeCommand \"$abWlPrefs[11] = `checkBox -q -value ancChkBx`;abWlVisualizeConnections();\" ancChkBx; //alphanumeric connections check box\n\tseparator -vis false sep2;\n\t\n\ttext -l \"Mirror Preferences\" -font \"boldLabelFont\" mPrefTxt;\n\tseparator sep3;\n\ttext -l \"Mirror Axis:\" axisTxt;\n\t$utInt = $abWlPrefs[2]; // utility int\n\tradioButtonGrp -numberOfRadioButtons 3 -l1 \"YZ\" -l2 \"XZ\" -l3 \"XY\" \n\t-select $utInt -columnWidth3 48 48 48 -onCommand \"$abWlPrefs[2] = `radioButtonGrp -q -select smaRbGrp`; global string $abWlSymTable; global string $abWlOriginVts; clear($abWlSymTable); clear($abWlOriginVts);\" smaRbGrp; //select mirror axis\n\t$utInt = $abWlPrefs[3];\n\tcheckBox -l \"Operate +X to -X\" -value $utInt -changeCommand \"$abWlPrefs[3] = `checkBox -q -value maChkBx`\" maChkBx;\n\t$utInt = $abWlPrefs[12];\n\tcheckBox -l \"Auto Weight Origin Verts\" -value $utInt -changeCommand \"$abWlPrefs[12] = `checkBox -q -value awovChkBx`\" awovChkBx;\n\ttext -l \"tolerance\" mTolTxt;\n\ttextField -text $abWlPrefs[6] -changeCommand \"$abWlPrefs[6] = `textField -q -text mTolFld`\" -editable true mTolFld; //left prefix field\n\t\n\tseparator -vis false sep4;\n\ttext -l \"Copy Preferences\" -font \"boldLabelFont\" cPrefTxt;\n\tseparator sep5;\n\ttext -l \"Match Vertices Using:\" ctTxt;\n\t\n\t//optionMenu -changeCommand \"$abWlPrefs[4] = `optionMenu -q -select mvuOm`\" mvuOm; //copy type option menu\n\t//menuItem -label \"World Space Coords\";\n\t//menuItem -label \"Object Space Coords\";\n\t//menuItem -label \"Vertex Number\";\n\t//menuItem -label \"Mirror Across Origin\";\n\t//\n\t//$utInt = $abWlPrefs[4];\n\t//optionMenu -e -select $utInt mvuOm;\n\t//setParent..;\n\t\n\ttext -l \"tolerance\" cTolTxt;\n\ttextField -text $abWlPrefs[7] -changeCommand \"$abWlPrefs[7] = `textField -q -text cTolFld`\" -editable true cTolFld; //left prefix field\n\t\n\tseparator -vis false sep6;\n\tseparator sep7;\n\tbutton -height 25 -l \"close\" -c \"deleteUI -window abWlPrefsWin\" pcBn; //prefs close button\n\t\n\t\n\t\n\toptionMenu -changeCommand \"$abWlPrefs[4] = `optionMenu -q -select mvuOm`\" mvuOm; //copy type option menu\n\tmenuItem -label \"World Space Coords\";\n\tmenuItem -label \"Object Space Coords\";\n\tmenuItem -label \"Vertex Number\";\n\tmenuItem -label \"Mirror Across Origin\";\n\t\n\t$utInt = $abWlPrefs[4];\n\toptionMenu -e -select $utInt mvuOm;\n\tsetParent..;\n\t\n\tint $lmargin = 3;\n\tint $rmargin = 3;\n\tint $ctSpc = 8;\n\tint $sepTopSpc = 2;\n\tint $sepBotSpc = 5;\n\t\n\tformLayout -e\n\t\t-af gPrefTxt \"left\" $lmargin\n\t\t-af gPrefTxt \"top\" 8\n\t\t-af gPrefTxt \"right\" $rmargin\n\t\t\n\t\t-ac sep1 \"top\" $sepTopSpc gPrefTxt\n\t\t-af sep1 \"left\" $lmargin\n\t\t-af sep1 \"right\" $rmargin\n\t\t\n\t\t-af lpFld \"left\" $lmargin\n\t\t-ac lpFld \"top\" $ctSpc sep1\n\t\t-ap lpFld \"right\" $rmargin 45\n\t\t\n\t\t-ac lpTxt \"left\" 4 lpFld\n\t\t-ac lpTxt \"top\" ($ctSpc+2) sep1\n\t\t-af lpTxt \"right\" $rmargin\n\t\t\n\t\t-af rpFld \"left\" $lmargin\n\t\t-ac rpFld \"top\" 4 lpFld\n\t\t-ap rpFld \"right\" $rmargin 45\n\t\t\n\t\t-ac rpTxt \"left\" 4 rpFld\n\t\t-ac rpTxt \"top\" 6 lpFld\n\t\t-af rpTxt \"right\" $rmargin\n\t\t\n\t\t-af nrmChkBx \"left\" $lmargin\n\t\t-ac nrmChkBx \"top\" $ctSpc rpTxt\n\t\t-af nrmChkBx \"right\" $rmargin\n\t\t\n\t\t-af cnmwChkBx \"left\" $lmargin\n\t\t-ac cnmwChkBx \"top\" $ctSpc nrmChkBx\n\t\t-af cnmwChkBx \"right\" $rmargin\n\t\t\n\t\t-af uwChkBx \"left\" $lmargin\n\t\t-ac uwChkBx \"top\" $ctSpc cnmwChkBx\n\t\t-af uwChkBx \"right\" $rmargin\n\t\t\n\t\t-af ancChkBx \"left\" $lmargin\n\t\t-ac ancChkBx \"top\" $ctSpc uwChkBx\n\t\t-af ancChkBx \"right\" $rmargin\n\t\t\n\t\t-af sep2 \"left\" $lmargin\n\t\t-ac sep2 \"top\" $ctSpc ancChkBx\n\t\t-af sep2 \"right\" $rmargin\n\t\t\n\t\t-af mPrefTxt \"left\" $lmargin\n\t\t-ac mPrefTxt \"top\" 12 sep2\n\t\t-af mPrefTxt \"right\" $rmargin\n\t\t\n\t\t-ac sep3 \"top\" $sepTopSpc mPrefTxt\n\t\t-af sep3 \"left\" $lmargin\n\t\t-af sep3 \"right\" $rmargin\n\t\t\n\t\t-af axisTxt \"left\" $lmargin\n\t\t-ac axisTxt \"top\" $sepBotSpc sep3\n\t\t-af axisTxt \"right\" $rmargin\n\t\t\n\t\t-ac smaRbGrp \"top\" 4 axisTxt\n\t\t-af smaRbGrp \"left\" $lmargin\n\t\t\n\t\t-af awovChkBx \"left\" $lmargin\n\t\t-ac awovChkBx \"top\" $ctSpc smaRbGrp\n\t\t-af awovChkBx \"right\" $rmargin\n\t\t\n\t\t-af maChkBx \"left\" $lmargin\n\t\t-ac maChkBx \"top\" $ctSpc awovChkBx\n\t\t-af maChkBx \"right\" $rmargin\n\t\t\n\t\t-af mTolFld \"left\" $lmargin\n\t\t-ac mTolFld \"top\" $ctSpc maChkBx\n\t\t-ap mTolFld \"right\" $rmargin 45\n\t\t\n\t\t-ac mTolTxt \"left\" 4 mTolFld\n\t\t-ac mTolTxt \"top\" ($ctSpc+2) maChkBx\n\t\t-af mTolTxt \"right\" $rmargin\n\t\t\n\t\t-af sep4 \"left\" $lmargin\n\t\t-ac sep4 \"top\" $ctSpc mTolTxt\n\t\t-af sep4 \"right\" $rmargin\n\t\t\n\t\t-af cPrefTxt \"left\" $lmargin\n\t\t-ac cPrefTxt \"top\" 12 sep4\n\t\t-af cPrefTxt \"right\" $rmargin\n\t\t\n\t\t-af sep5 \"left\" $lmargin\n\t\t-ac sep5 \"top\" $sepTopSpc cPrefTxt\n\t\t-af sep5 \"right\" $rmargin\n\t\t\n\t\t-af ctTxt \"left\" $lmargin\n\t\t-ac ctTxt \"top\" $sepBotSpc sep5\n\t\t-af ctTxt \"right\" $rmargin\n\t\t\n\t\t-ac mvuOm \"top\" 4 ctTxt\n\t\t-af mvuOm \"left\" $lmargin\n\t\t\n\t\t-af cTolFld \"left\" $lmargin\n\t\t-ac cTolFld \"top\" $ctSpc mvuOm\n\t\t-ap cTolFld \"right\" $rmargin 45\n\t\t\n\t\t-ac cTolTxt \"left\" 4 cTolFld\n\t\t-ac cTolTxt \"top\" ($ctSpc+2) mvuOm\n\t\t-af cTolTxt \"right\" $rmargin\n\t\t\n\t\t-af sep6 \"left\" $lmargin\n\t\t-ac sep6 \"top\" $ctSpc cTolTxt\n\t\t-af sep6 \"right\" $rmargin\n\t\t\n\t\t-af sep7 \"left\" $lmargin\n\t\t-ac sep7 \"top\" $ctSpc sep6\n\t\t-af sep7 \"right\" $rmargin\n\t\t\n\t\t-af pcBn \"left\" $lmargin\n\t\t-ac pcBn \"top\" 5 sep7\n\t\t-af pcBn \"right\" $rmargin\n\t\t\n\t\tabPrefsForm\n\t;\n\t\n\tshowWindow abWlPrefsWin;\n\t\n\t// update enabled and disabled pref UI sections (mirror and copy)\n\tstring $srcObj = `textField -q -text soFld`;\n\tstring $destObj = `textField -q -text doFld`;\n\t\n\tif ($srcObj == \"\" || $destObj == \"\"){\n\t\t// enable copy and mirror options\n\t\tabWlDisablePrefs(0, 1);\n\t\tabWlDisablePrefs(1, 1);\n\t\t\n\t}else if ($srcObj == $destObj){\n\t\t// enable mirror options, disable copy\n\t\tabWlDisablePrefs(0, 1);\n\t\tabWlDisablePrefs(1, 0);\n\t\t\n\t}else{\n\t\t// enable copy options, disable mirror\n\t\tabWlDisablePrefs(0, 0);\n\t\tabWlDisablePrefs(1, 1);\n\t}\n}\n\n\nglobal proc abWlUpdateSelInfList(){\n\t//fills selection influence window with all infs on currently selected verts\n\t\n\tstring $inf, $aInfs[];\n\tstring $aSel[] = `filterExpand -sm 31`;\n\t\n\tif (size($aSel) > 0){\n\t\tstring $srcObj = `textField -q -text soFld`;\n\t\tstring $cluster = abWlGetSkinCluster($srcObj);\n\t\tstring $infs[] = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $cluster $aSel`;\n\t\t\n\t\tint $i;\n\t\tstring $aStr[], $str;\n\t\ttextScrollList -e -ra siList;\n\t\tfor ($i=0;$i<size($infs);$i++){\n\t\t\t$aStr = {$infs[$i]};\n\t\t\t$aStr = abGetSrc2DestConInfsAsStr($aStr);\n\t\t\t\n\t\t\t$str = (size($aStr) != 0) ? $infs[$i]+\" [c]\" : $infs[$i];\n\t\t\t$aInfs[size($aInfs)] = $str;\n\t\t}\n\t\t\n\t\t// sort the infs\n\t\t$aInfs = sort($aInfs);\n\t\t\n\t\t// refresh the textScrollList\n\t\tfor ($inf in $aInfs) textScrollList -e -append $inf siList;\n\t\t\n\t}else{\n\t\ttextScrollList -e -ra siList;\n\t}\n}\n\n\nglobal proc abWlShowInfluences(){\n\t//window with textScrollList containing influences on selected vertices\n\t\n\tif (`window -exists abWlVertInfs`){\n\t\tdeleteUI -window abWlVertInfs;\n\t}\n\t//windowPref -remove abWlVertInfs;\n\twindow -t \"Selection Influences\" -width 150 -height 358 -minimizeButton false -maximizeButton false abWlVertInfs;\n\tformLayout -numberOfDivisions 100 abWlVertInfsForm;\n\ttextScrollList -numberOfRows 16 -sc \"string $aSi[]=`textScrollList -q -si siList`;string $si=match(\\\"[a-zA-Z0-9_|:]*\\\", $aSi[0]);global string $abWlSrcInf[];int $iSi=abWlStrGetPos($si, $abWlSrcInf)+1;textScrollList -e -sii $iSi soInfList;abWlScrollListSelect(\\\"soInfList\\\");\" -dcc \"string $aInfs[]=`textScrollList -q -si siList`;int $i;for ($i=0;$i<size($aInfs);$i++){$aInfs[$i] =`match \\\"[a-zA-Z0-9_|]*\\\" $aInfs[$i]`;}string $tSel[] = abWlGetAffectedVertsByInf(`textField -q -text soFld`, $aInfs);select -r $tSel;\" -allowMultiSelection true siList; //selection inf list\n\tbutton -l \"Update List\" -c \"abWlUpdateSelInfList();\" uBn; //update button\n\t//button -l \"Select Influences\" -c \"string $origSel[]=`ls -sl`;string $tSel[]=`textScrollList -q -si siList`;int $i;for ($i=0;$i<size($tSel);$i++){$tSel[$i] =`match \\\"[a-zA-Z0-9_|]*\\\" $tSel[$i]`;}abWlSelectInfs($tSel);\" sBn; //select button\n\tbutton -l \"Select Influences\" -c \"string $tSel[]=`textScrollList -q -si siList`;int $i;for ($i=0;$i<size($tSel);$i++){$tSel[$i] =`match \\\"[a-zA-Z0-9_|:]*\\\" $tSel[$i]`;}select -r $tSel;\" sBn; //select button\n\tbutton -l \"Deselect Influenced\" -c \"string $tSel[]=`textScrollList -q -si siList`;int $i;for ($i=0;$i<size($tSel);$i++){$tSel[$i] =`match \\\"[a-zA-Z0-9_|:]*\\\" $tSel[$i]`;}if (size($tSel)>0){string $deSel[] = abWlGetAffectedVertsByInf(`textField -q -text soFld`, $tSel);select -d $deSel;}\" diBn;\n\tbutton -l \"Close\" -height 25 -c \"deleteUI -window abWlVertInfs;\" cBn;\n\t\n\tint $lmargin = 3;\n\tint $rmargin = 3;\n\t\n\tformLayout -e\n\t\t-af cBn \"left\" $lmargin\n\t\t-af cBn \"bottom\" 5\n\t\t-af cBn \"right\" $rmargin\n\t\t\n\t\t-af diBn \"left\" $lmargin\n\t\t-ac diBn \"bottom\" 5 cBn\n\t\t-af diBn \"right\" $rmargin\n\t\t\n\t\t-af sBn \"left\" $lmargin\n\t\t-ac sBn \"bottom\" 5 diBn\n\t\t-af sBn \"right\" $rmargin\n\t\t\n\t\t-af uBn \"left\" $lmargin\n\t\t-ac uBn \"bottom\" 5 sBn\n\t\t-af uBn \"right\" $rmargin\n\t\t\n\t\t-af siList \"top\" 6\n\t\t-ac siList \"bottom\" 5 uBn\n\t\t-af siList \"left\" $lmargin\n\t\t-af siList \"right\" $rmargin\n\t\t\n\t\tabWlVertInfsForm\n\t;\n\tabWlUpdateSelInfList();\n\tshowWindow abWlVertInfs;\n}\n\n\nglobal proc abWlShowHelp(){\n\t\n\tif (`window -exists abWlHelp`){\n\t\tdeleteUI -window abWlHelp;\n\t}\n\t//windowPref -remove abWlHelp;\n\twindow -t \"abWeightLifter Help\" -width 435 -height 350 -minimizeButton false -maximizeButton false abWlHelp;\n\tformLayout -numberOfDivisions 100 abWlHelpForm;\n\t\tscrollLayout abWlHelpScroll;\n\t\t\tcolumnLayout;\n\t\t\tstring $text;\n\t\t\ttext -l \"abWeightLifter v 1.4.1\\nBrendan Ross\\n06.01.2005\\nwww.supercrumbly.com\\n\\n\" -align left;\n\t\t\ttext -l \"about:\\n\" -align left;\n\t\t\t$text = \"A tool to copy and mirror skin weights on polygon objects bound to the same or\\nseparate rigs. Any number of influences can be copied/mirrored by establishing\\nconnections in the UI.\\n\\n\\ndirections:\\n\\n1.  Select the skinned polygon object that you want to copy weights from and\\nclick the \\\"Source Object\\\" button. Select the mesh you want to copy to and click\\n\\\"Destination Object.\\\" To mirror weights across a single object, select it as\\nboth the source and destination objects. To mirror weights across two separate\\nobjects that are symmetrical with one another, select \\\"Mirror Across Origin\\\" in\\nthe \\\"Match Vertices Using:\\\" drop down menu.\\n\\n\\n2.  Connections are made between influences in the \\\"source:\\\"(SSL) and\\n\\\"destination:\\\"(DSL) scroll lists. Select an influence in the SSL and click on\\none in the DSL. A connection is made as indicated by the \\\"=>a\\\" and \\\"a<=\\\" suffix\\nand prefix on your now connected influences. Leaving the SSL influence selected,\\nclick the highlighted item in the DSL. Now you've broken the connection.\\n\\nClicking in the SSL will highlight connected influences (if any) in the DSL.\\nClicking in the DSL will establish and break connections with the item selected\\n(if any) in the SSL.\\n\\n\\n3.  You can also auto connect your influences by clicking the \\\"Auto Connect\\nInfluences\\\" button. If you're performing a mirror copy, open the options menu\\nand enter the appropriate left and right prefixes.\\n\\nYou change your init preferences by editing the $abWlPrefs array (search for\\n\\\"string $abWlPrefs[];\\\"). Run \\\"clear($abWlPrefs);\\\" in the script editor to clear\\nyour session settings and re-init your preferences.\\n\\n\\n4.  Make sure your source and destination objects are in their bind poses and\\nClick \\\"Copy Weights\\\". If you copy without all SSL influences connected you'll\\nget a warning and, most likely, bad results (especially if the \\\"Normalize\\\"\\ncheckbox under \\\"General Preferences\\\" is unchecked).\\n\\nYou can control which vertices are copied by making a vertex component selection\\nbefore clicking \\\"Copy Weights.\\\"\\n \\nLeave the \\\"Normalize\\\" checkbox unchecked if the weights you're copying have\\nalready been normalized (which is most likely). Checking it will slow down the\\nweight copy.\\n\\nIf you're mirroring weights, the first copy operation will build the symmetry\\ntable (ST). This only needs to be done once. If you close the script using the\\nclose window button on menu bar, your current ST and connection information will\\nbe preserved, so the the next time you open the script you won't have to do it\\nagain. Once the ST has been built, you don't have to reset your character to its\\nbinding position to copy weights.\\n\\n\\n5.  Use the \\\"Select Verts By Influence\\\" (SVBI) window to create selections based\\non a given set of influences. In this way you can copy the weights for only the\\ninfluences that you're interested in.\\n\\nSelect an influence (or influences) in the SVBI window and click the \\\"Select\\nInfluenced Verts\\\" button. All vertices with non-zero weighting to the selected\\ninfluence(s) will be selected. You can also make selections in the SVBI window\\nby selecting influences in your scene and clicking the \\\"Select Influences\\\"\\nbutton in the main UI. Enable \\\"Include Dest Strays\\\" to include all vertices\\nweighted to the selected and connected influences in the selection. This ensures\\nthat if you reduce the weight of a selected influence to zero on vertices from\\nthe source side of your object, those verts will still be included in the\\nselection as long as their mirrored vertices' weight to the connected influence\\nis greater than zero. \\\"Include Dest Strays\\\" is only available when you're\\nmirroring weights.\\n\\nYou can also see which influences are affecting a given selection of vertices by\\nselecting some verts and clicking the \\\"Show Selection Influences\\\" button.\\nConnected items are suffixed with a \\\"[c].\\\" Clicking a list item selects it in\\nthe SSL and highlights its connection (if any) in the DSL. Double clicking an\\nitem selects all the vertices weighted to that influence. This only works for\\none item at a time. Click the \\\"Select Influences\\\" button to select the influences\\nhilited in the SVBI window.  The \\\"Deselect Influenced\\\" button removes any verts\\nweighted to the selected influences from the current selection. Click the \\\"Update\\nList\\\" button to refresh the list after making a new vertex selection or to reflect\\nnewly connected influences.\\n\\n\\nAs always, click the \\\"Close\\\" button in the UI (instead of the close window\\nbutton on the title bar) to clear the script globals.\\n\\n\";\n\t\t\ttext -l $text -align left;\n\t\t\tsetParent ..;\n\t\tsetParent ..;\n\t\tbutton -l \"Close\" -height 25 -c \"deleteUI -window abWlHelp;\" cBn;\n\t\n\tint $lmargin = 3;\n\tint $rmargin = 3;\n\t\n\tformLayout -e\n\t\t\n\t\t-attachForm abWlHelpScroll \"left\" $lmargin\n\t\t-attachForm abWlHelpScroll \"top\" 6\n\t\t-attachForm abWlHelpScroll \"right\" $rmargin\n\t\t-attachControl abWlHelpScroll \"bottom\" 4 cBn\n\t\t\n\t\t//-attachControl cBn \"top\" 8 abWlHelpScroll\n\t\t-attachForm cBn \"left\" $lmargin\n\t\t-attachForm cBn \"right\" $rmargin\n\t\t-attachForm cBn \"bottom\" 5\n\t\t\n\t\tabWlHelpForm\n\t;\n\t\t\n\tshowWindow abWlHelp;\n}\n\n\nglobal proc abWlReplaceSkinUI(string $srcMesh, string $targetMesh){\n\t// srcMesh is skinned mesh, targetMesh is unskinned to copy to target mesh\n\t\n\tint $lmargin = 3;\n\tint $rmargin = 3;\n\tint $lCol = 64;\n\tint $rCol = 55;\n\t\n\tif (`window -exists abWlRsReplaceSkinWin`){\n\t\tdeleteUI -window abWlRsReplaceSkinWin;\n\t}\n\tif (`windowPref -exists abWlRsReplaceSkinWin`) windowPref -remove abWlRsReplaceSkinWin;\n\t\n\twindow -t \"Replace Skin\" -width 232 -height 206 -minimizeButton false -maximizeButton false abWlRsReplaceSkinWin;\n\t\n\tformLayout -numberOfDivisions 100 abWlRsReplaceSkinForm;\n\t\n\ttextFieldGrp -ed false -label \"Source:\" -text $srcMesh -cw2 $lCol $rCol -ad2 2 -columnAttach 1 right 4 abWlRsSknMshTxFldGrp;\n\ttextFieldGrp -ed false -label \"Target:\" -text $targetMesh -cw2 $lCol $rCol -ad2 2 -columnAttach 1 right 4 abWlRsRplmntMshTxFldGrp;\n\tintFieldGrp -numberOfFields 1 -label \"Max Infs\" -value1 5 -cw2 $lCol $rCol -ad2 2 -columnAttach 1 right 4 abWlRsMaxInfIntFldGrp;\n\tfloatFieldGrp -numberOfFields 1 -label \"Dropoff\" -value1 4 -cw2 $lCol $rCol -ad2 2 -columnAttach 1 right 4 abWlRsDropOffIntFldGrp;\n\t\n\tcheckBox -l \"Delete Source Mesh\" -value false abWlRsDelSrcChkBx;\n\t\n\tbutton -height 25 -label \"Bind And Copy Weights\" -command \"abWlReplaceSkin2()\" abWlRsRplcSknCopyBn;\n\t\n\t\n\tformLayout -e\n\t\t-af abWlRsSknMshTxFldGrp \"left\" $lmargin\n\t\t-af abWlRsSknMshTxFldGrp \"top\" 8\n\t\t-af abWlRsSknMshTxFldGrp \"right\" $rmargin\n\t\t\n\t\t-ac abWlRsRplmntMshTxFldGrp \"top\" 5 abWlRsSknMshTxFldGrp\n\t\t-af abWlRsRplmntMshTxFldGrp \"left\" $lmargin\n\t\t-af abWlRsRplmntMshTxFldGrp \"right\" $rmargin\n\t\t\n\t\t\n\t\t-ac abWlRsMaxInfIntFldGrp \"top\" 6 abWlRsRplmntMshTxFldGrp\n\t\t-af abWlRsMaxInfIntFldGrp \"left\" $lmargin\n\t\t-af abWlRsMaxInfIntFldGrp \"right\" $rmargin\n\t\t\n\t\t-ac abWlRsDropOffIntFldGrp \"top\" 6 abWlRsMaxInfIntFldGrp\n\t\t-af abWlRsDropOffIntFldGrp \"left\" $lmargin\n\t\t-af abWlRsDropOffIntFldGrp \"right\" $rmargin\n\t\t\n\t\t\n\t\t-ac abWlRsDelSrcChkBx \"top\" 6 abWlRsDropOffIntFldGrp\n\t\t-af abWlRsDelSrcChkBx \"left\" ($lmargin+$lCol)\n\t\t-af abWlRsDelSrcChkBx \"right\" $rmargin\n\t\t\n\t\t-ac abWlRsRplcSknCopyBn \"top\" 6 abWlRsDelSrcChkBx\n\t\t-af abWlRsRplcSknCopyBn \"left\" $lmargin\n\t\t-af abWlRsRplcSknCopyBn \"right\" $rmargin\n\t\t\n\t\tabWlRsReplaceSkinForm\n\t;\n\t\n\tshowWindow abWlRsReplaceSkinWin;\n\t\n}\n\n\nglobal proc abWlReplaceSkin2(){\n\t// second part of replace skin proc -- called by abWlReplaceSkinUI\n\t\n\tif (!`window -exists abWlRsReplaceSkinWin`) return;\n\t\n\tstring $srcObj = `textFieldGrp -q -text abWlRsSknMshTxFldGrp`;\n\tstring $targObj = `textFieldGrp -q -text abWlRsRplmntMshTxFldGrp`;\n\tstring $sc = abWlGetSkinCluster($srcObj);\n\t\n\tfloat $dropOff = `floatFieldGrp -q -v1 abWlRsDropOffIntFldGrp`;\n\tint $maxInfs = `intFieldGrp -q -v1 abWlRsMaxInfIntFldGrp`;\n\tint $delSrcObj = `checkBox -q -value abWlRsDelSrcChkBx`;\n\tint $okToDelete = true;\n\tstring $aHilited[] = `ls -hilite`;\n\tstring $aSelVts[], $aInfs[], $msgStr, $aOrigSel[];\n\t\n\t\n\tif (size($aHilited) == 1 && $aHilited[0] == $srcObj){\n\t\t// now get list of selected vertices\n\t\t$aSelVts = `filterExpand -sm 31`;\n\t}\n\t\n\t// get affecting infs\n\tif (size($aSelVts) > 0){\n\t\t$aInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $sc $aSelVts`;\n\t}else{\n\t\t$aInfs = `skinCluster -q -influence $sc`;\n\t}\n\t\n\t$aOrigSel = `ls -sl`;\n\t\n\tselect -r $aInfs $targObj;\n\t\n\t// bind unskinnedMesh\n\t//skinCluster -toSelectedBones -dr $dropOff -maximumInfluences $maxInfs -omi true $aInfs $targObj;\n\tskinCluster -toSelectedBones -dr $dropOff -maximumInfluences $maxInfs -omi true;\n\t\n\tselect -r $aOrigSel;\n\t\n\tstring $dc = abWlGetSkinCluster($targObj);\n\t\n\tif (`exists copySkinWeights`){\n\t\tcopySkinWeights -smooth -noMirror -surfaceAssociation closestPoint -influenceAssociation name -sourceSkin $sc -destinationSkin $dc;\n\t\tprint ($targObj+\" has been skinned to \"+(size($aInfs))+\" influences and its weights copied from \"+$srcObj+\".\\n\");\n\t}else{\n\t\t$okToDelete = false;\n\t\t$msgStr = \"Unable to copy weights.  \"+$targObj+\" has been skinned to the specified influences.  You can now copy the weights using this script's main UI.\";\n\t\tif ($delSrcObj) $msgStr += \"  The source object will not be deleted.\";\n\t\twarning $msgStr;\n\t}\n\t\n\tif ($delSrcObj && $okToDelete){\n\t\t// delete source mesh\n\t\tskinCluster -e -unbind $sc;\n\t\tdelete $srcObj;\n\t}\n\t\n\tif (size($aHilited) > 0) toggleSelMode;\n\t\n\tif (`window -exists abWlRsReplaceSkinWin`) deleteUI -window abWlRsReplaceSkinWin;\n\t\n}\n\n\nglobal proc abWlReplaceSkin(){\n\t\n\tstring $aSel[] = `filterExpand -sm 12`;\n\t\n\tif (size($aSel) != 2){\n\t\twarning \"Select two meshes\";\n\t\treturn;\n\t}\n\t\n\tstring $cluster1 = abWlGetSkinCluster($aSel[0]);\n\tstring $cluster2 = abWlGetSkinCluster($aSel[1]);\n\t\n\tif ($cluster1 == \"\" && $cluster2 == \"\"){\n\t\twarning \"One of the selected meshes must be skinned\";\n\t\treturn;\n\t}\n\tif ($cluster1 != \"\" && $cluster2 != \"\"){\n\t\twarning \"Only one of the selected meshes should be skinned\";\n\t\treturn;\n\t}\n\t\n\tstring $sMesh, $uMesh, $sc; // skinnedMesh, unskinnedMesh, skinCluster\n\t\n\tif ($cluster1 != \"\"){\n\t\t$sMesh = $aSel[0];\n\t\t$uMesh = $aSel[1];\n\t\t$sc = $cluster1;\n\t}else{\n\t\t$sMesh = $aSel[1];\n\t\t$uMesh = $aSel[0];\n\t\t$sc = $cluster2;\n\t}\n\t\n\tselect -clear;\n\thilite $sMesh;\n\tSelectVertexMask;\n\t\n\tabWlReplaceSkinUI($sMesh, $uMesh);\n\n}\n\n\nglobal proc abWlCheckSym(){\n\t// checks the symmetry of source object (if src and dest are the same) or the src and dest (if different)\n\t\n\tglobal string $abWlPrefs[];\n\t\n\tint $mirrorAxis = $abWlPrefs[2];\n\tint $mirrorPos2Neg = $abWlPrefs[3];\n\tfloat $mTol = $abWlPrefs[6];\n\tint $copyType = $abWlPrefs[4];\n\tstring $aUnSymVerts[];\n\t\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tstring $destObj = `textField -q -text \"doFld\"`;\n\t\n\tif ($srcObj == \"\" || $destObj == \"\"){\n\t\twarning \"A source and destination object must specified before symmetry can be determined.  Unable to proceed.\";\n\t\treturn;\n\t}\n\t\n\tif ($srcObj == $destObj){\n\t\t$aUnSymVerts = abWlBuildSymTable($srcObj, $destObj, $mirrorAxis, $mirrorPos2Neg, $mTol, true, true);\n\t}else{\n\t\tif ($copyType == 4){\n\t\t\t$aUnSymVerts = abWlBuildSymTable($srcObj, $destObj, $mirrorAxis, $mirrorPos2Neg, $mTol, true, true);\n\t\t}else{\n\t\t\twarning \"You must select \\\"Mirror Across Origin\\\" as the copy type in preferences (Options > Options) to perform a mirror across multiple objects.\";\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif (size($aUnSymVerts) > 0){\n\t\tselect -r $aUnSymVerts;\n\t\twarning (\"The mesh is not symmetrical.  Found \"+(size($aUnSymVerts))+\" asymmetric vert(s).  Try increasing the tolerance under \\\"Mirror Preferences\\\" in the options menu if you believe that your mesh is symmetrical (.005 is a good place to start).\");\n\t}else{\n\t\tselect -clear;\n\t\tprint \"The mesh is symmetrical.\\n\";\n\t}\n\t\n}\n\n\nglobal proc abWlBuildSymTableFromSelObj(){\n\t// builds a symmetry table from a selected object with the same number of verts as the src and destination objects (which must be the same)\n\t\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlOriginVts[];\n\tglobal string $abWlPrefs[];\n\t\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tstring $destObj = `textField -q -text \"doFld\"`;\n\tstring $aSel[], $selObj, $srchVtxStr, $rplcVtxStr, $aASymVerts[];\n\tint $aInt[], $srcTotVts, $selTotVts, $i;\n\tint $mirrorAxis = $abWlPrefs[2];\n\tint $mirrorPos2Neg = $abWlPrefs[3];\n\tfloat $mTol = $abWlPrefs[6];\n\t\n\t$aSel = `ls -sl`;\n\tif (size($aSel) == 1){\n\t\t$selObj = $aSel[0];\n\t}else{\n\t\twarning \"Select one object with the same topology as your source/destination object\";\n\t\treturn;\n\t}\n\t\n\tif ($srcObj == $destObj && $srcObj != \"\" && $selObj != $srcObj){\n\t\t\n\t\t$aInt = `polyEvaluate -v $srcObj`;\n\t\t$srcTotVts = $aInt[0];\n\t\t$aInt = `polyEvaluate -v $selObj`;\n\t\t$selTotVts = $aInt[0];\n\t\t\n\t\tif ($srcTotVts == $selTotVts){\n\t\t\t\n\t\t\t$aASymVerts = abWlBuildSymTable($selObj, $selObj, $mirrorAxis, $mirrorPos2Neg, $mTol, true, false);\n\t\t\t\n\t\t\tif (size($abWlSymTable) == 0){\n\t\t\t\twarning \"The symTable is empty.  Unable to proceed.\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// now substitute srcObj in abWlSymTable for selObj\n\t\t\t$srchVtxStr = $selObj+\"\\\\.vtx\\\\[\";\n\t\t\t$rplcVtxStr = $srcObj+\".vtx[\";\n\t\t\t\n\t\t\t// do it for the symTable\n\t\t\tfor ($i=0;$i<size($abWlSymTable);$i++) $abWlSymTable[$i] = `substitute $srchVtxStr $abWlSymTable[$i] $rplcVtxStr`;\n\t\t\t\n\t\t\t// do it for the origin array\n\t\t\tfor ($i=0;$i<size($abWlOriginVts);$i++) $abWlOriginVts[$i] = `substitute $srchVtxStr $abWlOriginVts[$i] $rplcVtxStr`;\n\t\t\t\n\t\t\tif (size($aASymVerts) == 0){\n\t\t\t\tprint (\"Mesh is symmetrical.  SymTable updated with data for \"+(size($abWlSymTable))/2+\" vertices.\\n\");\n\t\t\t}else{\n\t\t\t\tprint (\"Mesh is not symmetrical.  Found \"+(size($aASymVerts))+\" asymmetric vert(s).\\n\");\n\t\t\t}\n\t\t\t\n\t\t}else{\n\t\t\twarning \"Topology on selected object doesn't match the source/destination object.\";\n\t\t\treturn;\n\t\t}\n\t}else{\n\t\tif ($srcObj == \"\" || $destObj == \"\"){\n\t\t\twarning \"You must specify a source and destination object.\";\n\t\t}else if ($srcObj != $destObj){\n\t\t\twarning \"Source and destination object must be the same.\";\n\t\t}else if ($selObj == $srcObj){\n\t\t\twarning \"Selected object cannot be the same as the source/destination object.\";\n\t\t}\n\t}\n}\n\n\nglobal proc abWlDisablePrefs(int $prefsInd, int $enable){\n\t// disables mirror or copy prefs in the options UI based on current selection (makes difference between copy and mirror more obvious)\n\t// prefsInd is 0 for mirror prefs, 1 for copy prefs.  enable will enable or disable (0) prefs specified by prefsInd\n\t\n\tif (!`window -exists abWlPrefsWin`) return;\n\t\n\tif ($prefsInd == 0){\n\t\t// mirror prefs\n\t\ttext -e -en $enable mPrefTxt;\n\t\ttext -e -en $enable axisTxt;\n\t\ttext -e -en $enable mTolTxt;\n\t\tradioButtonGrp -e -en $enable smaRbGrp;\n\t\tcheckBox -e -en $enable awovChkBx;\n\t\tcheckBox -e -en $enable maChkBx;\n\t\ttextField -e -en $enable mTolFld;\n\t}else if ($prefsInd == 1){\n\t\t// copy prefs\n\t\ttext -e -en $enable cPrefTxt;\n\t\ttext -e -en $enable ctTxt;\n\t\ttext -e -en $enable cTolTxt;\n\t\toptionMenu -e -en $enable mvuOm;\n\t\ttextField -e -en $enable cTolFld;\n\t}\n}\n\n\nglobal proc abWlShowExportWeightDialog(){\n\t// shows export weight file save dialog\n\t\n\tstring $aStr[], $aRel[], $skinObj;\n\t\n\t$aStr = `ls -sl -type transform`;\n\t\n\tif (size($aStr) != 1){\n\t\twarning \"Select a single skinned mesh\";\n\t\treturn;\n\t}else{\n\t\t$aRel = `listRelatives -c -type mesh $aStr[0]`;\n\t\tif (size($aRel) > 0){\n\t\t\t$skinObj = $aStr[0];\n\t\t\tselect -r $skinObj;\n\t\t}else{\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tstring $srcCluster = abWlGetSkinCluster($skinObj);\n\t\n\tif (!objExists($skinObj) || $srcCluster == \"\"){\n\t\twarning (\"Selected Mesh \"+$skinObj+\" is not skinned.  Select a skinned mesh and try again.\");\n\t\treturn;\n\t}\n\t\n\tfileBrowserDialog -m 1 -fc \"abWlShowExportWeightHandler\" -an \"Save\" -filterList \"abWeightLifter Save(*.wsv),*.wsv\" -fileType \"abWeightLifter Save(*.wsv)\" -dialogStyle 1;\n\t\n}\n\n\nglobal proc abWlShowExportWeightHandler(string $fileName, string $type){\n\t// called by export dialog, acts as intermediary between it and exportWeight proc\n\t\n\tstring $aStr[] = `ls -sl`;\n\tstring $skinObj = $aStr[0];\n\t\n\tabWlExportWeights($skinObj, $fileName);\n\t\n}\n\n\nglobal proc abWlExportWeights(string $skinObj, string $fileName){\n\t// exports weights to a text file in form of:\n\t// vertNum>worldX&worldY&worldZ>localX&localY&localZ>inf1&weight1&inf2&weight2&inf3&weight3\n\t// \"**infs\" signifies a special line that contains all of the infs separated by \"&\"\n\t\n\tstring $data, $aChunk[], $vtxStr, $aInfs[], $aInfWeightData[], $aInfs[];\n\tint $aInt[], $totVtx, $i, $k;\n\tfloat $aFlt[];\n\t\n\tstring $dataSep = \">\";\n\tstring $grpSep = \"&\";\n\tstring $nl = \"\\n\";\n\t\n\tstring $srcCluster = abWlGetSkinCluster($skinObj);\n\t\n\tif (!objExists($skinObj) || $srcCluster == \"\"){\n\t\twarning (\"Selected Mesh \"+$skinObj+\" is not skinned.  Select a skinned mesh and try again.\");\n\t\treturn;\n\t}\n\t\n\t$aInt = `polyEvaluate -v $skinObj`; \n\t$totVtx = $aInt[0];\n\t\n\t// init data stuff (save infs)\n\t$aInfs = sort(`skinCluster -q -influence $srcCluster`);\n\t$data += \"**infs>\"+stringArrayToString($aInfs, \"&\");\n\t// done\n\t\n\t\n\t// prog bar init stuff\n\tint $mod;\n\tint $prog;\n\tfloat $flt;\n\tfloat $progNum;\n\tfloat $progDenom;\n\t\n\tfloat $progUpdate = 50.0;\n\t\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Exporting Weights\";\n\t$progDenom = $totVtx;\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t// end prob bar init\n\t\n\t// save skin info\n\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t//$nl = ($i == 0) ? \"\" : \"\\n\";\n\t\t\n\t\t$vtxStr = $skinObj+\".vtx[\"+$i+\"]\";\n\t\t\n\t\tclear($aChunk);\n\t\t\n\t\t$aChunk[0] = $i;\n\t\t$aFlt = `xform -q -ws -t $vtxStr`;\n\t\t$aChunk[1] = string($aFlt[0])+$grpSep+string($aFlt[1])+$grpSep+string($aFlt[2]);\n\t\t$aFlt = `xform -q -os -t $vtxStr`;\n\t\t$aChunk[2] = string($aFlt[0])+$grpSep+string($aFlt[1])+$grpSep+string($aFlt[2]);\n\t\t\n\t\t$aInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $srcCluster $vtxStr`;\n\t\t$aFlt = `skinPercent -ib .00000000000000000000000000000000000000001 -q -v $srcCluster $vtxStr`;\n\t\t\n\t\t// capture weights for this vtx\n\t\tclear ($aInfWeightData);\n\t\tif (size($aInfs) == size($aFlt)){\n\t\t\t\n\t\t\tfor ($k=0;$k<size($aInfs);$k++){\n\t\t\t\t$aInfWeightData[size($aInfWeightData)] = $aInfs[$k];\n\t\t\t\t$aInfWeightData[size($aInfWeightData)] = string($aFlt[$k]);\n\t\t\t}\n\t\t\t\n\t\t\t$aChunk[3] = stringArrayToString($aInfWeightData, $grpSep);\n\t\t\t\n\t\t}else{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$data += $nl+stringArrayToString($aChunk, $dataSep);\n\t\t\n\t}\n\t\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n\t\n\t// save to file\n\tint $fileId = `fopen $fileName \"w\"`;\n\tfprint $fileId $data;\n\tfclose $fileId;\n\t\n\t/*\n\t\n\t// interpolate weight copy (coming some day?)\n\t\n\tint $pomLoaded = `pluginInfo -query -l nearestPointOnMesh`;\n\tif( !$pomLoaded ){\n\t\tloadPlugin nearestPointOnMesh;\n\t}\n\t\n\tstring $gNode = `createNode nearestPointOnMesh`;\n\t\n\tconnectAttr -f \"milo.worldMesh\" ($gNode+\".inMesh\");\n\t\n\tconnectAttr -f (\"locator1.tx\") ($gNode+\".ipx\");\n\tconnectAttr -f (\"locator1.ty\") ($gNode+\".ipy\");\n\tconnectAttr -f (\"locator1.tz\") ($gNode+\".ipz\");\n\t\n\tint $uu = `getAttr ($gNode+\".nearestFaceIndex\")`;\n\t\n\tselect (\"milo.f[\"+$uu+\"]\");\n\t\n\tdelete $gNode;\n\t\n\t*/\n\t\n}\n\n\nglobal proc abWlShowImportWeightDialog(){\n\t// shows export weight file save dialog\n\t\n\tglobal string $abWlPrefs[];\n\t\n\tstring $aStr[], $aRel[], $skinObj;\n\t\n\tstring $fileName = `fileDialog -m 0 -dm \"*.wsv\"`;\n\t\n\tif ($fileName == \"\"){\n\t\treturn;\n\t}else if (!(endsWith($fileName, \".wsv\"))){\n\t\twarning \"Select a valid weight save file.\";\n\t\treturn;\n\t}\n\t\n\t//$fileName = substituteAllString($fileName, \"\\\\\", \"/\");\n\t\n\t// clear selection and insert fileName\n\t\n\tabWlSoFldCleanup();\n\t\n\t// set global so the other procs know this is a special case\n\t\n\ttextField -e -text $fileName soFld;\n\t$abWlPrefs[13] = $fileName;\n\t\n\tabWlRefreshSoDoBns();\n\tabWlPopulateInfFields(\"soFld\", false, false);\n\t\n}\n\n\nglobal proc string[] abWlGetImportData(string $fileName){\n\t// returns either data from given $fileName as an array of lines, or an empty array if the file can't be found\n\t\n\tstring $aRet[], $nextLine;\n\tint $fileId;\n\t\n\tif (`file -q -ex $fileName` == false) return $aRet;\n\t\n\t$fileId = `fopen $fileName \"r\"`;\n\t$nextLine = `fgetline $fileId`;\n\t\n\twhile (size($nextLine) > 0){\n\t\tif (endsWith($nextLine, \"\\n\")) $nextLine = substring($nextLine, 1, size($nextLine)-1);\n\t\t$aRet[size($aRet)] = $nextLine;\n\t\t$nextLine = `fgetline $fileId`;\n\t}\n\t\n\tfclose $fileId;\n\t\n\treturn $aRet;\n\t\n}\n\n\nglobal proc string[] abWlGetImportInfs(string $fileName){\n\t// retrieves all of the infs from a given import file path\n\t\n\tstring $aRet[], $aData[], $aStr[];\n\tint $fileId, $i;\n\t\n\t$aData = abWlGetImportData($fileName);\n\t\n\tif (size($aData) == 0){\n\t\t// file doesn't exist; clear selection and return\n\t\tselect -clear\n\t\tabWlSelObject(\"soFld\");\n\t\t\n\t\treturn $aRet;\n\t}\n\t\n\tif (startsWith($aData[0], \"**infs\")){\n\t\t\n\t\t$aStr = stringToStringArray($aData[0],\">\");\n\t\t$aRet = stringToStringArray($aStr[1],\"&\");\n\t\t\n\t}\n\t\n\treturn $aRet;\n}\n\n\nglobal proc abWlImportWeights(string $srcObj, string $destObj, float $tol, int $normalize, int $copyType){\n\t\n\t//sets up vertCopyList and sends it to abWlWeightCopy for mesh to mesh copies\n\t//mode is 1 worldSpace, 2 objectSpace, 3 vertexNum\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal int $abWlInfConnections[];\n\tstring $destVtx, $srcVtx;\n\tint $i, $j, $k;\n\t\n\t// import data\t\n\tstring $aData[] = abWlGetImportData($srcObj);\n\tif (size($aData) <= 1){\n\t\twarning \"The weight save file is bad.  Unable to proceed.\";\n\t\treturn;\n\t}\n\t\n\t// parse data\n\t// vertNum>worldX&worldY&worldZ>localX&localY&localZ>inf1&weight1&inf2&weight2&inf3&weight3\n\t\n\tfloat $aImpX[], $aImpY[], $aImpZ[];\n\tstring $aImpWeightData[], $aSubData1[], $aSubData2[], $aSrcVts[];\n\t\n\tint $spaceInd = ($copyType == 1) ? 1 : 2; // worldSpace atts are at index 1 of aData, localSpace at index 2\n\t\n\tfor ($i=1;$i<size($aData);$i++){\n\t\t\n\t\t$aSubData1 = stringToStringArray($aData[$i], \">\");\n\t\t$aSubData2 = stringToStringArray($aSubData1[$spaceInd], \"&\");\n\t\t$aImpX[size($aImpX)] = float($aSubData2[0]);\n\t\t$aImpY[size($aImpY)] = float($aSubData2[1]);\n\t\t$aImpZ[size($aImpZ)] = float($aSubData2[2]);\n\t\t$aImpWeightData[size($aImpWeightData)] = $aSubData1[3];\n\t\t\n\t}\n\t\n\tint $totSrcVts = size($aImpX);\n\t\n\t$aInt = `polyEvaluate -v $destObj`;\n\tint $totDestVts = $aInt[0];\n\tfloat $aFlt[];\n\tfloat $progUpdate = 50.0;\n\t\n\tstring $aDestVts[], $aVtsToCopy[];\n\tfor ($i=0;$i<$totDestVts;$i++){\n\t\t$aDestVts[size($aDestVts)] = $destObj+\".vtx[\"+$i+\"]\";\n\t}\n\t\n\tstring $aSelVts[] = `filterExpand -sm 31`;\n\tif (size($aSelVts) == 0){\n\t\t$aVtsToCopy = $aDestVts;\n\t}else{\n\t\t\n\t\t//make sure only destObj verts are selected\n\t\tstring $myIntersector = `stringArrayIntersector`;\n\t\tstringArrayIntersector -edit -intersect $aDestVts $myIntersector;\n\t\tstringArrayIntersector -edit -intersect $aSelVts $myIntersector;\n\t\t$aVtsToCopy = `stringArrayIntersector -query $myIntersector`;\n\t\tdeleteUI $myIntersector;\n\t\t\n\t}\n\t\n\tint $mod;\n\tint $prog;\n\tfloat $flt;\n\tfloat $progNum;\n\tfloat $progDenom;\n\t\n\tint $totVtsToCopy = size($aVtsToCopy);\n\tstring $aDestCopyList[];\n\tint $aSrcCopyIndList[];\n\t\n\tif ($copyType == 1 || $copyType == 2){\n\t\t\n\t\tint $matchInd;\n\t\tfloat $floatMatchFlag = -666666.0;\n\t\t\n\t\tstring $space = ($copyType == 1) ? \"-ws\" : \"-os\";\n\t\t\n\t\twaitCursor -state on;\n\t\tprogressWindow -title \"Working\" -progress 0 -status \"Checking Overlap\";\n\t\t$progDenom = $totVtsToCopy;\n\t\t$flt = ceil($progDenom/$progUpdate);\n\t\t$mod = $flt;\n\t\t\n\t\tfor ($i=0;$i<$totVtsToCopy;$i++){\n\t\t\t\n\t\t\t//prog win\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t\t//end prog win\n\t\t\t\n\t\t\t$destVtx = $aVtsToCopy[$i];\n\t\t\t$aFlt = eval(\"xform \"+$space+\" -q -translation \"+$destVtx);\n\t\t\tfor ($j=0;$j<$totSrcVts;$j++){\n\t\t\t\tif ($aFlt[0] == $floatMatchFlag){ //this might slow things down, I'll have to check\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (abs($aImpX[$j] - $aFlt[0]) < $tol){\n\t\t\t\t\t//passed the first gate\n\t\t\t\t\tif (abs($aImpY[$j] - $aFlt[1]) < $tol){\n\t\t\t\t\t\t//second, and...\n\t\t\t\t\t\tif (abs($aImpZ[$j] - $aFlt[2]) < $tol){\n\t\t\t\t\t\t\t//match!\n\t\t\t\t\t\t\t$aSrcCopyIndList[size($aSrcCopyIndList)] = $j;\n\t\t\t\t\t\t\t$aDestCopyList[size($aDestCopyList)] = $destVtx;\n\t\t\t\t\t\t\t$aImpX[$j] = $aImpY[$j] = $aImpZ[$j] = $floatMatchFlag;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tprogressWindow -endProgress;\n\t\twaitCursor -state off;\n\t\t\n\t}else if ($copyType == 3){\n\t\t//copy by vtx (I doubt anyone but me will ever need this)\n\t\t\n\t\tstring $match;\n\t\tint $destVtxNum;\n\t\t\n\t\tfor ($i=0;$i<$totVtsToCopy;$i++){\n\t\t\t\n\t\t\t$destVtx = $aVtsToCopy[$i];\n\t\t\t\n\t\t\t// get dest vtx num\n\t\t\t$match = `match \"vtx\\[[0-9]+\\]$\" $destVtx`;\n\t\t\t$destVtxNum = int(substring($match, 5, size($match)-1));\n\t\t\t\n\t\t\t// put them in the arrays\n\t\t\t$aSrcCopyIndList[size($aSrcCopyIndList)] = $destVtxNum;\n\t\t\t$aDestCopyList[size($aDestCopyList)] = $destVtx;\n\t\t\t\n\t\t}\n\t}\n\t\n\t\n\t// if the copy arrays are populated then there's a copyin' about to commence (hee haw)\n\t\n\tglobal string $abWlPrefs[];\n\t\n\tstring $destCluster = abWlGetSkinCluster($destObj);\n\tstring $tSrcInfs[], $tCurInfs[], $tDestInfsCopy[], $tvStr;\n\tfloat $tWeight;\n\tint $destVtxInd, $srcVtxInd;\n\tstring $tInfName, $tSrcInfName, $tDestInfName;\n\tint $aInitDestLock[]; //stores init state of lockweights\n\t\n\tstring $srcConLU[]; //source connection lookup\n\tstring $destConLU[]; //dest connection lookup\n\t\n\tint $cullMatch, $tInd;\n\tstring $aSrcInfs[], $aDestInfs[], $conInf;\n\tfloat $aSrcWeights[], $aDestWeights[];\n\tfloat $cullMatchTol = .0000000001;\n\tint $vertCounter = 0;\n\t\n\t\n\t//make sure all infs are unlocked so weights can be pruned to 0\n\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t$tDestInfName = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t\t$aInitDestLock[size($aInitDestLock)] = `skinCluster -inf $tDestInfName -q -lockWeights $destCluster`;\n\t\tskinCluster -e -inf $tDestInfName -lockWeights 0 $destCluster; \n\t\t\n\t\t//make 2 lists to speed lookup of connections -- first with connected srcnames, second with destnames at corresponding indices\n\t\t$srcConLU[size($srcConLU)] = $abWlSrcInf[$abWlInfConnections[$i]];\n\t\t$destConLU[size($destConLU)] = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t}\n\t\n\tint $scNormWeights = `getAttr ($destCluster+\".normalizeWeights\")`;\n\tif ($scNormWeights == (1-$normalize)){\n\t\tsetAttr ($destCluster+\".normalizeWeights\") $normalize;\n\t}\n\t\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Copying Weights\";\n\t$progDenom = size($aSrcCopyIndList);\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t\n\tfor ($i=0;$i<size($aSrcCopyIndList);$i++){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$srcVtxInd = $aSrcCopyIndList[$i];\n\t\t$destVtx = $aDestCopyList[$i];\n\t\t\n\t\t//tokenize weight data\n\t\t$aSubData = stringToStringArray($aImpWeightData[$srcVtxInd], \"&\");\n\t\t\n\t\t// cull verts with the same weighting\n\t\tclear($aSrcInfs);\n\t\tclear($aSrcWeights);\n\t\tfor ($j=0;$j<size($aSubData);$j+=2){\n\t\t\t$aSrcInfs[size($aSrcInfs)] = $aSubData[$j];\n\t\t\t$aSrcWeights[size($aSrcWeights)] = float($aSubData[$j+1]);\n\t\t}\n\t\t\t\n\t\t$cullMatch = 0;\n\t\t$aDestInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $destCluster $destVtx`;\n\t\t$aDestWeights = `skinPercent -ib .00000000000000000000000000000000000000001 -q -v $destCluster $destVtx`;\n\t\t\n\t\tif (size($aSrcInfs) == size($aDestInfs)){\n\t\t\tfor ($j=0;$j<size($aSrcInfs);$j++){\n\t\t\t\t$tInd = abWlStrGetPos($aSrcInfs[$j], $abWlSrcInf);\n\t\t\t\tif ($tInd >= 0){\n\t\t\t\t\t$conInf = $destConLU[$tInd];\n\t\t\t\t\tif (abWlStrGetPos($conInf, $aDestInfs) != -1){\n\t\t\t\t\t\tif ($aSrcWeights[$tInd] - $aDestWeights[$tInd] < $cullMatchTol){\n\t\t\t\t\t\t\t$cullMatch ++;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// if the weights alreadt match, this vertex can be skipped\n\t\tif ($cullMatch == size($aSrcInfs)){\n\t\t\tcontinue;\n\t\t}else{\n\t\t\t$vertCounter ++;\n\t\t}\n\t\t// done with weight check\n\t\t\n\t\t//get corresponding dest infs to copy to\n\t\t$tvStr = \"\";\n\t\tclear($tCurInfs);\n\t\tfor ($j=0;$j<size($aSubData);$j+=2){\n\t\t\t\n\t\t\t$tSrcInfName = $aSubData[$j];\n\t\t\t$tWeight = float($aSubData[$j+1]);\n\t\t\t\n\t\t\t$destVtxInd = abWlStrGetPos($tSrcInfName, $srcConLU);\n\t\t\tif ($destVtxInd != -1){\n\t\t\t\t$tDestInfName = $destConLU[$destVtxInd];\n\t\t\t\t\n\t\t\t\t$tvStr += \" -tv \"+$tDestInfName+\" \"+$tWeight;\n\t\t\t\t$tCurInfs[size($tCurInfs)] = $tDestInfName;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tif ($tvStr != \"\"){\n\t\t\t$tDestInfsCopy = $abWlDestInf;\n\t\t\t$tDestInfsCopy = stringArrayRemove($tCurInfs, $tDestInfsCopy); //tDestInfsCopy is now all infs on destobj that will be set to 0\n\t\t\tfor ($tDestInfName in $tDestInfsCopy){\n\t\t\t\t$tvStr += \" -tv \"+$tDestInfName+\" 0\";\n\t\t\t}\n\t\t\t\n\t\t\teval(\"skinPercent -nrm 0\"+$tvStr+\" \"+$destCluster+\" \"+$destVtx);\n\t\t\tif($normalize){\n\t\t\t\tskinPercent -nrm 1 -prw .00000000000000000000000000000000000000001 $destCluster $destVtx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tsetAttr ($destCluster+\".normalizeWeights\") $scNormWeights;\n\tfor ($i=0;$i<size($aInitDestLock);$i++){\n\t\tskinCluster -e -inf $destConLU[$i] -lockWeights $aInitDestLock[$i] $destCluster;\n\t}\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n\t\n\tprint (\"Matched \"+(size($aDestCopyList))+\" vert(s).  \"+$vertCounter+\" vertex weight(s) copied\\n\");\n\t\n}\n\n\n\n\n" 
        -enableBackground 0
        -align "center" 
        -label "/*\nabWeightLifter v 1.9\nbrendan ross  06.01.2005\nwww.supercrumbl..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "/*\nabWeightLifter v 1.9\nbrendan ross  06.01.2005\nwww.supercrumbly.com\n\nupdate -- 03.08.05:  Mirror tolerance was too small for copy.  Broke it out into two discreet user configurable variables.\nupdate -- 03.11.05:  Faster on subsequent mirror copies (Keep the script open to avoid having to rebuild the symmetry table).  Added option to show/hide unconnected influences warning dialogue.\nupdate -- 03.15.05:  Better method for copying vertices weighted to individual influences.  Added \"Show Selection Influences\", \"Select Influences\", and \"Include Dest Strays\".  Options mirror direction checkbox now actually does something.\nupdate -- 03.16.05:  Fixed \"Include Dest Strays\" selection bug.  Added \"Deselect Influenced\" button in Influence window.\nupdate -- 03.19.05:  Objects, connections, and symmetry table are now retained for mirror operations when the main UI is closed with the menu bar close button.\nupdate -- 03.21.05:  Added \"Cull Matching Weights\" to prefs.  If enabled matching src/dest vertex weights will be culled from the copy operation; much faster copies when > 60% (wild guess) of the vertex weights match properly.\nupdate -- 03.26.05:  Various bugs fixed.  Option for alphanumeric connection display (if you've got lots of infs).  Weight culling actually works now.\nupdate -- 06.01.05:  Added option to perform a copy like a mirror with \"Mirror Across Origin\" in the \"Copy Vertices Using:\" drop down; plus a few bug tweaks.\nupdate -- 09.23.05:  Fixed Maya 7 fatal error related to alphanumeric connection labels.  Added \"Show SymTable Vertices\" and \"Clear SymTable\" to options.\nupdate -- 06.04.07:  Interface now scales; skinCluster selection bug fixed; Select Influences button now works as expected -- if joints or transforms are selected when clicked, overlapping selection will be hilited in the filter influence list, otherwise selected items in the filter influence list will be selected in the scene; Select Influences window Select Influences button now selects influence transforms which is more useful than highlighting transforms in the source object scrollList.  Added \"Replace Skin\" to Tools menu.  To use it, select two meshes, one skinned the other not.  When you invoke the command, the unskinned mesh will be bound to the influences on the skinned mesh, all weights will be copied, the originally skinned mesh will be unbound and deleted.\nupdate -- 04.14.08:  \"Select Influenced Verts\" is now more sensitive.\nupdate -- 04.16.08:  Added \"Move Weights\" button to UI.  It will move all the weights of the source influence to the destination influence.  You can limit the scope of the operation by selecting vertices on your mesh (otherwise it will act on the entire mesh).  Avoid specifying the same inf in more than one connection at a time (infs connected to themselves are ignored).  Improved symmetry feedback.  A prompt now alerts you if the mesh isn't symmetrical.  SymTable menu items are disabled when there's no symTable data.  \nupdate -- 04.17.08:  Added \"Check Symmetry\", \"Get Symmetry From Selected\" and \"Copy Skin to Mesh\" to tools menu.  \"Check Symmetry\" will check for symmetry for mirror operations on both one object and across objects.  \"Get Symmetry From Selected\" will determine symmetry on your source and destination object (they must be the same) from another copy of the mesh.  This is useful for establishing symmetry when your symmetrical skinned mesh isn't reading as symmetrical because of skin weights (or whatever).  To use \"Copy Skin to Mesh\" you must first select a skinned and (at least partially overlapping) unskinned mesh and then click the menu item.  Once the UI appears you can select some vertices on the skinned mesh to limit which influences get skinned to the target mesh (if you don't select any vertices, the target will be bound to all source's influences).\nupdate -- 06.03.08:  Verts that lie on the origin will now be accounted for when \"Auto Weight Origin Verts\" is enabled in the preferences UI.  Added \"Select Centerline Vertices\" to the Options menu.\nupdate -- 02.06.09:  Added the ability to save and import weights (still no interpolation).   The import will be restricted to any selected verts on the destination mesh.  Improved auto connect and added find and replace fields to the UI for use with auto connecting (ignored in mirror mode).  Also various speed improvements and bug fixes (thanks Jiet).\nupdate -- 09.30.13:  Tweaked abWlReplaceSkin2() to be more reliable; changed name of \"Copy Skin to Mesh\" to \"Bind New Mesh To Skinned Mesh Infs\" so it's more clear.  Added two more search and replace fields to aid in auto-connecting influences.\n\nuse:\n\ngetting me out of a pickle\n\ndirections:\n\nSee help\n*/\n\n\n\nglobal proc string[] abWlBuildSymTable(string $srcObj, string $destObj, int $axis, int $posToNeg, float $tol, int $usePiv, int $checkSym){\n\t// if $checkSym is true, proc will not update the symTable (it will actually delete the current table).  This proc returns $aNonSymVerts;\n\t\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlOriginVts[];\n\tstring $aNegVerts[], $aPosVerts[], $aMidVerts[], $aNonSymVerts[], $aStr[], $vtx, $str;\n\tfloat $aNegVertTrans[], $aPosVertTrans[], $aVtxTrans[], $aVtx2Trans[], $bBox[], $mid, $midOffset, $posOffset, $negOffset, $flt, $progNum, $progDenom;\n\tint $aPosVertsInt[], $aNegVertsInt[], $aInt[], $totVtx, $i, $j, $mod, $prog, $ret;\n\tint $mAxisInd = $axis - 1; //mirror axis index (for xform)\n\tint $axis2Ind = ($mAxisInd + 1) % 3;\n\tint $axis3Ind = ($mAxisInd + 2) % 3;\n\tint $vertCounter = 0;\n\tint $singleObj = ($srcObj == $destObj);\n\t\n\tfloat $progUpdate = 50.0; //what percentage of time (during an operation) does the prog bar update itself\n\t\n\tif ($singleObj){\n\t\tif ($usePiv){\n\t\t\t$aVtxTrans = `xform -q -ws -t $srcObj`;\n\t\t\t$mid = $aVtxTrans[$mAxisInd];\n\t\t}else{\n\t\t\t$bBox = `xform -q -ws -boundingBox $srcObj`;\n\t\t\t$mid = $bBox[$mAxisInd] + (($bBox[($mAxisInd+3)] - $bBox[$mAxisInd])/2);\n\t\t}\n\t}else{\n\t\t$mid = 0;\n\t}\n\t\n\t$aInt = `polyEvaluate -v $srcObj`; \n\t$totVtx = $aInt[0];\n\t\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Sorting\";\n\t$progDenom = $totVtx;\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t\n\tif ($singleObj){\n\t\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\t\n\t\t\t//prog win\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t\t//end prog win\n\t\t\t\n\t\t\t$vtx = $srcObj+\".vtx[\"+$i+\"]\";\n\t\t\t$aVtxTrans = `xform -q -ws -translation $vtx`;\n\t\t\t$midOffset = $aVtxTrans[$mAxisInd] - $mid;\n\t\t\t\n\t\t\tif (abs($midOffset) < $tol){\n\t\t\t\t// it's a mid vertex\n\t\t\t\t$aMidVerts[size($aMidVerts)] = $vtx;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif ($midOffset >= 0){\n\t\t\t\t$aPosVerts[size($aPosVerts)] = $vtx;\n\t\t\t\t$aPosVertsInt[size($aPosVertsInt)] = $i;\n\t\t\t\t$aVtxTrans = `xform -q -ws -t $vtx`;\n\t\t\t\t$aPosVertTrans[size($aPosVertTrans)] = $aVtxTrans[$mAxisInd];\n\t\t\t}else{\n\t\t\t\tif ($midOffset < 0){\n\t\t\t\t\t$aNegVerts[size($aNegVerts)] = $vtx;\n\t\t\t\t\t$aNegVertsInt[size($aNegVertsInt)] = $i;\n\t\t\t\t\t$aVtxTrans = `xform -q -ws -t $vtx`;\n\t\t\t\t\t$aNegVertTrans[size($aNegVertTrans)] = $aVtxTrans[$mAxisInd];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}else{\n\t\t\n\t\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\t\n\t\t\t//prog win\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*50.0;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t\t//end prog win\n\t\t\t\n\t\t\t$vtx = $srcObj+\".vtx[\"+$i+\"]\";\n\t\t\t$aPosVerts[size($aPosVerts)] = $vtx;\n\t\t\t$aPosVertsInt[size($aPosVertsInt)] = $i;\n\t\t}\n\t\t$aInt = `polyEvaluate -v $destObj`; \n\t\tint $totDestVtx = $aInt[0];\n\t\t\n\t\t$progDenom = $totDestVtx;\n\t\t$mod = int(ceil($progDenom/$progUpdate));\n\t\t\n\t\tfor ($i=0;$i<$totDestVtx;$i++){\n\t\t\t\n\t\t\t//prog win\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*50.0 + 50;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t\t//end prog win\n\t\t\t\n\t\t\t$vtx = $destObj+\".vtx[\"+$i+\"]\";\n\t\t\t$aNegVerts[size($aNegVerts)] = $vtx;\n\t\t\t$aNegVertsInt[size($aNegVertsInt)] = $i;\n\t\t}\n\t}\n\t\n\tstring $aPosVertsComp[] = $aPosVerts;\n\tstring $aNegVertsComp[] = $aNegVerts;\n\t\n\tprogressWindow -e -progress 0 -status \"Building Symmetry Table\";\n\t\n\t$progDenom = size($aPosVertsComp);\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t\n\t//now find nonsymverts\n\tfor ($i=0;$i<size($aPosVertsComp);$i++){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = $progNum/$progDenom*100;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$vtx = $aPosVertsComp[$i];\n\t\t$posOffset = ($aPosVertTrans[$i] - $mid);\n\t\tif ($singleObj){\n\t\t\tif ($posOffset < $tol){\n\t\t\t\t$aPosVertsComp[$i] = \"m\";\n\t\t\t\t$vertCounter ++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tfor ($j=0;$j<size($aNegVertsComp);$j++){\n\t\t\tif ($aNegVertsComp[$j] == \"m\") continue;\n\t\t\t$negOffset = $mid - $aNegVertTrans[$j];\n\t\t\tif ($singleObj){\n\t\t\t\tif ($negOffset < $tol){\n\t\t\t\t\t$aNegVertsComp[$j] = \"m\";\n\t\t\t\t\t$vertCounter ++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (abs($posOffset - $negOffset) <= $tol){\n\t\t\t\t$aVtxTrans = `xform -q -ws -t $vtx`;\n\t\t\t\t$aVtx2Trans = `xform -q -ws -t $aNegVertsComp[$j]`;\n\t\t\t\t$test1 = $aVtxTrans[$axis2Ind] - $aVtx2Trans[$axis2Ind];\n\t\t\t\t$test2 = $aVtxTrans[$axis3Ind] - $aVtx2Trans[$axis3Ind];\n\t\t\t\tif (abs($test1) < $tol && abs($test2) < $tol){\n\t\t\t\t\t//match\n\t\t\t\t\t//use this info to build symmetry table\n\t\t\t\t\t$abWlSymTable[size($abWlSymTable)] = $srcObj+\".vtx[\"+$aPosVertsInt[$i]+\"]\";\n\t\t\t\t\t$abWlSymTable[size($abWlSymTable)] = $destObj+\".vtx[\"+$aNegVertsInt[$j]+\"]\";\n\t\t\t\t\t$vertCounter += 2;\n\t\t\t\t\t$aPosVertsComp[$i] = $aNegVertsComp[$j] = \"m\"; //m is for match\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//now strip out \"m\" from $aPosVertsComp and $aNegVertsComp, and we'll have asymmetry\n\t$aStr = {\"m\"};\n\t$aPosVertsComp = stringArrayRemove($aStr, $aPosVertsComp);\n\t$aNegVertsComp = stringArrayRemove($aStr, $aNegVertsComp);\n\t$aNonSymVerts = stringArrayCatenate($aPosVertsComp, $aNegVertsComp);\n\t\n\tif (size($aMidVerts) > 0) $abWlOriginVts = $aMidVerts;\n\t\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n\t\n\tif (!$checkSym){\n\t\tif (size($aPosVertsComp)+size($aNegVertsComp) > 0){\n\t\t\t//object is not symmetrical\n\t\t\tstring $result = `confirmDialog -title \"Confirm\" -message \"The base geometry is not symmetrical.  Not all weights\\ncan be mirrored.  If you think your mesh is symmetrical,\\ntry lowering the mirror tolerance in the options window.\\n\\nKeep the symmetry data?\" -button \"Yes\" -button \"No\" -defaultButton \"No\" -cancelButton \"No\" -dismissString \"No\"`;\n\t\t\tif ($result == \"No\"){\n\t\t\t\tclear($abWlSymTable);\n\t\t\t\tclear($abWlOriginVts);\n\t\t\t\t$vertCounter = 0;\n\t\t\t\tselect -r $aNonSymVerts;\n\t\t\t}\n\t\t}\n\t}else{\n\t\tclear($abWlSymTable);\n\t\tclear($abWlOriginVts);\n\t}\n\t\n\treturn $aNonSymVerts;\n\t\n}\n\n\nglobal proc abWlMirrorWeights(string $srcObj, string $destObj, int $axis, int $posToNeg, float $tol, int $usePiv, int $normalize){\n\t//$abWlSymTable goes a little like {obj.vtx[pos mAxis 1], obj.vtx[neg mAxis 1]}\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlOriginVts[];\n\tglobal string $abWlPrefs[];\n\tstring $aNegVerts[], $aPosVerts[], $vtxCopyList[], $vtx, $str, $aStr[], $aTemp[];\n\tint $i, $j, $k, $vtxNum;\n\tint $weightOriginVts = $abWlPrefs[12];\n\tint $originVtModCounter = 0;\n\t\n\tint $buildTable = (size($abWlSymTable) == 0) ? true : false; //flag -> true if need to build table\n\tif ($buildTable){\n\t\tabWlBuildSymTable($srcObj, $destObj, $axis, $posToNeg, $tol, $usePiv, false);\n\t}\n\t\n\tif (size($abWlSymTable) == 0){\n\t\twarning \"The symmetry table is empty.  Unable to proceed\";\n\t\treturn;\n\t}\n\t\n\t//copy weights from one side to the other\n\tstring $aSelVts[] = `filterExpand -sm 31`;\n\tif (size($aSelVts) == 0){\n\t\t//$aVtsToCopy = ($posToNeg) ? $aPosVerts : $aNegVerts;\n\t\tif ($posToNeg){\n\t\t\t$vtxCopyList = $abWlSymTable;\n\t\t}else{\n\t\t\t//reverse table\n\t\t\tfor ($i=0;$i<size($abWlSymTable);$i+=2){\n\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $abWlSymTable[$i+1];\n\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $abWlSymTable[$i];\n\t\t\t}\n\t\t}\n\t}else{\n\t\tfor ($i=0;$i<size($abWlSymTable);$i+=2){\n\t\t\t$aPosVerts[size($aPosVerts)] = $abWlSymTable[$i];\n\t\t\t$aNegVerts[size($aNegVerts)] = $abWlSymTable[$i+1];\n\t\t}\n\t\t\n\t\t//make sure $aSelVts are all on the copy side of the object\n\t\tstring $copySideVts[] = ($posToNeg) ? $aPosVerts : $aNegVerts;\n\t\tstring $myIntersector = `stringArrayIntersector`;\n\t\tstringArrayIntersector -edit -intersect $copySideVts $myIntersector;\n\t\tstringArrayIntersector -edit -intersect $aSelVts $myIntersector;\n\t\tstring $aVtsToCopy[] = `stringArrayIntersector -query $myIntersector`;\n\t\tdeleteUI $myIntersector;\n\t\t\n\t\t//make the copy list\n\t\tstring $mirrorVtx;\n\t\tfor ($i=0;$i<size($aVtsToCopy);$i++){\n\t\t\t$mirrorVtx = abWlGetSymVtx($aVtsToCopy[$i]);\n\t\t\tif ($mirrorVtx != \"\"){\n\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $aVtsToCopy[$i];\n\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $mirrorVtx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tabWlWeightCopy($vtxCopyList, $normalize);\n\t\n\t// take care of origin vertices if this is a single mesh mirror\n\t\n\tif ($weightOriginVts && size($abWlOriginVts) > 0 && $srcObj == $destObj){\n\t\t\n\t\tstring $aConnEdges[], $aConnVerts[], $cmd;\n\t\tstring $cluster = abWlGetSkinCluster($destObj);\n\t\tfloat $aWeights[], $aTempWeights[], $denom;\n\t\tstring $aInfs[] = `skinCluster -q -inf $cluster`;\n\t\tint $matchCounter;\n\t\t\n\t\t// make origin vert int array for easy indexing (currently $abWlOriginVts are strings)\n\t\tint $aOriginVtsInt[];\n\t\tfor ($i=0;$i<size($abWlOriginVts);$i++){\n\t\t\t\n\t\t\t$str = `match \".vtx\\[[0-9]+\\]\" $abWlOriginVts[$i]`;\n\t\t\t$str = `match \"[0-9]+\" $str`;\n\t\t\t\n\t\t\t$aOriginVtsInt[size($aOriginVtsInt)] = int($str);\n\t\t\t\n\t\t}\n\t\t\n\t\tfor ($i=0;$i<size($abWlOriginVts);$i++){\n\t\t\t\n\t\t\tclear($aConnVerts);\n\t\t\tclear($aConnEdges);\n\t\t\tclear($aWeights);\n\t\t\tclear($aTempWeights);\n\t\t\t\n\t\t\t// get current vtx number\n\t\t\t$vtxNum = $aOriginVtsInt[$i];\n\t\t\t\n\t\t\t// first get connected verts for each origin vtx\n\t\t\t$aTemp = `polyInfo -vertexToEdge $abWlOriginVts[$i]`;\n\t\t\ttokenize($aTemp[0], $aStr);\n\t\t\t\n\t\t\t// get connected edges\n\t\t\tfor ($j=2;$j<size($aStr);$j++) $aConnEdges[size($aConnEdges)] = $destObj+\".e[\"+$aStr[$j]+\"]\"; \n\t\t\t\n\t\t\tif (size($aConnEdges) == 0) continue;\n\t\t\t\n\t\t\t// get connected verts\n\t\t\tfor ($j=0;$j<size($aConnEdges);$j++){\n\t\t\t\t\n\t\t\t\t$aTemp = `polyInfo -edgeToVertex $aConnEdges[$j]`;\n\t\t\t\ttokenize($aTemp[0], $aStr);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor ($k=2;$k<size($aStr);$k++){\n\t\t\t\t\tif (int($aStr[$k]) != $vtxNum){\n\t\t\t\t\t\tif ( `match \"[0-9]*\" $aStr[$k]` != \"\"){ \n\t\t\t\t\t\t\t// throw out other origin verts\n\t\t\t\t\t\t\tif (abWlIntGetPos(int($aStr[$k]), $aOriginVtsInt) == -1){\n\t\t\t\t\t\t\t\t$aConnVerts[size($aConnVerts)] = $destObj+\".vtx[\"+$aStr[$k]+\"]\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t// average connected weights in common\n\t\t\tfor ($j=0;$j<size($aConnVerts);$j++){\n\t\t\t\t\n\t\t\t\tif ($j == 0){\n\t\t\t\t\t$aWeights = `skinPercent -query -value $cluster $aConnVerts[$j]`;\n\t\t\t\t}else{\n\t\t\t\t\t$aTempWeights = `skinPercent -query -value $cluster $aConnVerts[$j]`;\n\t\t\t\t\tfor ($k=0;$k<size($aWeights);$k++) $aWeights[$k] = $aWeights[$k] + $aTempWeights[$k];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$denom = float(size($aConnVerts));\n\t\t\t\n\t\t\tfor ($j=0;$j<size($aWeights);$j++) $aWeights[$j] = $aWeights[$j]/$denom;\n\t\t\t\n\t\t\t// skinPercent\n\t\t\tif (size($aInfs) == size($aWeights)){\n\t\t\t\t\n\t\t\t\t// check existing weights against $aWeights\n\t\t\t\t$aTempWeights = `skinPercent -query -value $cluster $abWlOriginVts[$i]`;\n\t\t\t\t$matchCounter = 0;\n\t\t\t\t\n\t\t\t\tfor ($j=0;$j<size($aTempWeights);$j++){\n\t\t\t\t\tif (abs($aTempWeights[$j] - $aWeights[$j]) < $tol) $matchCounter++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// if this vert's weights are already where we want them then skip it\n\t\t\t\tif ($matchCounter == size($aWeights)) continue;\n\t\t\t\t\n\t\t\t\t//adjust weights\t\t\t\t\n\t\t\t\t$cmd = \"skinPercent -normalize \"+$normalize;\n\t\t\t\tfor ($j=0;$j<size($aInfs);$j++){\n\t\t\t\t\t$cmd += \" -tv \"+$aInfs[$j]+\" \"+$aWeights[$j];\n\t\t\t\t}\n\t\t\t\t$cmd += \" \"+$cluster+\" \"+$abWlOriginVts[$i];\n\t\t\t\teval($cmd);\n\t\t\t\t$originVtModCounter++;\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\t// done with origin verts\n\t\n\tstring $msgStr;\n\t$msgStr = ((size($vtxCopyList))/2)+\" vertex weight(s) copied.\";\n\tif ($originVtModCounter > 0) $msgStr += \"  \"+$originVtModCounter+\" origin vertex weight(s) modified.\";\n\t\n\tprint $msgStr;\n\t\n}\n\n\nglobal proc string[] abWlCullMatchingWeights(string $aVts[]){\n\t//$aVts is array of matching verts (src, dest) on same or different objects (mirror or copy) -- returns only verts with non matching weights\n\t\n\tstring $ret[], $srcInfs[], $destInfs[], $srcVtx, $destVtx, $conInf;\n\tint $i, $j, $match, $tInd;\n\t\n\tstring $srcObj = `textField -q -text soFld`;\n\tstring $destObj = `textField -q -text doFld`;\n\tstring $srcCluster = abWlGetSkinCluster($srcObj);\n\tstring $destCluster = ($srcObj != $destObj) ? abWlGetSkinCluster($destObj) : $srcCluster;\n\tstring $srcInfsStr, $destInfsStr, $srcComp[], $destComp[];\n\tfloat $aSrcWeights[], $aDestWeights[];\n\tfloat $matchTol = .0000000001;\n\t\n\t//build connection arrays for faster lookup\n\tglobal string $abWlSrcInf[], $abWlDestInf[];\n\tstring $destConLU[], $inf;\n\tfor ($i=0;$i<size($abWlSrcInf);$i++){\n\t\t$tInd = abWlGetConnectedInf($i, -1);\n\t\tif ($tInd >= 0) $destConLU[$i] = $abWlDestInf[$tInd];\n\t}\n\t\n\tint $mod, $prog;\n\tfloat $flt, $progNum, $progDenom;\n\tfloat $progUpdate = 50.0;\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Culling Matching Weights\";\n\t$progDenom = size($aVts);\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t\n\tfor ($i=0;$i<size($aVts);$i+=2){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$match = 0;\n\t\t$srcVtx = $aVts[$i];\n\t\t$destVtx = $aVts[$i+1];\n\t\t$srcInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $srcCluster $srcVtx`;\n\t\t$aSrcWeights = `skinPercent -ib .00000000000000000000000000000000000000001 -q -v $srcCluster $srcVtx`;\n\t\t$destInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $destCluster $destVtx`;\n\t\t$aDestWeights = `skinPercent -ib .00000000000000000000000000000000000000001 -q -v $destCluster $destVtx`;\n\t\t\n\t\tif (size($srcInfs) == size($destInfs)){\n\t\t\tfor ($j=0;$j<size($srcInfs);$j++){\n\t\t\t\t$tInd = abWlStrGetPos($srcInfs[$j], $abWlSrcInf);\n\t\t\t\tif ($tInd >= 0){\n\t\t\t\t\t$conInf = $destConLU[$tInd];\n\t\t\t\t\tif (abWlStrGetPos($conInf, $destInfs) != -1){\n\t\t\t\t\t\t//if (`skinPercent -t ($srcInfs[$j]) -q -v $srcCluster $srcVtx` - `skinPercent -t $conInf -q -v $destCluster $destVtx` < $matchTol){\n\t\t\t\t\t\tif ($aSrcWeights[$tInd] - $aDestWeights[$tInd] < $matchTol){\n\t\t\t\t\t\t\t$match ++;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($match != size($srcInfs)){\n\t\t\t$ret[size($ret)] = $srcVtx;\n\t\t\t$ret[size($ret)] = $destVtx;\n\t\t}\n\t}\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n\tprint (\"Culled \"+(size($aVts)-size($ret))+\" verts with symmetrical weighting from selection\\n\");\n\treturn $ret;\n}\n\n\nglobal proc string[] abWlStrArrayCatenateUnique(string $array1[], string $array2[]){\n\t//combines two string arrays culling duplicate values\n\t\n\tstring $ret[] = stringArrayCatenate($array1, $array2);\n\t$ret = stringArrayRemoveDuplicates($ret);\n\tselect -r $array2;\t\n\treturn $ret;\n}\n\n\nglobal proc abWlMoveWeights(){\n\t// called from move weights button in the UI -- calls abWlReplaceWeights if all is good to go\n\t\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tstring $obj = `textField -q -text \"soFld\"`;\n\tstring $aSelVts[];\n\t\n\t// make infTable\n\tint $i;\n\tstring $aInfTable[];\n\t\n\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t\n\t\t$aInfTable[size($aInfTable)] = $abWlSrcInf[$abWlInfConnections[$i]];\n\t\t$aInfTable[size($aInfTable)] = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t}\n\t\n\tif (size($aInfTable) == 0){\n\t\twarning \"Make some connections between influences and try again\";\n\t\treturn;\n\t}\n\t\n\tstring $aHilite[] = `ls -hilite`;\n\tif (size($aHilite) == 1 && $aHilite[0] == $obj){\n\t\t$aSelVts = `filterExpand -sm 31`;\n\t}else if (size($aHilite) > 1){\n\t\twarning \"Multiple objects are in component mode.  Select vertices on your source mesh to limit the move operation.  Unable to proceed.\";\n\t\treturn;\n\t}\n\t\n\tabWlReplaceWeights($obj, $aInfTable, $aSelVts);\n\t\n}\n\n\nglobal proc abWlReplaceWeights(string $obj, string $aInfTable[], string $aVts[]){\n\t// operates on a single object ($srcObj = $destObj), instead of a mirror copy this proc takes all weights of a source inf and move them to the dest inf\n\t// $aInfTable is in the form of {$srcInf, $destInf, $src2Inf, $dest2Inf}\n\t// confined to selected ($aVts) vertices.  If $aVts is empty it uses the entire object.\n\t\n\tif (!objExists($obj)){\n\t\twarning ($obj+\" doesn't exist.\");\n\t\treturn;\n\t}\n\t\n\tstring $cluster = abWlGetSkinCluster($obj);\n\t\n\tif ($cluster == \"\"){\n\t\twarning ($obj+\" is not a skinned mesh\");\n\t\treturn;\n\t}\n\t\n\tint $i, $aInt[], $totVts;\n\tstring $srcInf, $destInf, $aInfVts[], $aSrcInfVts[], $vtx;\n\tfloat $aSrcWeight, $aDestWeight;\n\tint $infCounter = 0;\n\tint $vtxCounter = 0;\n\t\n\t// fill $aVts if empty\n\tif (size($aVts) == 0){\n\t\t\n\t\t$aInt = `polyEvaluate -v $obj`;\n\t\t$totVts = $aInt[0];\n\t\t\n\t\tstring $vtxStr = $obj+\".vtx[\";\n\t\t\n\t\tfor ($i=0;$i<$totVts;$i++) $aVts[size($aVts)] = $vtxStr+$i+\"]\";\n\t}\n\t\n\t// iterate through infs and intersect inf verts with aVts to create selection to work on\n\tstring $myIntersector = `stringArrayIntersector`;\n\t\n\tfor ($i=0;$i<size($aInfTable);$i+=2){\n\t\t\n\t\t$srcInf = $aInfTable[$i];\n\t\t$destInf = $aInfTable[$i+1];\n\t\t\n\t\tif (!objExists($srcInf) || !objExists($destInf) || $srcInf == $destInf) continue;\n\t\t\n\t\tstringArrayIntersector -edit -reset $myIntersector;\n\t\t\n\t\t$aSrcInfVts = abWlGetAffectedVertsByInf($obj, {$srcInf});\n\t\t\n\t\tstringArrayIntersector -edit -intersect $aVts $myIntersector;\n\t\tstringArrayIntersector -edit -intersect $aSrcInfVts $myIntersector;\n\t\t\n\t\t$aInfVts = `stringArrayIntersector -query $myIntersector`;\n\t\t\n\t\tfor ($vtx in $aInfVts){\n\t\t\t// move the weights from srcInf to destInf\n\t\t\t\n\t\t\t$aSrcWeight = `skinPercent -transform $srcInf -query $cluster $vtx`;\n\t\t\t$aDestWeight = `skinPercent -transform $destInf -query $cluster $vtx`;\n\t\t\t$aDestWeight += $aSrcWeight;\n\t\t\t\n\t\t\t// set weights\n\t\t\tskinPercent -transformValue $srcInf 0 -transformValue $destInf $aDestWeight $cluster $vtx;\n\t\t\t\n\t\t\t$vtxCounter++;\n\t\t}\n\t\t$infCounter++;\n\t}\n\t\n\tdeleteUI $myIntersector;\n\t\n\tstring $pairStr = ($infCounter == 1) ? \"pair\" : \"pairs\";\n\tstring $weightStr = ($vtxCounter == 1) ? \"weight\" : \"weights\";\n\tprint (\"Moved \"+$vtxCounter+\" \"+$weightStr+\" between \"+$infCounter+\" influence \"+$pairStr+\".\\n\");\n\t\n}\n\n\nglobal proc abWl2MeshWeightCopy(string $srcObj, string $destObj, float $tol, int $normalize, int $copyType){\n\t//sets up vertCopyList and sends it to abWlWeightCopy for mesh to mesh copies\n\t//mode is 1 worldSpace, 2 objectSpace, 3 vertexNum\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSymTable[];\n\tstring $destVtx, $srcVtx;\n\tint $i, $j, $k;\n\tint $aInt[] = `polyEvaluate -v $srcObj`;\n\tint $totSrcVts = $aInt[0];\n\t$aInt = `polyEvaluate -v $destObj`;\n\tint $totDestVts = $aInt[0];\n\tfloat $aFlt[];\n\tfloat $progUpdate = 50.0;\n\t\n\tstring $aSrcVts[];\n\tfor ($i=0;$i<$totSrcVts;$i++){\n\t\t$aSrcVts[size($aSrcVts)] = $srcObj+\".vtx[\"+$i+\"]\";\n\t}\n\tstring $aDestVts[];\n\tfor ($i=0;$i<$totDestVts;$i++){\n\t\t$aDestVts[size($aDestVts)] = $destObj+\".vtx[\"+$i+\"]\";\n\t}\n\t\n\tstring $aSelVts[] = `filterExpand -sm 31`;\n\tif (size($aSelVts) == 0){\n\t\t$aSelVts = $aSrcVts;\n\t}\n\t\n\t//make sure only srcObj verts are selected\n\tstring $myIntersector = `stringArrayIntersector`;\n\tstringArrayIntersector -edit -intersect $aSrcVts $myIntersector;\n\tstringArrayIntersector -edit -intersect $aSelVts $myIntersector;\n\tstring $aVtsToCopy[] = `stringArrayIntersector -query $myIntersector`;\n\tdeleteUI $myIntersector;\n\t\n\tint $totVtsToCopy = size($aVtsToCopy);\n\tstring $vtxCopyList[];\n\t\n\tif ($copyType == 1 || $copyType == 2){\n\t\t\n\t\tint $matchInd;\n\t\tfloat $floatMatchFlag = -666666.0;\n\t\t\n\t\tstring $space = ($copyType == 1) ? \"-ws\" : \"-os\";\n\t\t\n\t\tint $mod;\n\t\tint $prog;\n\t\tfloat $flt;\n\t\tfloat $progNum;\n\t\t\n\t\twaitCursor -state on;\n\t\tprogressWindow -title \"Working\" -progress 0 -status \"Checking Overlap\";\n\t\t$progDenom = $totVtsToCopy;\n\t\t$flt = ceil($progDenom/$progUpdate);\n\t\t$mod = $flt;\n\t\t\n\t\t//make lookup for destObj\n\t\tfloat $destXTransLU[], $destYTransLU[], $destZTransLU[];\n\t\tfor ($i=0;$i<$totDestVts;$i++){\n\t\t\t$destVtx = $aDestVts[$i];\n\t\t\t$aFlt = eval(\"xform \"+$space+\" -q -translation \"+$destVtx);\n\t\t\t$destXTransLU[size($destXTransLU)] = $aFlt[0];\n\t\t\t$destYTransLU[size($destYTransLU)] = $aFlt[1];\n\t\t\t$destZTransLU[size($destZTransLU)] = $aFlt[2];\n\t\t}\n\t\t\n\t\tfor ($i=0;$i<$totVtsToCopy;$i++){\n\t\t\t\n\t\t\t//prog win\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t\t//end prog win\n\t\t\t\n\t\t\t$srcVtx = $aVtsToCopy[$i];\n\t\t\t$aFlt = eval(\"xform \"+$space+\" -q -translation \"+$srcVtx);\n\t\t\tfor ($j=0;$j<$totDestVts;$j++){\n\t\t\t\tif ($aFlt[0] == $floatMatchFlag){ //this might slow things down, I'll have to check\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (abs($destXTransLU[$j] - $aFlt[0]) < $tol){\n\t\t\t\t\t//passed the first gate\n\t\t\t\t\tif (abs($destYTransLU[$j] - $aFlt[1]) < $tol){\n\t\t\t\t\t\t//second, and...\n\t\t\t\t\t\tif (abs($destZTransLU[$j] - $aFlt[2]) < $tol){\n\t\t\t\t\t\t\t//match!\n\t\t\t\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $srcVtx;\n\t\t\t\t\t\t\t$vtxCopyList[size($vtxCopyList)] = $aDestVts[$j];\n\t\t\t\t\t\t\t$destXTransLU[$j] = $destYTransLU[$j] = $destZTransLU[$j] = $floatMatchFlag;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tprogressWindow -endProgress;\n\t\twaitCursor -state off;\n\t\t\n\t}else if ($copyType == 3){\n\t\t//copy by vtx (I doubt anyone but me will ever need this)\n\t\tint $srcObjStrOffset = size($srcObj)+1;\n\t\tint $srcVtxStrSize;\n\t\tfor ($i=0;$i<$totVtsToCopy;$i++){\n\t\t\t$srcVtx = $aVtsToCopy[$i];\n\t\t\t$srcVtxStrSize = size($srcVtx);\n\t\t\t$destVtx = $destObj + `substring $srcVtx $srcObjStrOffset $srcVtxStrSize`;\n\t\t\t$vtxCopyList[size($vtxCopyList)] = $srcVtx;\n\t\t\t$vtxCopyList[size($vtxCopyList)] = $destVtx;\n\t\t}\n\t}\n\t\n\tabWlWeightCopy($vtxCopyList, $normalize);\n\t\n\tprint (((size($vtxCopyList))/2)+\" vertex weight(s) copied\\n\");\n}\n\n\nglobal proc abWlWeightCopy(string $vtsCopyList[], int $normalize){\n\t//here's where the heavy lifting is done -- pass a paired list of verts [pair1src.vtx, pair1dest.vtx, pair2src.vtx, pair2dest.vtx] and this proc will copy infs according to the infconnectionlist\n\t//if a src inf isn't connected to a dest inf, it won't be copied, it will be normalized though, so the weights won't be symmetrical\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlPrefs[];\n\tint $i, $j;\n\t\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tstring $destObj = `textField -q -text \"doFld\"`;\n\tstring $srcCluster = abWlGetSkinCluster($srcObj);\n\tstring $destCluster = abWlGetSkinCluster($destObj);\n\tstring $srcVtx, $destVtx, $tSrcInfs[], $tCurInfs[], $tDestInfsCopy[], $tvStr;\n\tfloat $tWeight;\n\tfloat $progUpdate = 50.0;\n\tint $destVtxInd;\n\t\n\tint $utInt = $abWlPrefs[10];\n\tif ($utInt) $vtsCopyList = abWlCullMatchingWeights($vtsCopyList);\n\t\n\tstring $tInfName, $tSrcInfName, $tDestInfName;\n\tstring $srcConLU[]; //source connection lookup\n\tstring $destConLU[]; //dest connection lookup\n\tstring $aInfsCopyList[]; //convert connections list from int to string\n\tint $aInitDestLock[]; //stores init state of lockweights\n\t\n\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t$tDestInfName = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t\t$aInitDestLock[size($aInitDestLock)] = `skinCluster -inf $tDestInfName -q -lockWeights $destCluster`;\n\t\tskinCluster -e -inf $tDestInfName -lockWeights 0 $destCluster; //make sure all infs are unlocked so weights can be pruned to 0\n\t\t\n\t\t//make 2 lists to speed lookup of connections -- first with connected srcnames, second with destnames at corresponding indices\n\t\t$srcConLU[size($srcConLU)] = $abWlSrcInf[$abWlInfConnections[$i]];\n\t\t$destConLU[size($destConLU)] = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t}\n\t\n\tint $scNormWeights = `getAttr ($destCluster+\".normalizeWeights\")`;\n\tif ($scNormWeights == (1-$normalize)){\n\t\tsetAttr ($destCluster+\".normalizeWeights\") $normalize;\n\t}\n\t\n\tint $mod;\n\tint $prog;\n\tfloat $flt;\n\tfloat $progNum;\n\tfloat $progDenom;\n\t\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Copying Weights\";\n\t$progDenom = size($vtsCopyList);\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t//string $testDestVtx[];\n\tfor ($i=0;$i<size($vtsCopyList);$i+=2){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$srcVtx = $vtsCopyList[$i];\n\t\t$destVtx = $vtsCopyList[$i+1];\n\t\t//get infs on src vtx\n\t\t\n\t\t$tSrcInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -transform $srcCluster $srcVtx`;\n\t\t\n\t\t//get corresponding dest infs to copy to\n\t\t$tvStr = \"\";\n\t\tclear($tCurInfs);\n\t\tfor ($j=0;$j<size($tSrcInfs);$j++){\n\t\t\t$tSrcInfName = $tSrcInfs[$j];\n\t\t\t$destVtxInd = abWlStrGetPos($tSrcInfName, $srcConLU);\n\t\t\tif ($destVtxInd != -1){\n\t\t\t\t$tDestInfName = $destConLU[$destVtxInd];\n\t\t\t\t$tWeight = `skinPercent -transform $tSrcInfName -q $srcCluster $srcVtx`;\n\t\t\t\t$tvStr += \" -tv \"+$tDestInfName+\" \"+$tWeight;\n\t\t\t\t$tCurInfs[size($tCurInfs)] = $tDestInfName;\n\t\t\t}\n\t\t}\n\t\tif ($tvStr != \"\"){\n\t\t\t$tDestInfsCopy = $abWlDestInf;\n\t\t\t$tDestInfsCopy = stringArrayRemove($tCurInfs, $tDestInfsCopy); //tDestInfsCopy is now all infs on destobj that will be set to 0\n\t\t\tfor ($tDestInfName in $tDestInfsCopy){\n\t\t\t\t$tvStr += \" -tv \"+$tDestInfName+\" 0\";\n\t\t\t}\n\t\t\t\n\t\t\teval(\"skinPercent -nrm 0\"+$tvStr+\" \"+$destCluster+\" \"+$destVtx);\n\t\t\tif($normalize){\n\t\t\t\tskinPercent -nrm 1 -prw .00000000000000000000000000000000000000001 $destCluster $destVtx;\n\t\t\t}\n\t\t}\n\t}\n\t//select -r $testDestVtx;\n\tsetAttr ($destCluster+\".normalizeWeights\") $scNormWeights;\n\tfor ($i=0;$i<size($aInitDestLock);$i++){\n\t\tskinCluster -e -inf $destConLU[$i] -lockWeights $aInitDestLock[$i] $destCluster;\n\t}\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n}\n\n\nglobal proc abWlDoIt(){\n\t//copy weights\n\t\n\tglobal string $abWlPrefs[]; //{\"lf_\", \"rt_\", \"3\", \"1\", \"3\"}\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSrcInf[];\n\tint $mirrorAxis = $abWlPrefs[2];\n\tint $mirrorPos2Neg = $abWlPrefs[3];\n\tint $copyType = $abWlPrefs[4];\n\t//int $normalize = ($abWlPrefs[5] == \"1\") ? 1 : 0;\n\tint $normalize = $abWlPrefs[5];\n\tint $ok = false; //true if all src infs have connections\n\tfloat $mTol = $abWlPrefs[6];\n\tfloat $cTol = $abWlPrefs[7];\n\tint $showDialogue = $abWlPrefs[8];\n\tstring $importFileName = $abWlPrefs[13];\n\t\n\tif (size($abWlSrcInf) == (size($abWlInfConnections)/2)){\n\t\t$ok = true;\n\t}else{\n\t\tif (size($abWlInfConnections) > 0){\n\t\t\tif ($showDialogue){\n\t\t\t\tstring $result = `confirmDialog -title \"Confirm\" -message \"At least one source influence is unconnected.\\nThis could lead to lead to funky results.\\n\\nAre you sure you want to proceed?\" -button \"Yes\" -button \"No\" -defaultButton \"No\" -cancelButton \"No\" -dismissString \"No\"`;\n\t\t\t\tif ($result == \"Yes\"){\n\t\t\t\t\t$ok = true;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t$ok = true;\n\t\t\t}\n\t\t}else{\n\t\t\twarning (\"You need to specify at least one connection between a source and destination influence\");\n\t\t}\n\t}\n\t\n\tif (size($abWlInfConnections) > 0 && $ok){\n\t\tstring $srcObj = `textField -q -text \"soFld\"`;\n\t\tstring $destObj = `textField -q -text \"doFld\"`;\n\t\tif ($srcObj != \"\" && $destObj != \"\"){\n\t\t\tif ($srcObj == $destObj || $copyType == 4){\n\t\t\t\t//mirror this object\n\t\t\t\tif ($importFileName == \"\"){\n\t\t\t\t\tabWlMirrorWeights($srcObj, $destObj, $mirrorAxis, $mirrorPos2Neg, $mTol, 1, $normalize);\n\t\t\t\t}else{\n\t\t\t\t\twarning \"Mirror copies aren't supported for imports.\";\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif ($importFileName == \"\"){\n\t\t\t\t\t//copy from $srcObj to $destObj\n\t\t\t\t\tabWl2MeshWeightCopy($srcObj, $destObj, $cTol, $normalize, $copyType);\n\t\t\t\t}else{\n\t\t\t\t\t//impoprt from file to $destObj\n\t\t\t\t\tabWlImportWeights($srcObj, $destObj, $cTol, $normalize, $copyType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nglobal proc string abWlGetSymVtx(string $vtx){\n\t//works with string versions of vtx names (unlike abSymMesh)\n\t\n\tglobal string $abWlSymTable[];\n\t\n\tstring $mVtx = \"\";\n\tint $i;\n\t\n\tfor ($i=0;$i<size($abWlSymTable);$i++){\n\t\tif ($vtx == $abWlSymTable[$i]){\n\t\t\t//match\n\t\t\tif (($i % 2) == 0){\n\t\t\t\t//even number, match is record above (it's a positive vert)\n\t\t\t\t$mVtx = $abWlSymTable[$i+1];\n\t\t\t}else{\n\t\t\t\t$mVtx = $abWlSymTable[$i-1];\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $mVtx;\n}\n\n\nglobal proc abWlAutoConnect(){\n\t//attempts to connect items in src and dest pane\n\t\n\tglobal string $abWlPrefs[];\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tint $autoConnections[], $i, $j, $srcInd, $destInd;\n\tstring $infName, $conInfName; //connected (potential) inf name\n\tstring $lp = $abWlPrefs[0];\n\tstring $rp = $abWlPrefs[1];\n\tstring $abWlDestInfLeaves[];\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tstring $destObj = `textField -q -text \"doFld\"`;\n\t\n\tstring $find = $abWlPrefs[14];\n\tstring $replace = $abWlPrefs[15];\n\tstring $find2 = $abWlPrefs[16];\n\tstring $replace2 = $abWlPrefs[17];\n\tstring $find3 = $abWlPrefs[18];\n\tstring $replace3 = $abWlPrefs[19];\n\t\n\tint $lpSize = size($lp);\n\tint $rpSize = size($rp);\n\tint $connectCounter = 0;\n\tint $noConnectCounter = 0;\n\t\n\t//run through srcInf array attempting to match with items from destInf array\n\t\n\tfor ($i=0;$i<size($abWlDestInf);$i++){\n\t\t$abWlDestInfLeaves[size($abWlDestInfLeaves)] = `match \"[a-zA-Z0-9_]+$\" $abWlDestInf[$i]`;\n\t}\n\t\n\tif ($lp != \"\" && $rp != \"\"){\n\t\tfor ($i=0;$i<size($abWlSrcInf);$i++){\n\t\t\t$infName = `match \"[a-zA-Z0-9_]+$\" $abWlSrcInf[$i]`;\n\t\t\t//flip inf to other prefix (if it has a prefix)\n\t\t\tif ($srcObj == $destObj || $abWlPrefs[4] == 4){\n\t\t\t\tif (startsWith($infName, $lp)){\n\t\t\t\t\t$conInfName = $rp + endString($infName, size($infName)-$lpSize);\n\t\t\t\t}else if (startsWith($infName, $rp)){\n\t\t\t\t\t$conInfName = $lp + endString($infName, size($infName)-$rpSize);\n\t\t\t\t}else{\n\t\t\t\t\tif (`match $lp $infName` != \"\"){\n\t\t\t\t\t\t$conInfName = substitute($lp, $infName, $rp);\n\t\t\t\t\t}else if (`match $rp $infName` != \"\"){\n\t\t\t\t\t\t$conInfName = substitute($rp, $infName, $lp);\n\t\t\t\t\t}else{\n\t\t\t\t\t\t$conInfName = $infName;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\t$conInfName = $infName;\n\t\t\t}\n\t\t\t\n\t\t\tif ($find != \"\" && $srcObj != $destObj) $conInfName = substitute($find, $conInfName, $replace);\n\t\t\tif ($find2 != \"\" && $srcObj != $destObj) $conInfName = substitute($find2, $conInfName, $replace2);\n\t\t\tif ($find3 != \"\" && $srcObj != $destObj) $conInfName = substitute($find3, $conInfName, $replace3);\n\t\t\t\n\t\t\t$destInd = abWlStrGetPos($conInfName, $abWlDestInfLeaves);\n\t\t\t\n\t\t\tif ($destInd != -1){\n\t\t\t\t$srcInd = $i;\n\t\t\t\tabWlConnectInfs($srcInd, $destInd, 0);\n\t\t\t\t$connectCounter++;\n\t\t\t}else{\n\t\t\t\t$noConnectCounter++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif ($connectCounter == 0){\n\t\tif ($srcObj == $destObj){\n\t\t\tprint \"No mirror connections were made.  Make sure that the left and right prefixes in the options UI match your own naming conventions.\\n\";\n\t\t}else{\n\t\t\tif ($abWlPrefs[4] == 4){\n\t\t\t\tprint \"No mirror connections were made.  Make sure that the left and right prefixes in the options UI match your own naming conventions.\\n\";\n\t\t\t}else{\n\t\t\t\tprint \"No copy connections were made.  If you are trying to mirror weights across the origin, remember to specify \\\"Mirror Across Origin\\\" in the preferences UI.\\n\";\n\t\t\t}\n\t\t}\n\t}else{\n\t\tprint ($connectCounter+\" connection(s) made.  Unable to connect \"+$noConnectCounter+\" influence(s).\\n\");\n\t}\n\t\n}\n\n\nglobal proc abWlClose(){\n\t//close window\n\t\n\tdeleteUI -window abWlWin;\n\tif (`window -exists abWlPrefsWin`){\n\t\tdeleteUI -window abWlPrefsWin;\n\t}\n\tif (`window -exists abWlHelp`){\n\t\tdeleteUI -window abWlHelp;\n\t}\n\tif (`window -exists abWlVertInfs`){\n\t\tdeleteUI -window abWlVertInfs;\n\t}\n\tabWlClearGlobals();\n}\n\n\nglobal proc abWlClearGlobals(){\n\t\n\tglobal int $abWlSelList[];\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlOriginVts[];\n\t\n\tclear($abWlSelList);\n\tclear($abWlSrcInf);\n\tclear($abWlDestInf);\n\tclear($abWlInfConnections);\n\tclear($abWlSymTable);\n\tclear($abWlOriginVts);\n}\n\n\nglobal proc string[] abGetSrc2DestConInfsAsStr(string $aSelInfs[]){\n\t//returns a string of connected infs when given array of src infs\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\t\n\tstring $aConInfs[];\n\tint $tConInf, $i, $j;\n\tfor ($i=0;$i<size($aSelInfs);$i++){\n\t\t//need to find index of cur $aInfs item in $abWlSrcInf\n\t\tfor ($j=0;$j<size($abWlSrcInf);$j++){\n\t\t\tif ($aSelInfs[$i] == $abWlSrcInf[$j]){\n\t\t\t\t$tConInf = abWlGetConnectedInf($j, -1);\n\t\t\t\tif ($tConInf != -1){\n\t\t\t\t\t$aConInfs[size($aConInfs)] = $abWlDestInf[$tConInf];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $aConInfs;\n}\n\n\nglobal proc abWlFWSelVerts(){\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlPrefs[];\n\tglobal int $abWlInfConnections[];\n\tint $aSelInd[] = `textScrollList -q -sii \"fiList\"`;\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tstring $destObj = `textField -q -text \"doFld\"`;\n\tstring $srcCluster = abWlGetSkinCluster($srcObj);\n\tstring $destCluster = abWlGetSkinCluster($destObj);\n\tstring $aSelInfs[], $selVerts[], $aConInfs[];\n\tint $ind;\n\t\n\tfor ($ind in $aSelInd){\n\t\t$aSelInfs[size($aSelInfs)] = $abWlSrcInf[$ind-1];\n\t}\n\t\n\tif (size($aSelInd) != 0){\n\t\tselectMode -object;\n\t\tselect -r $srcObj;\n\t\tselectMode -component;\n\t\tselectType -vertex true;\n\t\t\n\t\tif ($abWlPrefs[9] == true){\n\t\t\t\n\t\t\t//make sure there's a symtable if $srcObj == $destObj\n\t\t\tif ($srcObj == $destObj){\n\t\t\t\tif (size($abWlSymTable) == 0){\n\t\t\t\t\tint $mirrorAxis = $abWlPrefs[2];\n\t\t\t\t\tint $mirrorPos2Neg = $abWlPrefs[3];\n\t\t\t\t\tfloat $mTol = $abWlPrefs[6];\n\t\t\t\t\tabWlBuildSymTable($srcObj, $destObj, $mirrorAxis, $mirrorPos2Neg, $mTol, true, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//get connected infs\n\t\t\t\tif (size($abWlInfConnections) > 0){\n\t\t\t\t\t$aConInfs = abGetSrc2DestConInfsAsStr($aSelInfs);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//check to see if connected\n\t\t\t\tstring $result = \"Yes\";\n\t\t\t\tif (size($aSelInfs) != size($aConInfs)){\n\t\t\t\t\t//at least on sel inf is unconnected\n\t\t\t\t\t$result = `confirmDialog -title \"Confirm\" -message \"Do you want to Auto-connect influences now\\nto include stray influenced vertices in copy?\" -button \"Yes\" -button \"No\" -defaultButton \"Yes\" -cancelButton \"No\" -dismissString \"No\"`;\n\t\t\t\t\tif ($result == \"Yes\"){\n\t\t\t\t\t\tabWlAutoConnect();\n\t\t\t\t\t\t$aConInfs = abGetSrc2DestConInfsAsStr($aSelInfs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstring $aVerts[] = abWlGetAffectedVertsByInf($srcObj, $aSelInfs);\n\t\t\t\tstring $aConVerts[] = abWlGetAffectedVertsByInf($destObj, $aConInfs);\n\t\t\t\t//bring $aConVerts back to source object by mirroring them in this case\n\t\t\t\tstring $mConVerts[]; //mirrored connected verts\n\t\t\t\tstring $vtx;\n\t\t\t\tfor ($i=0;$i<size($aConVerts);$i++){\n\t\t\t\t\t$vtx = abWlGetSymVtx($aConVerts[$i]);\n\t\t\t\t\tif ($vtx != \"\"){\n\t\t\t\t\t\t$mConVerts[size($mConVerts)] = $vtx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$selVerts = abWlStrArrayCatenateUnique($aVerts, $mConVerts);\n\t\t\t}else{\n\t\t\t\t//do copy deal here\n\t\t\t\t$selVerts = abWlGetAffectedVertsByInf($srcObj, $aSelInfs);\n\t\t\t}\n\t\t}else{\n\t\t\t$selVerts = abWlGetAffectedVertsByInf($srcObj, $aSelInfs);\n\t\t}\n\t\tselect -r $selVerts;\n\t}else{\n\t\twarning(\"You must select at least one influence from the \\\"Select Verts By Influence\\\" scroll field\");\n\t}\n}\n\n\nglobal proc string[] abWlGetAffectedVertsByInf(string $obj, string $aInfs[]){\n\t//returns affected verts \"object.vtx[2]\" -- if $includeStrays then connected infs affected verts are also selected and mirrored\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\t\n\tint $aInt[] = `polyEvaluate -v $obj`;\n\tint $totVts = $aInt[0];\n\tint $h, $i, $selectedVts[];\n\tstring $cluster = abWlGetSkinCluster($obj);\n\tstring $ret[], $aCurVtxInfs[], $vtx;\n\t\n\tif ($cluster != \"\"){\n\t\t\t\t\n\t\tfor ($i=0;$i<$totVts;$i++){\n\t\t\t\t\t\t\n\t\t\t$vtx = $obj+\".vtx[\"+$i+\"]\";\n\t\t\t$aCurVtxInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -transform $cluster $vtx`;\n\t\t\tfor ($h=0;$h<size($aInfs);$h++){\n\t\t\t\t$inf = $aInfs[$h];\n\t\t\t\tif (abWlStrGetPos($inf, $aCurVtxInfs) != -1){\n\t\t\t\t\t$ret[size($ret)] = $vtx;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\nglobal proc abWlShowSrcListItems(int $aIndsToShow[]) {\n\t//hides or shows items in \"soInfFld\" based on passed array of indices -- empty array shows all\n\t\n\tglobal string $abWlSrcInf[];\n\tstring $infName;\n\tint $i;\n\tint $ind;\n\t\n\ttextScrollList -e -ra \"soInfList\";\n\t\n\tif (size($aIndsToShow) > 0){\n\t\tfor ($i=0;$i<size($aIndsToShow);$i++){\n\t\t\t$ind = $aIndsToShow[$i];\n\t\t\tif (abWlIntGetPos($ind, $aIndsToShow) != -1){\n\t\t\t\t$infName = `match \"[a-zA-Z0-9_]+$\" $abWlSrcInf[$ind]`;\n\t\t\t\ttextScrollList -e -append $infName \"soInfList\";\n\t\t\t}\n\t\t}\n\t}else{\n\t\tfor ($i=0;$i<size($abWlSrcInf);$i++){\n\t\t\t$infName = `match \"[a-zA-Z0-9_]+$\" $abWlSrcInf[$i]`;\n\t\t\ttextScrollList -e -append $infName \"soInfList\";\n\t\t}\n\t}\n}\n\n\nglobal proc int abWlStrGetPos(string $str, string $aStr[]){\n\t//returns position of string in array, or -1 if not in array\n\t\n\tint $i;\n\tint $ret = -1;\n\tfor ($i=0;$i<size($aStr);$i++){\n\t\tif ($aStr[$i] == $str){\n\t\t\t$ret = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\nglobal proc int abWlIntGetPos(int $int, int $aInt[]){\n\t//returns position of int in array, or -1 if not in array\n\t\n\tint $i;\n\tint $ret = -1;\n\tfor ($i=0;$i<size($aInt);$i++){\n\t\tif ($aInt[$i] == $int){\n\t\t\t$ret = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\nglobal proc abWlFWSelect(){\n\t//item in Filter textScrollList has been clicked -- want to deselect component selection to avoid confusion when applying filter (it will use selected verts which might not correspond to just selected infs)\n\t\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tselectMode -object;\n\tselect -clear;\n\t//select -r $srcObj;\n}\n\n\nglobal proc string abGetSelSkinnedObject(){\n\t//returns first item in `ls -sl` array\n\t\n\tstring $selObj[];\n\tstring $ret;\n\tstring $sel[] = `ls -sl -o`;\n\tif (size($sel) == 0){\n\t\t$sel = `ls -hl`;\n\t}\n\t$selObj = `filterExpand -sm 12 $sel`; //select only polys\n\tif (size($selObj) > 0){\n\t\tif (size($selObj) > 1){\n\t\t\twarning (\"Select only one item.  \"+$selObj[0]+\" selected -- other objects in selection set ignored\");\n\t\t}\n\t\tif (abWlGetSkinCluster($selObj[0]) != \"\"){\n\t\t\t$ret = $selObj[0];\n\t\t}else{\n\t\t\twarning ($selObj[0]+\" is not a skinned mesh\");\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\nglobal proc string abWlGetSkinCluster(string $obj){\n\t//returns skincluster name on $obj or \"\" if there isn't one\n\t\n\tstring $aStr[];\n\tstring $str;\n\tstring $sc;\n\t\n\t$aStr = `listHistory $obj`;\n\tfor ($str in $aStr){\n\t\tif (`nodeType $str` == \"skinCluster\"){\n\t\t\t$sc = $str;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $sc;\n}\n\n\nglobal proc abWlSelObject(string $cField){\n\t//$cField is name of field that the name of the ui field that this object will be put into\n\t\n\t// make sure a single object is selected\n\tint $selOk = false;\n\t\n\tstring $aSel[] = `ls -sl`;\n\tstring $aHiliteSel[] = `ls -hilite`;\n\t\n\tif (size($aSel) + size($aHiliteSel) <= 1) $selOk = true;\n\t\n\tif (!$selOk){\n\t\tstring $objStr = ($cField == \"soFld\") ? \"source object.\" : \"destination object.\";\n\t\twarning (\"Multiple objects selected.  Unable to specify a \"+$objStr);\n\t\treturn;\n\t}\n\t\n\t// ok, now that that ugly bit of business is done let's continue on, shall we?\n\tstring $selObj = abGetSelSkinnedObject();\n\t\n\tif ($cField == \"soFld\"){\n\t\t\n\t\tabWlSoFldCleanup();\n\t\t\n\t\t//clear infs in selection infs window\n\t\tif (`window -exists abWlVertInfs`) abWlUpdateSelInfList(); \n\t}\n\t\n\tif ($selObj != \"\"){\n\t\ttextField -e -text $selObj $cField;\n\t\tabWlPopulateInfFields($cField, 0, false);\n\t}else{\n\t\ttextField -e -text \"\" $cField;\n\t\tabWlPopulateInfFields($cField, 1, false);\n\t}\n\t\n\tabWlRefreshSoDoBns();\n\t\n}\n\n\nglobal proc abWlSoFldCleanup(){\n\t// cleans up some globals when an object is selected in the soFld\n\t\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlOriginVts[];\n\tglobal string $abWlPrefs[];\n\t\n\tclear($abWlSymTable);\n\tclear($abWlOriginVts);\n\t$abWlPrefs[13] = \"\";\n\t\n}\n\n\nglobal proc abWlRefreshSoDoBns(){\n\t// enables buttons if both so and do fields are filled, otherwise disables them\n\t\n\tint $enable = (`textField -q -text soFld` != \"\" && `textField -q -text doFld` != \"\") ? true : false;\n\tabWlEnableButtons($enable);\n\tabWlVisualizeConnections();\n\t\n}\n\n\nglobal proc abWlEnableButtons(int $enable){\n\t//if $enable, buttons that require src and dest obj fields to be filled are enabled\n\t\n\tglobal string $abWlPrefs[];\n\tstring $importFileName = $abWlPrefs[13];\n\t\n\tif ($enable){\n\t\t//enable options that require both objects selected\n\t\t\n\t\tif ($importFileName == \"\"){\n\t\t\t// objects in both so and do fields\n\t\t\tabWlPopulateCopyList(1);\n\t\t\tbutton -e -en true sivBn;\n\t\t\tbutton -e -en true siBn;\n\t\t\tbutton -e -en true acBn;\n\t\t\tbutton -e -en true ccBn;\n\t\t\tbutton -e -en true actionBn;\n\t\t\tbutton -e -en true ssiBn;\n\t\t}else{\n\t\t\t// if this is an import (file name in soFld)\n\t\t\tabWlPopulateCopyList(0);\n\t\t\tbutton -e -en false sivBn;\n\t\t\tbutton -e -en false siBn;\n\t\t\tbutton -e -en true acBn;\n\t\t\tbutton -e -en true ccBn;\n\t\t\tbutton -e -en true actionBn;\n\t\t\tbutton -e -en false ssiBn;\n\t\t\t\n\t\t}\n\t\t\n\t\tif (`textField -q -text soFld` == `textField -q -text doFld`){\n\t\t\tcheckBox -e -en true isChkBx;\n\t\t\tbutton -e -en true abWlMoveWtsBn;\n\t\t\t\n\t\t\t// enable mirror options, disable copy\n\t\t\tabWlDisablePrefs(0, 1);\n\t\t\tabWlDisablePrefs(1, 0);\n\t\t\t\n\t\t\ttextField -e -en false fndFld;\n\t\t\ttextField -e -en false rplcFld;\n\t\t\ttext -e -en false fndTxt;\n\t\t\ttext -e -en false rplcTxt;\n\t\t\ttextField -e -en false fnd2Fld;\n\t\t\ttextField -e -en false rplc2Fld;\n\t\t\ttext -e -en false fnd2Txt;\n\t\t\ttext -e -en false rplc2Txt;\n\t\t\ttextField -e -en false fnd3Fld;\n\t\t\ttextField -e -en false rplc3Fld;\n\t\t\ttext -e -en false fnd3Txt;\n\t\t\ttext -e -en false rplc3Txt;\n\t\t\t\n\t\t}else{\n\t\t\tcheckBox -e -en false isChkBx;\n\t\t\tbutton -e -en false abWlMoveWtsBn;\n\t\t\t\n\t\t\t// enable copy options, disable mirror\n\t\t\tabWlDisablePrefs(0, 0);\n\t\t\tabWlDisablePrefs(1, 1);\n\t\t\t\n\t\t\ttextField -e -en true fndFld;\n\t\t\ttextField -e -en true rplcFld;\n\t\t\ttext -e -en true fndTxt;\n\t\t\ttext -e -en true rplcTxt;\n\t\t\ttextField -e -en true fnd2Fld;\n\t\t\ttextField -e -en true rplc2Fld;\n\t\t\ttext -e -en true fnd2Txt;\n\t\t\ttext -e -en true rplc2Txt;\n\t\t\ttextField -e -en true fnd3Fld;\n\t\t\ttextField -e -en true rplc3Fld;\n\t\t\ttext -e -en true fnd3Txt;\n\t\t\ttext -e -en true rplc3Txt;\n\t\t}\n\t}else{\n\t\tabWlPopulateCopyList(0);\n\t\tbutton -e -en false sivBn;\n\t\tbutton -e -en false siBn;\n\t\tbutton -e -en false acBn;\n\t\tbutton -e -en false ccBn;\n\t\tbutton -e -en false actionBn;\n\t\tbutton -e -en false ssiBn;\n\t\tbutton -e -en false abWlMoveWtsBn;\n\t\tcheckBox -e -en false isChkBx;\n\t\ttextField -e -en false fndFld;\n\t\ttextField -e -en false rplcFld;\n\t\ttext -e -en false fndTxt;\n\t\ttext -e -en false rplcTxt;\n\t\ttextField -e -en false fnd2Fld;\n\t\ttextField -e -en false rplc2Fld;\n\t\ttext -e -en false fnd2Txt;\n\t\ttext -e -en false rplc2Txt;\n\t\ttextField -e -en false fnd3Fld;\n\t\ttextField -e -en false rplc3Fld;\n\t\ttext -e -en false fnd3Txt;\n\t\ttext -e -en false rplc3Txt;\n\t\t\n\t\t// enable both mirror and copy options\n\t\tabWlDisablePrefs(0, 1);\n\t\tabWlDisablePrefs(1, 1);\n\t}\n}\n\n\nglobal proc abWlPopulateCopyList(int $populate){\n\t//if !$populate then empty the field (I know, it's not consistent with abWlPopulateInfFields)\n\tglobal string $abWlPrefs[];\n\t\n\tstring $importFileName = $abWlPrefs[13];\n\t\n\tif ($populate && $importFileName == \"\"){\n\t\tstring $sc = abWlGetSkinCluster(`textField -q -text soFld`);\n\t\tstring $aInfs[] = `skinCluster -q -influence $sc`;\n\t\tstring $aInfCopy[], $inf;\n\t\t\n\t\ttextScrollList -e -ra fiList;\n\t\tfor ($inf in $aInfs){\n\t\t\t$infLeaf = `match \"[a-zA-Z0-9_]+$\" $inf`;\n\t\t\t$aInfCopy[size($aInfCopy)] = $infLeaf;\n\t\t}\n\t\t\n\t\t// sort the list\n\t\t$aInfCopy = sort($aInfCopy);\n\t\t\n\t\t// populate the text scroll list\n\t\tfor ($inf in $aInfCopy) textScrollList -e -append $inf fiList;\n\t\t\n\t}else{\n\t\ttextScrollList -e -ra fiList;\n\t}\n}\n\n\nglobal proc abWlPopulateInfFields(string $cField, int $dePopulate, int $keepConnections){\n\t//bool $dePopulate true = empty field; $keepConnections true = infconnections not cleared (only called from main ui proc to recapture existing connections)\n\t\n\tglobal int $abWlSelList[];\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal string $abWlPrefs[];\n\tglobal int $abWlInfConnections[]; //array of paired indices with srcIndex always the first of the two (eg. [srcTextScrollList.ind2, srcTextScrollList.ind6])\n\tstring $aInfList[]; //used as reference to get values into correct global array\n\tstring $ctextListFld;\n\tint $selListInd;\n\t\n\tstring $importFileName = $abWlPrefs[13];\n\t\n\tif (!$keepConnections) clear($abWlInfConnections);\n\tif ($cField == \"soFld\"){\n\t\t$ctextListFld = \"soInfList\";\n\t\t$selListInd = 0;\n\t\tclear($abWlSrcInf);\n\t}else{\n\t\t$ctextListFld = \"doInfList\";\n\t\t$selListInd = 1;\n\t\tclear($abWlDestInf);\n\t}\n\t\n\ttextScrollList -e -removeAll $ctextListFld;\n\t\n\tif (!$dePopulate){\n\t\t\n\t\tstring $inf, $infLeaf, $aInfs[];\n\t\t\n\t\tif ($importFileName == \"\" || $cField == \"doFld\"){\n\t\t\t\n\t\t\t// soFld has an object in it -- get infs\n\t\t\tstring $obj = `textField -q -text $cField`;\n\t\t\tstring $sc = abWlGetSkinCluster($obj);\n\t\t\t$aInfs = `skinCluster -q -influence $sc`;\n\t\t\t\n\t\t}else{\n\t\t\t\n\t\t\t// soFld contains an import filePath -- get infs\n\t\t\t$aInfs = abWlGetImportInfs($importFileName);\n\t\t\t\n\t\t}\n\t\t\n\t\t// sort the list\n\t\t$aInfList = sort($aInfs);\n\t\t\n\t\tfor ($inf in $aInfList){\n\t\t\t$infLeaf = `match \"[a-zA-Z0-9_]+$\" $inf`;\n\t\t\ttextScrollList -e -append $infLeaf $ctextListFld;\n\t\t}\n\t\t\n\t\t//unset last selected\n\t\t$abWlSelList[$selListInd] = 0;\n\t\t\n\t\tif ($cField == \"soFld\"){\n\t\t\t$abWlSrcInf = $aInfList;\n\t\t}else{\n\t\t\t$abWlDestInf = $aInfList;\n\t\t}\n\t}\n\t\n}\n\n\nglobal proc int abWlSrcInd2ListPos(int $srcInd){\n\t//send a src array index and this returns its position in textScrollList (or 0 if not in scrollList)\n\t\n\tint $ret = 0;\n\tint $int;\n\t$ret = $srcInd + 1;\n\treturn $ret;\n}\n\n\nglobal proc int abWlListPos2SrcInd(int $slInd){\n\t//send a textScrollList position and this returns its src array index (-1 on not in array)\n\t\n\tint $ret = -1;\n\tint $int;\n\tif ($slInd > 0){\n\t\t$ret = $slInd - 1;\n\t}\n\treturn $ret;\n}\n\n\nglobal proc abWlSelectInfs(string $aInfs[]){\n\t//take any infs in selection and select them in the filter list\n\t\n\tglobal string $abWlSrcInf[];\n\t\n\tstring $myIntersector = `stringArrayIntersector`;\n\tstringArrayIntersector -edit -intersect $aInfs $myIntersector;\n\tstringArrayIntersector -edit -intersect $abWlSrcInf $myIntersector;\n\tstring $infsToSelect[] = `stringArrayIntersector -query $myIntersector`;\n\tdeleteUI $myIntersector;\n\t\n\tint $i, $j, $ind;\n\tstring $selStr;\n\tfor ($i=0;$i<size($abWlSrcInf);$i++){\n\t\t$ind = abWlStrGetPos($abWlSrcInf[$i], $infsToSelect);\n\t\tif ($ind != -1){\n\t\t\t$selStr += \" -sii \"+($i+1);\n\t\t}else{\n\t\t\t$selStr += \" -dii \"+($i+1);\n\t\t}\n\t}\n\t\n\teval(\"textScrollList -e\"+$selStr+\" fiList\");\n}\n\n\nglobal proc abWlScrollListSelect(string $cScrollList){\n\t//called when an item in the scroll list is selected\n\t\n\tglobal int $abWlSelList[]; //[0] is index of last soInfList clicked and [1] is doInfList\n\t\t\n\t//populate array if it doesn't exist\n\tif (size($abWlSelList) == 0){\n\t\t$abWlSelList = {0, 0};\n\t}\n\tint $cSelListPos = ($cScrollList == \"soInfList\") ? 0 : 1;\n\t\t\n\tint $scrollListsSelInd[]; //[0] is srcFld selected index, [1] is destFld -si, and [2] is srcFld position with no filter (ie position w/ regard to all src infs)\n\tint $aInt[] = `textScrollList -q -selectIndexedItem \"soInfList\"`;\n\t\n\t$scrollListsSelInd[0] = $aInt[0]; //textScrollList index of item currently selected in soInfList (0 if nothing selected)\n\t$scrollListsSelInd[2] = abWlListPos2SrcInd($scrollListsSelInd[0]); //this index is the position of this influence in $abWlSrcInfs (-1 if nothing is selected)\n\t$aInt = `textScrollList -q -sii \"doInfList\"`;\n\t$scrollListsSelInd[1] = $aInt[0]; //textScrollList index of item currently selected in doInfList (0 if nothing selected)\n\t$scrollListsSelInd[3] = $scrollListsSelInd[1]-1; //this index is the position of this influence in $abWlDestInfs (-1 if nothing is selected)\n\tint $cSelItem = $scrollListsSelInd[$cSelListPos];\n\tint $otherSelItem = $scrollListsSelInd[1-$cSelListPos];\n\t\n\tif ($cSelItem == $abWlSelList[$cSelListPos]){\n\t\t//clicking an already selected item -- deselect\n\t\tif ($otherSelItem != 0 && $cScrollList == \"doInfList\"){\n\t\t\t//this index has an existing connection -- since it's in the destination pane we can disconnect it\n\t\t\tabWlConnectInfs($scrollListsSelInd[2], $scrollListsSelInd[3], 1);\n\t\t}\n\t\ttextScrollList -e -deselectIndexedItem $cSelItem $cScrollList;\n\t\t$abWlSelList[$cSelListPos] = 0;\n\t\tif ($cScrollList == \"soInfList\"){\n\t\t\t//need to deselect dest pane item too\n\t\t\ttextScrollList -e -deselectAll \"doInfList\";\n\t\t}\n\t}else{\n\t\tif ($otherSelItem != 0 && $cScrollList == \"doInfList\"){\n\t\t\t//make a connection -- can only make and break connections in the destination scroll window\n\t\t\tabWlConnectInfs($scrollListsSelInd[2], $scrollListsSelInd[3], 0);\n\t\t}else if ($cScrollList == \"soInfList\"){\n\t\t\t//highlight connected item since clicking in src pane\n\t\t\ttextScrollList -e -deselectAll \"doInfList\";\n\t\t\t$abWlSelList[1-$cSelListPos] = 0;\n\t\t\tint $doSelInd = abWlGetConnectedInf($scrollListsSelInd[2], -1);\n\t\t\tif ($doSelInd != -1){\n\t\t\t\ttextScrollList -e -sii ($doSelInd+1) \"doInfList\";\n\t\t\t\t$abWlSelList[1] = $doSelInd+1;\n\t\t\t}\n\t\t}\n\t\t$abWlSelList[$cSelListPos] = $scrollListsSelInd[$cSelListPos];\n\t}\n}\n\n\nglobal proc abWlVisualizeConnections(){\n\t//modifies contents of soInfList and \"doInfList\" to visualize connections\n\t\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal string $abWlPrefs[];\n\tstring $alphabet[] = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\tfloat $fAlphabetSize = size($alphabet);\n\tint $aInt[] = `textScrollList -q -sii \"soInfList\"`;\n\tint $srcSelInd = $aInt[0];\n\t$aInt = `textScrollList -q -sii \"doInfList\"`;\n\tint $destSelInd = $aInt[0];\n\tstring $conNamedSrcInf[]; //list of src infs cleaned up and showing connections -- \"elbowJNT\" turns to \"elbowJNT=>(a)\"\n\tstring $infName, $conNamedDestInf[], $id;\n\tint $i, $k, $tInt;\n\tint $alphaNumId = $abWlPrefs[11]; //id connections as a1, b1, c1, a2, b2, c2 instead of a, b, c, aa, bb, cc\n\t\n\t//first fill $conNamedSrc/DestInf arrays with connected items\n\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t//make appropriate id (form a, b, c, aa, bb, cc); a1, b1, c1, a2, b2, c2, if $alphaNumId == true\n\t\t$id = $alphabet[$i/2 % size($alphabet)];\n\t\t$tInt = floor(($i/2)/$fAlphabetSize); //double (or more) up letters if there are more infs than letters\n\t\tif ($alphaNumId){\n\t\t\tif ($tInt > 0) $id = $id + $tInt;\n\t\t\t//$id += ($tInt > 0) ? $tInt : \"\"; //this line seems to have been the fatal bug culprit in v7\n\t\t}else{\n\t\t\t$k = 0;\n\t\t\twhile ($k < $tInt){\n\t\t\t\t$id += $alphabet[$i/2 % size($alphabet)];\n\t\t\t\t$k++;\n\t\t\t}\n\t\t}\n\t\t$infName = $abWlSrcInf[$abWlInfConnections[$i]];\n\t\t$conNamedSrcInf[$abWlInfConnections[$i]] = `match \"[a-zA-Z0-9_]+$\" $infName`+\" => \"+$id;\n\t\t$infName = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t\t$conNamedDestInf[$abWlInfConnections[$i+1]] = $id+\" <= \"+`match \"[a-zA-Z0-9_]+$\" $infName`;\n\t}\n\t//now for the rest -- update fields with new names\n\tstring $inf;\n\tstring $aSlInfNames[] = `textScrollList -q -allItems \"soInfList\"`; //list of all current scrolllist influence names\n\t\n\tfor ($i=0;$i<size($abWlSrcInf);$i++){\n\t\tif ($conNamedSrcInf[$i] == \"\"){\n\t\t\t$infName = $abWlSrcInf[$i];\n\t\t\t$infName = `match \"[a-zA-Z0-9_]+$\" $infName`;\n\t\t}else{\n\t\t\t$infName = $conNamedSrcInf[$i];\n\t\t}\n\t\tif ($infName != $aSlInfNames[$i]){\n\t\t\ttextScrollList -e -removeIndexedItem ($i+1) \"soInfList\";\n\t\t\ttextScrollList -e -appendPosition ($i+1) $infName \"soInfList\";\n\t\t}\n\t}\n\t\n\t$aSlInfNames = `textScrollList -q -allItems \"doInfList\"`; //list of all current scrolllist influence names\n\tfor ($i=0;$i<size($abWlDestInf);$i++){\n\t\tif ($conNamedDestInf[$i] == \"\"){\n\t\t\t$infName = $abWlDestInf[$i];\n\t\t\t$infName = `match \"[a-zA-Z0-9_]+$\" $infName`;\n\t\t}else{\n\t\t\t$infName = $conNamedDestInf[$i];\n\t\t}\n\t\tif ($infName != $aSlInfNames[$i]){\n\t\t\ttextScrollList -e -removeIndexedItem ($i+1) \"doInfList\";\n\t\t\ttextScrollList -e -appendPosition ($i+1) $infName \"doInfList\";\n\t\t}\n\t}\n\tif ($srcSelInd != 0){\n\t\ttextScrollList -e -deselectAll \"soInfList\";\n\t\ttextScrollList -e -sii $srcSelInd \"soInfList\";\n\t}\n\tif ($destSelInd != 0){\n\t\ttextScrollList -e -deselectAll \"doInfList\";\n\t\ttextScrollList -e -sii $destSelInd \"doInfList\";\n\t}\n}\n\n\nglobal proc int abWlGetConnectedInf(int $srcIndex, int $destIndex) {\n\t//looks up connected inf in $abWlInfConnections for non negative argument -- if no connection exists returns -1;\n\t\n\tglobal int $abWlInfConnections[];\n\tint $ret = -1;\n\t\n\tif ($srcIndex != -1 || $destIndex != -1 && !($srcIndex != -1 && $destIndex != -1)){\n\t\tint $i;\n\t\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t\tif($abWlInfConnections[$i] == $srcIndex || $abWlInfConnections[$i+1] == $destIndex){\n\t\t\t\t$ret = ($srcIndex != -1) ? $abWlInfConnections[$i+1] : $abWlInfConnections[$i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn $ret;\n}\n\n\nglobal proc int abWlConnectInfs(int $srcInd, int $destInd, int $disconnectInf) {\n\t//adds items to $abWlInfConnections creating a connection between them and cleaning up existing connections -- $disconnectInf is a bool => if true connections are cut, use -1 for an empty index -- returns bool on success/failure\n\t\n\tglobal int $abWlInfConnections[];\n\t\n\t//clear array of both indices (and partners) -- each ind can only be connected to one other ind\n\tint $i;\n\tint $ind1;\n\tint $ind2;\n\tint $newInfCon[];\n\t\n\tint $ret = true;\n\tint $j;\n\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t$ind1 = $abWlInfConnections[$i];\n\t\t$ind2 = $abWlInfConnections[$i+1];\n\t\tif ($ind1 == $srcInd || $ind2 == $destInd){\n\t\t\t//do nothing.  don't want to copy this to the new array\n\t\t}else{\n\t\t\t$newInfCon[size($newInfCon)] = $ind1;\n\t\t\t$newInfCon[size($newInfCon)] = $ind2;\n\t\t}\n\t}\n\tclear($abWlInfConnections);\n\t$abWlInfConnections = $newInfCon;\n\t\n\tif (!$disconnectInf){\n\t\t//now add the passed indices\n\t\t$abWlInfConnections[size($abWlInfConnections)] = $srcInd;\n\t\t$abWlInfConnections[size($abWlInfConnections)] = $destInd;\n\t}\n\tabWlVisualizeConnections();\n\treturn $ret;\n}\n\n\nglobal proc abWeightLifter(){\n\t\n\tglobal int $abWlInfConnections[];\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlPrefs[];\n\tstring $srcObj, $destObj;\n\tint $utInt;\n\t\n\tif (size($abWlPrefs) == 0){\n\t\t$abWlPrefs = {\"lf_\", \"rt_\", \"1\", \"1\", \"1\", \"0\", \"0.001\", \"0.01\", \"1\", \"0\", \"0\", \"1\", \"1\", \"\", \"\", \"\",\"\",\"\",\"\",\"\"}; //(default left naming prefix, def right naming prefix, default mirror axis (\"1\", \"2\", \"3\"), mirror pos to neg axis, default copy type (\"1\", \"2\", \"3\"), normalize weights, mirror tolerance, copy tolerance, show warning dialogue, include destination strays in vert select, Cull Non-Matching Weights On Copy, Display Connections Alphanumerically (\"a1\" vs \"aa\"), Auto Weight Origin Vertices, Active Imported File, Find Str, Replace Str, Find Str 2, Replace Str 2, Find Str 3, Replace Str 3\n\t}\n\t\n\t//make UI\n\tif (`window -exists abWlWin`){\n\t\tdeleteUI -window abWlWin;\n\t}\n\t//windowPref -remove abWlWin;\n\twindow -t \"abWeightLifter\" -width 300 -height 582 -menuBar true abWlWin;\n\t\n\tmenu -label \"Options\" -postMenuCommand \"global string $abWlSymTable[];string $srcObj = `textField -q -text \\\"soFld\\\"`;string $destObj = `textField -q -text \\\"doFld\\\"`;menuItem -e -en (size($abWlSymTable)!=0) abWlSelSTVtsMnIt;menuItem -e -en (size($abWlSymTable)!=0 && $srcObj != \\\"\\\" && $srcObj == $destObj) abWlSelOriginVtsMnIt;menuItem -e -en (size($abWlSymTable)!=0) abWlClrSTMnIt;\";\n \t\tmenuItem -label \"Options\" -c \"abWlShowPrefs()\";\n\t\tmenuItem -divider true;\n\t\tmenuItem -label \"Select SymTable Vertices\" -c \"global string $abWlSymTable[];select -r $abWlSymTable;\" abWlSelSTVtsMnIt;\n\t\tmenuItem -label \"Select Centerline Vertices\" -c \"global string $abWlOriginVts[];select -r $abWlOriginVts;\" abWlSelOriginVtsMnIt;\n\t\tmenuItem -label \"Clear SymTable\" -c \"global string $abWlSymTable[];global string $abWlOriginVts[];clear($abWlSymTable);clear($abWlOriginVts);\" abWlClrSTMnIt;\n \t\tmenuItem -divider true;\n \t\tmenuItem -label \"Quit\" -c \"abWlClose()\";\n\t\n\tmenu -label \"Tools\" -postMenuCommand \"string $srcObj = `textField -q -text \\\"soFld\\\"`;string $destObj = `textField -q -text \\\"doFld\\\"`; menuItem -e -en ($srcObj != \\\"\\\" && $destObj != \\\"\\\") abWlCheckSymMnIt; menuItem -e -en ($srcObj != \\\"\\\" && $destObj != \\\"\\\" && $srcObj == $destObj) abWlGetSymFrmSelMnIt;\";\n\t\tmenuItem -label \"Check Symmetry\" -c \"abWlCheckSym()\" abWlCheckSymMnIt;\n\t\tmenuItem -label \"Get Symmetry From Selected\" -c \"abWlBuildSymTableFromSelObj()\" abWlGetSymFrmSelMnIt;\n\t\tmenuItem -divider true;\n\t\tmenuItem -label \"Import Weights\" -c \"abWlShowImportWeightDialog()\";\n\t\tmenuItem -label \"Export Weights From Selected\" -c \"abWlShowExportWeightDialog()\";\n\t\tmenuItem -divider true;\n \t\tmenuItem -label \"Bind New Mesh To Skinned Mesh Infs\" -c \"abWlReplaceSkin()\";\n\t\n \tmenu -label \"Help\" -helpMenu true;\n \t\tmenuItem -label \"Help\" -c \"abWlShowHelp()\";\n \t\tmenuItem -label \"Visit Website\" -c \"showHelp -a \\\"http://www.supercrumbly.com/3d.php?sid=124\\\"\";\n \t\n\tformLayout -numberOfDivisions 100 abWlForm;\n\t\t\n\tbutton -label \"Source Object\" -command \"abWlSelObject(\\\"soFld\\\")\" soBn; //source object button\n\ttextField -editable false soFld; //source object field\n\tbutton -label \"Destination Object\" -command \"abWlSelObject(\\\"doFld\\\")\" doBn;\n\ttextField -editable false doFld;\n\t\n\tseparator sep1;\n\ttext -l \"Select Verts By Influence:\" infTxt;\n\ttextScrollList -numberOfRows 6 -allowMultiSelection true -selectCommand \"abWlFWSelect()\" -dcc \"abWlFWSelVerts()\" fiList; //source object influence list\n\tbutton -l \"Select Influenced Verts\" -en false -c \"abWlFWSelVerts()\" sivBn;\n\t$utInt = $abWlPrefs[9];\n\tcheckBox -l \"Include Dest Strays\" -en false -value $utInt -changeCommand \"$abWlPrefs[9] = `checkBox -q -value isChkBx`\" isChkBx; //include strays -- only works for mirror operations at the moment\n\t\n\tbutton -l \"Select Influences\" -en false -c \"string $aSel[] = `ls -sl -o -type joint -type transform`; if (size($aSel) == 0){string $tSel[]=`textScrollList -q -si fiList`;int $i;for ($i=0;$i<size($tSel);$i++){$tSel[$i] =`match \\\"[a-zA-Z0-9_|:]*\\\" $tSel[$i]`;}select -r $tSel;}else{abWlSelectInfs($aSel);}\" siBn; //select influences Button\n\t\n\tbutton -l \"Show Selection Influences\" -en false -c \"abWlShowInfluences()\" ssiBn; //show selection influences Button\n\t\n\tseparator sep2;\n\ttext -l \"source:\" srcTxt;\n\ttext -l \"destination:\" destTxt;\n\ttextScrollList -numberOfRows 15 -allowMultiSelection false -selectCommand \"abWlScrollListSelect(\\\"soInfList\\\")\" soInfList; //source object influence list\n\ttextScrollList -numberOfRows 15 -allowMultiSelection false -selectCommand \"abWlScrollListSelect(\\\"doInfList\\\")\" doInfList; //source object influence list\n\t\n\tseparator sep3;\n\tbutton -l \"Auto Connect Influences\" -en false -c \"abWlAutoConnect()\" acBn; //autoconnect button\n\t\n\ttext -l \"Search:\" -en false fndTxt;\n\ttext -l \"Replace:\" -en false rplcTxt;\n\ttextField -text $abWlPrefs[14] -en false -changeCommand \"$abWlPrefs[14] = `textField -q -text fndFld`\" -editable true fndFld; //find field\n\ttextField -text $abWlPrefs[15] -en false -changeCommand \"$abWlPrefs[15] = `textField -q -text rplcFld`\" -editable true rplcFld; //replace field\n\t\n\ttext -l \"Search:\" -en false fnd2Txt;\n\ttext -l \"Replace:\" -en false rplc2Txt;\n\ttextField -text $abWlPrefs[16] -en false -changeCommand \"$abWlPrefs[16] = `textField -q -text fnd2Fld`\" -editable true fnd2Fld; //find field\n\ttextField -text $abWlPrefs[17] -en false -changeCommand \"$abWlPrefs[17] = `textField -q -text rplc2Fld`\" -editable true rplc2Fld; //replace field\n\t\n\ttext -l \"Search:\" -en false fnd3Txt;\n\ttext -l \"Replace:\" -en false rplc3Txt;\n\ttextField -text $abWlPrefs[18] -en false -changeCommand \"$abWlPrefs[18] = `textField -q -text fnd3Fld`\" -editable true fnd3Fld; //find field\n\ttextField -text $abWlPrefs[19] -en false -changeCommand \"$abWlPrefs[19] = `textField -q -text rplc3Fld`\" -editable true rplc3Fld; //replace field\n\t\n\tbutton -l \"Clear All Connections\" -en false -c \"clear($abWlInfConnections);abWlVisualizeConnections();\" ccBn; //autoconnect button\n\tseparator sep4;\n\t\t\n\tbutton -height 25 -label \"Copy Weights\" -en false -command \"abWlDoIt()\" actionBn;\n\tbutton -height 25 -label \"Move Weights\" -en false -command \"abWlMoveWeights()\" abWlMoveWtsBn;\n\tbutton -height 25 -label \"Close\" -command \"abWlClose()\" closeBn;\n\t\t\n\tint $lmargin = 3;\n\tint $rmargin = 3;\n\tint $labelWidth = 15;\n\t\n\tformLayout -e\n\t\n\t-attachForm soFld \"top\" 8\n\t\t-af soFld \"left\" $lmargin\n\t\t-af soFld \"right\" 110\n\t\t\n\t\t-ac soBn \"left\" 3 soFld\n\t\t-af soBn \"top\" 8\n\t\t-af soBn \"right\" $rmargin\n\t\t\n\t\t-ac doFld \"top\" 5 soBn\n\t\t-af doFld \"left\" $lmargin\n\t\t-af doFld \"right\" 110\n\t\t\n\t\t-ac doBn \"left\" 3 doFld\n\t\t-ac doBn \"top\" 5 soBn\n\t\t-af doBn \"right\" $rmargin\n\t\t\n\t\t-ac sep1 \"top\" 7 doFld\n\t\t-af sep1 \"left\" $lmargin\n\t\t-af sep1 \"right\" $rmargin\n\t\t\n\t\t-ac infTxt \"top\" 3 sep1\n\t\t-af infTxt \"left\" $lmargin\n\t\t-af infTxt \"right\" $rmargin\n\t\t\n\t\t-ac fiList \"top\" 3 infTxt\n\t\t-af fiList \"left\" $lmargin\n\t\t-ap fiList \"right\" $rmargin 50\n\t\t\n\t\t-ac sivBn \"top\" 3 infTxt\n\t\t-ac sivBn \"left\" 6 fiList\n\t\t-af sivBn \"right\" $rmargin\n\t\t\n\t\t-ac isChkBx \"top\" 4 sivBn\n\t\t-ac isChkBx \"left\" 6 fiList\n\t\t-af isChkBx \"right\" $rmargin\n\t\t\n\t\t-ac ssiBn \"top\" 4 isChkBx\n\t\t-ac ssiBn \"left\" 6 fiList\n\t\t-af ssiBn \"right\" $rmargin\n\t\t\n\t\t-ac siBn \"top\" 7 fiList\n\t\t-af siBn \"left\" $lmargin\n\t\t-af siBn \"right\" $rmargin\n\t\t\n\t\t-ac sep2 \"top\" 7 siBn\n\t\t-af sep2 \"left\" $lmargin\n\t\t-af sep2 \"right\" $rmargin\n\t\t\n\t\t-ac srcTxt \"top\" 3 sep2\n\t\t-af srcTxt \"left\" $lmargin\n\t\t-ap srcTxt \"right\" $rmargin 50\n\t\t\n\t\t-ac destTxt \"top\" 3 sep2\n\t\t-af destTxt \"right\" $rmargin\n\t\t-ac destTxt \"left\" 5 srcTxt\n\t\t\n\t\t-af actionBn \"left\" $lmargin\n\t\t-af actionBn \"bottom\" 5\n\t\t-ap actionBn \"right\" $rmargin 35\n\t\t\n\t\t-ac abWlMoveWtsBn \"left\" $lmargin actionBn\n\t\t-af abWlMoveWtsBn \"bottom\" 5\n\t\t-ap abWlMoveWtsBn \"right\" $rmargin 70\n\t\t\n\t\t-ac closeBn \"left\" 3 abWlMoveWtsBn\n\t\t-af closeBn \"bottom\" 5\n\t\t-af closeBn \"right\" $rmargin\n\t\t\n\t\t-ac sep4 \"bottom\" 5 actionBn\n\t\t-af sep4 \"left\" $lmargin\n\t\t-af sep4 \"right\" $rmargin\n\t\t\n\t\t-ac acBn \"bottom\" 7 sep4\n\t\t-af acBn \"right\" 180\n\t\t-af acBn \"left\" $lmargin \n\t\t\n\t\t-ac ccBn \"bottom\" 7 sep4\n\t\t-af ccBn \"right\" $rmargin\n\t\t-ac ccBn \"left\" $lmargin acBn\n\t\t\n\t\t-ac fnd3Txt \"bottom\" 7 acBn\n\t\t-af fnd3Txt \"left\" $labelWidth\n\t\t\n\t\t-ac fnd3Fld \"bottom\" 5 acBn\n\t\t-ac fnd3Fld \"left\" $lmargin fnd3Txt\n\t\t-ap fnd3Fld \"right\" $rmargin 50\n\t\t\n\t\t-ac rplc3Txt \"bottom\" 7 acBn\n\t\t-ac rplc3Txt \"left\" $labelWidth fnd3Fld\n\t\t\n\t\t-ac rplc3Fld \"bottom\" 5 acBn\n\t\t-ac rplc3Fld \"left\" $lmargin rplc3Txt\n\t\t-af rplc3Fld \"right\" $rmargin\n\t\t\n\t\t-ac fnd2Txt \"bottom\" 6 fnd3Fld\n\t\t-af fnd2Txt \"left\" $labelWidth\n\t\t\n\t\t-ac fnd2Fld \"bottom\" 4 fnd3Fld\n\t\t-ac fnd2Fld \"left\" $lmargin fnd2Txt\n\t\t-ap fnd2Fld \"right\" $rmargin 50\n\t\t\n\t\t-ac rplc2Txt \"bottom\" 6 fnd3Fld\n\t\t-ac rplc2Txt \"left\" $labelWidth fnd2Fld\n\t\t\n\t\t-ac rplc2Fld \"bottom\" 4 fnd3Fld\n\t\t-ac rplc2Fld \"left\" $lmargin rplc2Txt\n\t\t-af rplc2Fld \"right\" $rmargin\n\t\t\n\t\t-ac fndTxt \"bottom\" 6 fnd2Fld\n\t\t-af fndTxt \"left\" $labelWidth\n\t\t\n\t\t-ac fndFld \"bottom\" 4 fnd2Fld\n\t\t-ac fndFld \"left\" $lmargin fndTxt\n\t\t-ap fndFld \"right\" $rmargin 50\n\t\t\n\t\t-ac rplcTxt \"bottom\" 6 fnd2Fld\n\t\t-ac rplcTxt \"left\" $labelWidth fndFld\n\t\t\n\t\t-ac rplcFld \"bottom\" 4 fnd2Fld\n\t\t-ac rplcFld \"left\" $lmargin rplcTxt\n\t\t-af rplcFld \"right\" $rmargin\n\t\t\n\t\t-ac sep3 \"bottom\" 5 fndFld\n\t\t-af sep3 \"left\" $lmargin\n\t\t-af sep3 \"right\" $rmargin\n\t\t\n\t\t-ac soInfList \"top\" 3 srcTxt\n\t\t-ac soInfList \"bottom\" 7 sep3\n\t\t-af soInfList \"left\" $lmargin\n\t\t-ap soInfList \"right\" $rmargin 50\n\t\t\n\t\t-ac doInfList \"top\" 3 destTxt\n\t\t-ac doInfList \"bottom\" 7 sep3\n\t\t-af doInfList \"right\" $rmargin\n\t\t-ac doInfList \"left\" 5 soInfList\n\t\t\n\t\tabWlForm\n\t\t;\n\t\t\n\t\tif (size($abWlSymTable) > 0){\n\t\t\t//use existing data\n\t\t\t//make sure it still exists\n\t\t\t$srcObj = match(\"^[a-zA-Z0-9_]+\", $abWlSymTable[0]);\n\t\t\t$destObj = match(\"^[a-zA-Z0-9_]+\", $abWlSymTable[1]);\n\t\t\tif (`objExists $srcObj` && abWlGetSkinCluster($srcObj) != \"\" && `objExists $destObj` && abWlGetSkinCluster($destObj) != \"\"){\n\t\t\t\ttextField -e -text $srcObj soFld; //source object field\n\t\t\t\ttextField -e -text $destObj doFld; //source object field\n\t\t\t\tabWlPopulateInfFields(\"soFld\", 0, true);\n\t\t\t\tabWlPopulateInfFields(\"doFld\", 0, true);\n\t\t\t\tabWlEnableButtons(true);\n\t\t\t\tabWlVisualizeConnections();\n\t\t\t}else{\n\t\t\t\tabWlClearGlobals();\n\t\t\t}\n\t\t}else{\n\t\t\tabWlClearGlobals();\n\t\t}\n\t\t\n\tshowWindow abWlWin;\n\t\n\tscriptJob -uiDeleted \"abWlWin\" \"if (`window -exists abWlPrefsWin`) deleteUI -window abWlPrefsWin;\";\n}\n\n\nglobal proc abWlShowPrefs(){\n\t//show copy options\n\tglobal string $abWlPrefs[];\n\tglobal string $abWlSymTable[];\n\tint $winW = 196;\n\tint $winH = 540;\n\tint $utInt;\n\t\n\tif (`window -exists abWlPrefsWin`){\n\t\tdeleteUI -window abWlPrefsWin;\n\t}\n\tif (`windowPref -exists abWlPrefsWin`) windowPref -remove abWlPrefsWin;\n\t\n\tint $mainLfEdge = `window -q -leftEdge abWlWin`;\n\tint $mainTpEdge = `window -q -topEdge abWlWin`;\n\twindow -t \"Options\" -width $winW -height $winH -leftEdge ($mainLfEdge-$winW) -topEdge $mainTpEdge -minimizeButton false -maximizeButton false abWlPrefsWin;\n\t\n\tformLayout -numberOfDivisions 100 abPrefsForm;\n\t\n\ttext -l \"General Preferences\" -font \"boldLabelFont\" gPrefTxt;\n\tseparator sep1;\n\ttext -l \"left prefix\" lpTxt;\n\ttext -l \"right prefix\" rpTxt;\n\ttextField -text $abWlPrefs[0] -changeCommand \"$abWlPrefs[0] = `textField -q -text lpFld`\" -editable true lpFld; //left prefix field\n\ttextField -text $abWlPrefs[1] -changeCommand \"$abWlPrefs[1] = `textField -q -text rpFld`\" -editable true rpFld; //left prefix field\n\t$utInt = $abWlPrefs[5];\n\tcheckBox -l \"Normalize Weights\" -value $utInt -changeCommand \"$abWlPrefs[5] = `checkBox -q -value nrmChkBx`\" nrmChkBx;\n\t$utInt = $abWlPrefs[10];\n\tcheckBox -l \"Cull Matching Weights\" -value $utInt -changeCommand \"$abWlPrefs[10] = `checkBox -q -value cnmwChkBx`\" cnmwChkBx; //cull non matching weights check box\n\t$utInt = $abWlPrefs[8];\n\tcheckBox -l \"Warn On Unconnected Infs\" -value $utInt -changeCommand \"$abWlPrefs[8] = `checkBox -q -value uwChkBx`\" uwChkBx; //unconnected warn check box\n\t$utInt = $abWlPrefs[11];\n\tcheckBox -l \"Alphanumeric Connections\" -value $utInt -changeCommand \"$abWlPrefs[11] = `checkBox -q -value ancChkBx`;abWlVisualizeConnections();\" ancChkBx; //alphanumeric connections check box\n\tseparator -vis false sep2;\n\t\n\ttext -l \"Mirror Preferences\" -font \"boldLabelFont\" mPrefTxt;\n\tseparator sep3;\n\ttext -l \"Mirror Axis:\" axisTxt;\n\t$utInt = $abWlPrefs[2]; // utility int\n\tradioButtonGrp -numberOfRadioButtons 3 -l1 \"YZ\" -l2 \"XZ\" -l3 \"XY\" \n\t-select $utInt -columnWidth3 48 48 48 -onCommand \"$abWlPrefs[2] = `radioButtonGrp -q -select smaRbGrp`; global string $abWlSymTable; global string $abWlOriginVts; clear($abWlSymTable); clear($abWlOriginVts);\" smaRbGrp; //select mirror axis\n\t$utInt = $abWlPrefs[3];\n\tcheckBox -l \"Operate +X to -X\" -value $utInt -changeCommand \"$abWlPrefs[3] = `checkBox -q -value maChkBx`\" maChkBx;\n\t$utInt = $abWlPrefs[12];\n\tcheckBox -l \"Auto Weight Origin Verts\" -value $utInt -changeCommand \"$abWlPrefs[12] = `checkBox -q -value awovChkBx`\" awovChkBx;\n\ttext -l \"tolerance\" mTolTxt;\n\ttextField -text $abWlPrefs[6] -changeCommand \"$abWlPrefs[6] = `textField -q -text mTolFld`\" -editable true mTolFld; //left prefix field\n\t\n\tseparator -vis false sep4;\n\ttext -l \"Copy Preferences\" -font \"boldLabelFont\" cPrefTxt;\n\tseparator sep5;\n\ttext -l \"Match Vertices Using:\" ctTxt;\n\t\n\t//optionMenu -changeCommand \"$abWlPrefs[4] = `optionMenu -q -select mvuOm`\" mvuOm; //copy type option menu\n\t//menuItem -label \"World Space Coords\";\n\t//menuItem -label \"Object Space Coords\";\n\t//menuItem -label \"Vertex Number\";\n\t//menuItem -label \"Mirror Across Origin\";\n\t//\n\t//$utInt = $abWlPrefs[4];\n\t//optionMenu -e -select $utInt mvuOm;\n\t//setParent..;\n\t\n\ttext -l \"tolerance\" cTolTxt;\n\ttextField -text $abWlPrefs[7] -changeCommand \"$abWlPrefs[7] = `textField -q -text cTolFld`\" -editable true cTolFld; //left prefix field\n\t\n\tseparator -vis false sep6;\n\tseparator sep7;\n\tbutton -height 25 -l \"close\" -c \"deleteUI -window abWlPrefsWin\" pcBn; //prefs close button\n\t\n\t\n\t\n\toptionMenu -changeCommand \"$abWlPrefs[4] = `optionMenu -q -select mvuOm`\" mvuOm; //copy type option menu\n\tmenuItem -label \"World Space Coords\";\n\tmenuItem -label \"Object Space Coords\";\n\tmenuItem -label \"Vertex Number\";\n\tmenuItem -label \"Mirror Across Origin\";\n\t\n\t$utInt = $abWlPrefs[4];\n\toptionMenu -e -select $utInt mvuOm;\n\tsetParent..;\n\t\n\tint $lmargin = 3;\n\tint $rmargin = 3;\n\tint $ctSpc = 8;\n\tint $sepTopSpc = 2;\n\tint $sepBotSpc = 5;\n\t\n\tformLayout -e\n\t\t-af gPrefTxt \"left\" $lmargin\n\t\t-af gPrefTxt \"top\" 8\n\t\t-af gPrefTxt \"right\" $rmargin\n\t\t\n\t\t-ac sep1 \"top\" $sepTopSpc gPrefTxt\n\t\t-af sep1 \"left\" $lmargin\n\t\t-af sep1 \"right\" $rmargin\n\t\t\n\t\t-af lpFld \"left\" $lmargin\n\t\t-ac lpFld \"top\" $ctSpc sep1\n\t\t-ap lpFld \"right\" $rmargin 45\n\t\t\n\t\t-ac lpTxt \"left\" 4 lpFld\n\t\t-ac lpTxt \"top\" ($ctSpc+2) sep1\n\t\t-af lpTxt \"right\" $rmargin\n\t\t\n\t\t-af rpFld \"left\" $lmargin\n\t\t-ac rpFld \"top\" 4 lpFld\n\t\t-ap rpFld \"right\" $rmargin 45\n\t\t\n\t\t-ac rpTxt \"left\" 4 rpFld\n\t\t-ac rpTxt \"top\" 6 lpFld\n\t\t-af rpTxt \"right\" $rmargin\n\t\t\n\t\t-af nrmChkBx \"left\" $lmargin\n\t\t-ac nrmChkBx \"top\" $ctSpc rpTxt\n\t\t-af nrmChkBx \"right\" $rmargin\n\t\t\n\t\t-af cnmwChkBx \"left\" $lmargin\n\t\t-ac cnmwChkBx \"top\" $ctSpc nrmChkBx\n\t\t-af cnmwChkBx \"right\" $rmargin\n\t\t\n\t\t-af uwChkBx \"left\" $lmargin\n\t\t-ac uwChkBx \"top\" $ctSpc cnmwChkBx\n\t\t-af uwChkBx \"right\" $rmargin\n\t\t\n\t\t-af ancChkBx \"left\" $lmargin\n\t\t-ac ancChkBx \"top\" $ctSpc uwChkBx\n\t\t-af ancChkBx \"right\" $rmargin\n\t\t\n\t\t-af sep2 \"left\" $lmargin\n\t\t-ac sep2 \"top\" $ctSpc ancChkBx\n\t\t-af sep2 \"right\" $rmargin\n\t\t\n\t\t-af mPrefTxt \"left\" $lmargin\n\t\t-ac mPrefTxt \"top\" 12 sep2\n\t\t-af mPrefTxt \"right\" $rmargin\n\t\t\n\t\t-ac sep3 \"top\" $sepTopSpc mPrefTxt\n\t\t-af sep3 \"left\" $lmargin\n\t\t-af sep3 \"right\" $rmargin\n\t\t\n\t\t-af axisTxt \"left\" $lmargin\n\t\t-ac axisTxt \"top\" $sepBotSpc sep3\n\t\t-af axisTxt \"right\" $rmargin\n\t\t\n\t\t-ac smaRbGrp \"top\" 4 axisTxt\n\t\t-af smaRbGrp \"left\" $lmargin\n\t\t\n\t\t-af awovChkBx \"left\" $lmargin\n\t\t-ac awovChkBx \"top\" $ctSpc smaRbGrp\n\t\t-af awovChkBx \"right\" $rmargin\n\t\t\n\t\t-af maChkBx \"left\" $lmargin\n\t\t-ac maChkBx \"top\" $ctSpc awovChkBx\n\t\t-af maChkBx \"right\" $rmargin\n\t\t\n\t\t-af mTolFld \"left\" $lmargin\n\t\t-ac mTolFld \"top\" $ctSpc maChkBx\n\t\t-ap mTolFld \"right\" $rmargin 45\n\t\t\n\t\t-ac mTolTxt \"left\" 4 mTolFld\n\t\t-ac mTolTxt \"top\" ($ctSpc+2) maChkBx\n\t\t-af mTolTxt \"right\" $rmargin\n\t\t\n\t\t-af sep4 \"left\" $lmargin\n\t\t-ac sep4 \"top\" $ctSpc mTolTxt\n\t\t-af sep4 \"right\" $rmargin\n\t\t\n\t\t-af cPrefTxt \"left\" $lmargin\n\t\t-ac cPrefTxt \"top\" 12 sep4\n\t\t-af cPrefTxt \"right\" $rmargin\n\t\t\n\t\t-af sep5 \"left\" $lmargin\n\t\t-ac sep5 \"top\" $sepTopSpc cPrefTxt\n\t\t-af sep5 \"right\" $rmargin\n\t\t\n\t\t-af ctTxt \"left\" $lmargin\n\t\t-ac ctTxt \"top\" $sepBotSpc sep5\n\t\t-af ctTxt \"right\" $rmargin\n\t\t\n\t\t-ac mvuOm \"top\" 4 ctTxt\n\t\t-af mvuOm \"left\" $lmargin\n\t\t\n\t\t-af cTolFld \"left\" $lmargin\n\t\t-ac cTolFld \"top\" $ctSpc mvuOm\n\t\t-ap cTolFld \"right\" $rmargin 45\n\t\t\n\t\t-ac cTolTxt \"left\" 4 cTolFld\n\t\t-ac cTolTxt \"top\" ($ctSpc+2) mvuOm\n\t\t-af cTolTxt \"right\" $rmargin\n\t\t\n\t\t-af sep6 \"left\" $lmargin\n\t\t-ac sep6 \"top\" $ctSpc cTolTxt\n\t\t-af sep6 \"right\" $rmargin\n\t\t\n\t\t-af sep7 \"left\" $lmargin\n\t\t-ac sep7 \"top\" $ctSpc sep6\n\t\t-af sep7 \"right\" $rmargin\n\t\t\n\t\t-af pcBn \"left\" $lmargin\n\t\t-ac pcBn \"top\" 5 sep7\n\t\t-af pcBn \"right\" $rmargin\n\t\t\n\t\tabPrefsForm\n\t;\n\t\n\tshowWindow abWlPrefsWin;\n\t\n\t// update enabled and disabled pref UI sections (mirror and copy)\n\tstring $srcObj = `textField -q -text soFld`;\n\tstring $destObj = `textField -q -text doFld`;\n\t\n\tif ($srcObj == \"\" || $destObj == \"\"){\n\t\t// enable copy and mirror options\n\t\tabWlDisablePrefs(0, 1);\n\t\tabWlDisablePrefs(1, 1);\n\t\t\n\t}else if ($srcObj == $destObj){\n\t\t// enable mirror options, disable copy\n\t\tabWlDisablePrefs(0, 1);\n\t\tabWlDisablePrefs(1, 0);\n\t\t\n\t}else{\n\t\t// enable copy options, disable mirror\n\t\tabWlDisablePrefs(0, 0);\n\t\tabWlDisablePrefs(1, 1);\n\t}\n}\n\n\nglobal proc abWlUpdateSelInfList(){\n\t//fills selection influence window with all infs on currently selected verts\n\t\n\tstring $inf, $aInfs[];\n\tstring $aSel[] = `filterExpand -sm 31`;\n\t\n\tif (size($aSel) > 0){\n\t\tstring $srcObj = `textField -q -text soFld`;\n\t\tstring $cluster = abWlGetSkinCluster($srcObj);\n\t\tstring $infs[] = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $cluster $aSel`;\n\t\t\n\t\tint $i;\n\t\tstring $aStr[], $str;\n\t\ttextScrollList -e -ra siList;\n\t\tfor ($i=0;$i<size($infs);$i++){\n\t\t\t$aStr = {$infs[$i]};\n\t\t\t$aStr = abGetSrc2DestConInfsAsStr($aStr);\n\t\t\t\n\t\t\t$str = (size($aStr) != 0) ? $infs[$i]+\" [c]\" : $infs[$i];\n\t\t\t$aInfs[size($aInfs)] = $str;\n\t\t}\n\t\t\n\t\t// sort the infs\n\t\t$aInfs = sort($aInfs);\n\t\t\n\t\t// refresh the textScrollList\n\t\tfor ($inf in $aInfs) textScrollList -e -append $inf siList;\n\t\t\n\t}else{\n\t\ttextScrollList -e -ra siList;\n\t}\n}\n\n\nglobal proc abWlShowInfluences(){\n\t//window with textScrollList containing influences on selected vertices\n\t\n\tif (`window -exists abWlVertInfs`){\n\t\tdeleteUI -window abWlVertInfs;\n\t}\n\t//windowPref -remove abWlVertInfs;\n\twindow -t \"Selection Influences\" -width 150 -height 358 -minimizeButton false -maximizeButton false abWlVertInfs;\n\tformLayout -numberOfDivisions 100 abWlVertInfsForm;\n\ttextScrollList -numberOfRows 16 -sc \"string $aSi[]=`textScrollList -q -si siList`;string $si=match(\\\"[a-zA-Z0-9_|:]*\\\", $aSi[0]);global string $abWlSrcInf[];int $iSi=abWlStrGetPos($si, $abWlSrcInf)+1;textScrollList -e -sii $iSi soInfList;abWlScrollListSelect(\\\"soInfList\\\");\" -dcc \"string $aInfs[]=`textScrollList -q -si siList`;int $i;for ($i=0;$i<size($aInfs);$i++){$aInfs[$i] =`match \\\"[a-zA-Z0-9_|]*\\\" $aInfs[$i]`;}string $tSel[] = abWlGetAffectedVertsByInf(`textField -q -text soFld`, $aInfs);select -r $tSel;\" -allowMultiSelection true siList; //selection inf list\n\tbutton -l \"Update List\" -c \"abWlUpdateSelInfList();\" uBn; //update button\n\t//button -l \"Select Influences\" -c \"string $origSel[]=`ls -sl`;string $tSel[]=`textScrollList -q -si siList`;int $i;for ($i=0;$i<size($tSel);$i++){$tSel[$i] =`match \\\"[a-zA-Z0-9_|]*\\\" $tSel[$i]`;}abWlSelectInfs($tSel);\" sBn; //select button\n\tbutton -l \"Select Influences\" -c \"string $tSel[]=`textScrollList -q -si siList`;int $i;for ($i=0;$i<size($tSel);$i++){$tSel[$i] =`match \\\"[a-zA-Z0-9_|:]*\\\" $tSel[$i]`;}select -r $tSel;\" sBn; //select button\n\tbutton -l \"Deselect Influenced\" -c \"string $tSel[]=`textScrollList -q -si siList`;int $i;for ($i=0;$i<size($tSel);$i++){$tSel[$i] =`match \\\"[a-zA-Z0-9_|:]*\\\" $tSel[$i]`;}if (size($tSel)>0){string $deSel[] = abWlGetAffectedVertsByInf(`textField -q -text soFld`, $tSel);select -d $deSel;}\" diBn;\n\tbutton -l \"Close\" -height 25 -c \"deleteUI -window abWlVertInfs;\" cBn;\n\t\n\tint $lmargin = 3;\n\tint $rmargin = 3;\n\t\n\tformLayout -e\n\t\t-af cBn \"left\" $lmargin\n\t\t-af cBn \"bottom\" 5\n\t\t-af cBn \"right\" $rmargin\n\t\t\n\t\t-af diBn \"left\" $lmargin\n\t\t-ac diBn \"bottom\" 5 cBn\n\t\t-af diBn \"right\" $rmargin\n\t\t\n\t\t-af sBn \"left\" $lmargin\n\t\t-ac sBn \"bottom\" 5 diBn\n\t\t-af sBn \"right\" $rmargin\n\t\t\n\t\t-af uBn \"left\" $lmargin\n\t\t-ac uBn \"bottom\" 5 sBn\n\t\t-af uBn \"right\" $rmargin\n\t\t\n\t\t-af siList \"top\" 6\n\t\t-ac siList \"bottom\" 5 uBn\n\t\t-af siList \"left\" $lmargin\n\t\t-af siList \"right\" $rmargin\n\t\t\n\t\tabWlVertInfsForm\n\t;\n\tabWlUpdateSelInfList();\n\tshowWindow abWlVertInfs;\n}\n\n\nglobal proc abWlShowHelp(){\n\t\n\tif (`window -exists abWlHelp`){\n\t\tdeleteUI -window abWlHelp;\n\t}\n\t//windowPref -remove abWlHelp;\n\twindow -t \"abWeightLifter Help\" -width 435 -height 350 -minimizeButton false -maximizeButton false abWlHelp;\n\tformLayout -numberOfDivisions 100 abWlHelpForm;\n\t\tscrollLayout abWlHelpScroll;\n\t\t\tcolumnLayout;\n\t\t\tstring $text;\n\t\t\ttext -l \"abWeightLifter v 1.4.1\\nBrendan Ross\\n06.01.2005\\nwww.supercrumbly.com\\n\\n\" -align left;\n\t\t\ttext -l \"about:\\n\" -align left;\n\t\t\t$text = \"A tool to copy and mirror skin weights on polygon objects bound to the same or\\nseparate rigs. Any number of influences can be copied/mirrored by establishing\\nconnections in the UI.\\n\\n\\ndirections:\\n\\n1.  Select the skinned polygon object that you want to copy weights from and\\nclick the \\\"Source Object\\\" button. Select the mesh you want to copy to and click\\n\\\"Destination Object.\\\" To mirror weights across a single object, select it as\\nboth the source and destination objects. To mirror weights across two separate\\nobjects that are symmetrical with one another, select \\\"Mirror Across Origin\\\" in\\nthe \\\"Match Vertices Using:\\\" drop down menu.\\n\\n\\n2.  Connections are made between influences in the \\\"source:\\\"(SSL) and\\n\\\"destination:\\\"(DSL) scroll lists. Select an influence in the SSL and click on\\none in the DSL. A connection is made as indicated by the \\\"=>a\\\" and \\\"a<=\\\" suffix\\nand prefix on your now connected influences. Leaving the SSL influence selected,\\nclick the highlighted item in the DSL. Now you've broken the connection.\\n\\nClicking in the SSL will highlight connected influences (if any) in the DSL.\\nClicking in the DSL will establish and break connections with the item selected\\n(if any) in the SSL.\\n\\n\\n3.  You can also auto connect your influences by clicking the \\\"Auto Connect\\nInfluences\\\" button. If you're performing a mirror copy, open the options menu\\nand enter the appropriate left and right prefixes.\\n\\nYou change your init preferences by editing the $abWlPrefs array (search for\\n\\\"string $abWlPrefs[];\\\"). Run \\\"clear($abWlPrefs);\\\" in the script editor to clear\\nyour session settings and re-init your preferences.\\n\\n\\n4.  Make sure your source and destination objects are in their bind poses and\\nClick \\\"Copy Weights\\\". If you copy without all SSL influences connected you'll\\nget a warning and, most likely, bad results (especially if the \\\"Normalize\\\"\\ncheckbox under \\\"General Preferences\\\" is unchecked).\\n\\nYou can control which vertices are copied by making a vertex component selection\\nbefore clicking \\\"Copy Weights.\\\"\\n \\nLeave the \\\"Normalize\\\" checkbox unchecked if the weights you're copying have\\nalready been normalized (which is most likely). Checking it will slow down the\\nweight copy.\\n\\nIf you're mirroring weights, the first copy operation will build the symmetry\\ntable (ST). This only needs to be done once. If you close the script using the\\nclose window button on menu bar, your current ST and connection information will\\nbe preserved, so the the next time you open the script you won't have to do it\\nagain. Once the ST has been built, you don't have to reset your character to its\\nbinding position to copy weights.\\n\\n\\n5.  Use the \\\"Select Verts By Influence\\\" (SVBI) window to create selections based\\non a given set of influences. In this way you can copy the weights for only the\\ninfluences that you're interested in.\\n\\nSelect an influence (or influences) in the SVBI window and click the \\\"Select\\nInfluenced Verts\\\" button. All vertices with non-zero weighting to the selected\\ninfluence(s) will be selected. You can also make selections in the SVBI window\\nby selecting influences in your scene and clicking the \\\"Select Influences\\\"\\nbutton in the main UI. Enable \\\"Include Dest Strays\\\" to include all vertices\\nweighted to the selected and connected influences in the selection. This ensures\\nthat if you reduce the weight of a selected influence to zero on vertices from\\nthe source side of your object, those verts will still be included in the\\nselection as long as their mirrored vertices' weight to the connected influence\\nis greater than zero. \\\"Include Dest Strays\\\" is only available when you're\\nmirroring weights.\\n\\nYou can also see which influences are affecting a given selection of vertices by\\nselecting some verts and clicking the \\\"Show Selection Influences\\\" button.\\nConnected items are suffixed with a \\\"[c].\\\" Clicking a list item selects it in\\nthe SSL and highlights its connection (if any) in the DSL. Double clicking an\\nitem selects all the vertices weighted to that influence. This only works for\\none item at a time. Click the \\\"Select Influences\\\" button to select the influences\\nhilited in the SVBI window.  The \\\"Deselect Influenced\\\" button removes any verts\\nweighted to the selected influences from the current selection. Click the \\\"Update\\nList\\\" button to refresh the list after making a new vertex selection or to reflect\\nnewly connected influences.\\n\\n\\nAs always, click the \\\"Close\\\" button in the UI (instead of the close window\\nbutton on the title bar) to clear the script globals.\\n\\n\";\n\t\t\ttext -l $text -align left;\n\t\t\tsetParent ..;\n\t\tsetParent ..;\n\t\tbutton -l \"Close\" -height 25 -c \"deleteUI -window abWlHelp;\" cBn;\n\t\n\tint $lmargin = 3;\n\tint $rmargin = 3;\n\t\n\tformLayout -e\n\t\t\n\t\t-attachForm abWlHelpScroll \"left\" $lmargin\n\t\t-attachForm abWlHelpScroll \"top\" 6\n\t\t-attachForm abWlHelpScroll \"right\" $rmargin\n\t\t-attachControl abWlHelpScroll \"bottom\" 4 cBn\n\t\t\n\t\t//-attachControl cBn \"top\" 8 abWlHelpScroll\n\t\t-attachForm cBn \"left\" $lmargin\n\t\t-attachForm cBn \"right\" $rmargin\n\t\t-attachForm cBn \"bottom\" 5\n\t\t\n\t\tabWlHelpForm\n\t;\n\t\t\n\tshowWindow abWlHelp;\n}\n\n\nglobal proc abWlReplaceSkinUI(string $srcMesh, string $targetMesh){\n\t// srcMesh is skinned mesh, targetMesh is unskinned to copy to target mesh\n\t\n\tint $lmargin = 3;\n\tint $rmargin = 3;\n\tint $lCol = 64;\n\tint $rCol = 55;\n\t\n\tif (`window -exists abWlRsReplaceSkinWin`){\n\t\tdeleteUI -window abWlRsReplaceSkinWin;\n\t}\n\tif (`windowPref -exists abWlRsReplaceSkinWin`) windowPref -remove abWlRsReplaceSkinWin;\n\t\n\twindow -t \"Replace Skin\" -width 232 -height 206 -minimizeButton false -maximizeButton false abWlRsReplaceSkinWin;\n\t\n\tformLayout -numberOfDivisions 100 abWlRsReplaceSkinForm;\n\t\n\ttextFieldGrp -ed false -label \"Source:\" -text $srcMesh -cw2 $lCol $rCol -ad2 2 -columnAttach 1 right 4 abWlRsSknMshTxFldGrp;\n\ttextFieldGrp -ed false -label \"Target:\" -text $targetMesh -cw2 $lCol $rCol -ad2 2 -columnAttach 1 right 4 abWlRsRplmntMshTxFldGrp;\n\tintFieldGrp -numberOfFields 1 -label \"Max Infs\" -value1 5 -cw2 $lCol $rCol -ad2 2 -columnAttach 1 right 4 abWlRsMaxInfIntFldGrp;\n\tfloatFieldGrp -numberOfFields 1 -label \"Dropoff\" -value1 4 -cw2 $lCol $rCol -ad2 2 -columnAttach 1 right 4 abWlRsDropOffIntFldGrp;\n\t\n\tcheckBox -l \"Delete Source Mesh\" -value false abWlRsDelSrcChkBx;\n\t\n\tbutton -height 25 -label \"Bind And Copy Weights\" -command \"abWlReplaceSkin2()\" abWlRsRplcSknCopyBn;\n\t\n\t\n\tformLayout -e\n\t\t-af abWlRsSknMshTxFldGrp \"left\" $lmargin\n\t\t-af abWlRsSknMshTxFldGrp \"top\" 8\n\t\t-af abWlRsSknMshTxFldGrp \"right\" $rmargin\n\t\t\n\t\t-ac abWlRsRplmntMshTxFldGrp \"top\" 5 abWlRsSknMshTxFldGrp\n\t\t-af abWlRsRplmntMshTxFldGrp \"left\" $lmargin\n\t\t-af abWlRsRplmntMshTxFldGrp \"right\" $rmargin\n\t\t\n\t\t\n\t\t-ac abWlRsMaxInfIntFldGrp \"top\" 6 abWlRsRplmntMshTxFldGrp\n\t\t-af abWlRsMaxInfIntFldGrp \"left\" $lmargin\n\t\t-af abWlRsMaxInfIntFldGrp \"right\" $rmargin\n\t\t\n\t\t-ac abWlRsDropOffIntFldGrp \"top\" 6 abWlRsMaxInfIntFldGrp\n\t\t-af abWlRsDropOffIntFldGrp \"left\" $lmargin\n\t\t-af abWlRsDropOffIntFldGrp \"right\" $rmargin\n\t\t\n\t\t\n\t\t-ac abWlRsDelSrcChkBx \"top\" 6 abWlRsDropOffIntFldGrp\n\t\t-af abWlRsDelSrcChkBx \"left\" ($lmargin+$lCol)\n\t\t-af abWlRsDelSrcChkBx \"right\" $rmargin\n\t\t\n\t\t-ac abWlRsRplcSknCopyBn \"top\" 6 abWlRsDelSrcChkBx\n\t\t-af abWlRsRplcSknCopyBn \"left\" $lmargin\n\t\t-af abWlRsRplcSknCopyBn \"right\" $rmargin\n\t\t\n\t\tabWlRsReplaceSkinForm\n\t;\n\t\n\tshowWindow abWlRsReplaceSkinWin;\n\t\n}\n\n\nglobal proc abWlReplaceSkin2(){\n\t// second part of replace skin proc -- called by abWlReplaceSkinUI\n\t\n\tif (!`window -exists abWlRsReplaceSkinWin`) return;\n\t\n\tstring $srcObj = `textFieldGrp -q -text abWlRsSknMshTxFldGrp`;\n\tstring $targObj = `textFieldGrp -q -text abWlRsRplmntMshTxFldGrp`;\n\tstring $sc = abWlGetSkinCluster($srcObj);\n\t\n\tfloat $dropOff = `floatFieldGrp -q -v1 abWlRsDropOffIntFldGrp`;\n\tint $maxInfs = `intFieldGrp -q -v1 abWlRsMaxInfIntFldGrp`;\n\tint $delSrcObj = `checkBox -q -value abWlRsDelSrcChkBx`;\n\tint $okToDelete = true;\n\tstring $aHilited[] = `ls -hilite`;\n\tstring $aSelVts[], $aInfs[], $msgStr, $aOrigSel[];\n\t\n\t\n\tif (size($aHilited) == 1 && $aHilited[0] == $srcObj){\n\t\t// now get list of selected vertices\n\t\t$aSelVts = `filterExpand -sm 31`;\n\t}\n\t\n\t// get affecting infs\n\tif (size($aSelVts) > 0){\n\t\t$aInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $sc $aSelVts`;\n\t}else{\n\t\t$aInfs = `skinCluster -q -influence $sc`;\n\t}\n\t\n\t$aOrigSel = `ls -sl`;\n\t\n\tselect -r $aInfs $targObj;\n\t\n\t// bind unskinnedMesh\n\t//skinCluster -toSelectedBones -dr $dropOff -maximumInfluences $maxInfs -omi true $aInfs $targObj;\n\tskinCluster -toSelectedBones -dr $dropOff -maximumInfluences $maxInfs -omi true;\n\t\n\tselect -r $aOrigSel;\n\t\n\tstring $dc = abWlGetSkinCluster($targObj);\n\t\n\tif (`exists copySkinWeights`){\n\t\tcopySkinWeights -smooth -noMirror -surfaceAssociation closestPoint -influenceAssociation name -sourceSkin $sc -destinationSkin $dc;\n\t\tprint ($targObj+\" has been skinned to \"+(size($aInfs))+\" influences and its weights copied from \"+$srcObj+\".\\n\");\n\t}else{\n\t\t$okToDelete = false;\n\t\t$msgStr = \"Unable to copy weights.  \"+$targObj+\" has been skinned to the specified influences.  You can now copy the weights using this script's main UI.\";\n\t\tif ($delSrcObj) $msgStr += \"  The source object will not be deleted.\";\n\t\twarning $msgStr;\n\t}\n\t\n\tif ($delSrcObj && $okToDelete){\n\t\t// delete source mesh\n\t\tskinCluster -e -unbind $sc;\n\t\tdelete $srcObj;\n\t}\n\t\n\tif (size($aHilited) > 0) toggleSelMode;\n\t\n\tif (`window -exists abWlRsReplaceSkinWin`) deleteUI -window abWlRsReplaceSkinWin;\n\t\n}\n\n\nglobal proc abWlReplaceSkin(){\n\t\n\tstring $aSel[] = `filterExpand -sm 12`;\n\t\n\tif (size($aSel) != 2){\n\t\twarning \"Select two meshes\";\n\t\treturn;\n\t}\n\t\n\tstring $cluster1 = abWlGetSkinCluster($aSel[0]);\n\tstring $cluster2 = abWlGetSkinCluster($aSel[1]);\n\t\n\tif ($cluster1 == \"\" && $cluster2 == \"\"){\n\t\twarning \"One of the selected meshes must be skinned\";\n\t\treturn;\n\t}\n\tif ($cluster1 != \"\" && $cluster2 != \"\"){\n\t\twarning \"Only one of the selected meshes should be skinned\";\n\t\treturn;\n\t}\n\t\n\tstring $sMesh, $uMesh, $sc; // skinnedMesh, unskinnedMesh, skinCluster\n\t\n\tif ($cluster1 != \"\"){\n\t\t$sMesh = $aSel[0];\n\t\t$uMesh = $aSel[1];\n\t\t$sc = $cluster1;\n\t}else{\n\t\t$sMesh = $aSel[1];\n\t\t$uMesh = $aSel[0];\n\t\t$sc = $cluster2;\n\t}\n\t\n\tselect -clear;\n\thilite $sMesh;\n\tSelectVertexMask;\n\t\n\tabWlReplaceSkinUI($sMesh, $uMesh);\n\n}\n\n\nglobal proc abWlCheckSym(){\n\t// checks the symmetry of source object (if src and dest are the same) or the src and dest (if different)\n\t\n\tglobal string $abWlPrefs[];\n\t\n\tint $mirrorAxis = $abWlPrefs[2];\n\tint $mirrorPos2Neg = $abWlPrefs[3];\n\tfloat $mTol = $abWlPrefs[6];\n\tint $copyType = $abWlPrefs[4];\n\tstring $aUnSymVerts[];\n\t\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tstring $destObj = `textField -q -text \"doFld\"`;\n\t\n\tif ($srcObj == \"\" || $destObj == \"\"){\n\t\twarning \"A source and destination object must specified before symmetry can be determined.  Unable to proceed.\";\n\t\treturn;\n\t}\n\t\n\tif ($srcObj == $destObj){\n\t\t$aUnSymVerts = abWlBuildSymTable($srcObj, $destObj, $mirrorAxis, $mirrorPos2Neg, $mTol, true, true);\n\t}else{\n\t\tif ($copyType == 4){\n\t\t\t$aUnSymVerts = abWlBuildSymTable($srcObj, $destObj, $mirrorAxis, $mirrorPos2Neg, $mTol, true, true);\n\t\t}else{\n\t\t\twarning \"You must select \\\"Mirror Across Origin\\\" as the copy type in preferences (Options > Options) to perform a mirror across multiple objects.\";\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tif (size($aUnSymVerts) > 0){\n\t\tselect -r $aUnSymVerts;\n\t\twarning (\"The mesh is not symmetrical.  Found \"+(size($aUnSymVerts))+\" asymmetric vert(s).  Try increasing the tolerance under \\\"Mirror Preferences\\\" in the options menu if you believe that your mesh is symmetrical (.005 is a good place to start).\");\n\t}else{\n\t\tselect -clear;\n\t\tprint \"The mesh is symmetrical.\\n\";\n\t}\n\t\n}\n\n\nglobal proc abWlBuildSymTableFromSelObj(){\n\t// builds a symmetry table from a selected object with the same number of verts as the src and destination objects (which must be the same)\n\t\n\tglobal string $abWlSymTable[];\n\tglobal string $abWlOriginVts[];\n\tglobal string $abWlPrefs[];\n\t\n\tstring $srcObj = `textField -q -text \"soFld\"`;\n\tstring $destObj = `textField -q -text \"doFld\"`;\n\tstring $aSel[], $selObj, $srchVtxStr, $rplcVtxStr, $aASymVerts[];\n\tint $aInt[], $srcTotVts, $selTotVts, $i;\n\tint $mirrorAxis = $abWlPrefs[2];\n\tint $mirrorPos2Neg = $abWlPrefs[3];\n\tfloat $mTol = $abWlPrefs[6];\n\t\n\t$aSel = `ls -sl`;\n\tif (size($aSel) == 1){\n\t\t$selObj = $aSel[0];\n\t}else{\n\t\twarning \"Select one object with the same topology as your source/destination object\";\n\t\treturn;\n\t}\n\t\n\tif ($srcObj == $destObj && $srcObj != \"\" && $selObj != $srcObj){\n\t\t\n\t\t$aInt = `polyEvaluate -v $srcObj`;\n\t\t$srcTotVts = $aInt[0];\n\t\t$aInt = `polyEvaluate -v $selObj`;\n\t\t$selTotVts = $aInt[0];\n\t\t\n\t\tif ($srcTotVts == $selTotVts){\n\t\t\t\n\t\t\t$aASymVerts = abWlBuildSymTable($selObj, $selObj, $mirrorAxis, $mirrorPos2Neg, $mTol, true, false);\n\t\t\t\n\t\t\tif (size($abWlSymTable) == 0){\n\t\t\t\twarning \"The symTable is empty.  Unable to proceed.\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// now substitute srcObj in abWlSymTable for selObj\n\t\t\t$srchVtxStr = $selObj+\"\\\\.vtx\\\\[\";\n\t\t\t$rplcVtxStr = $srcObj+\".vtx[\";\n\t\t\t\n\t\t\t// do it for the symTable\n\t\t\tfor ($i=0;$i<size($abWlSymTable);$i++) $abWlSymTable[$i] = `substitute $srchVtxStr $abWlSymTable[$i] $rplcVtxStr`;\n\t\t\t\n\t\t\t// do it for the origin array\n\t\t\tfor ($i=0;$i<size($abWlOriginVts);$i++) $abWlOriginVts[$i] = `substitute $srchVtxStr $abWlOriginVts[$i] $rplcVtxStr`;\n\t\t\t\n\t\t\tif (size($aASymVerts) == 0){\n\t\t\t\tprint (\"Mesh is symmetrical.  SymTable updated with data for \"+(size($abWlSymTable))/2+\" vertices.\\n\");\n\t\t\t}else{\n\t\t\t\tprint (\"Mesh is not symmetrical.  Found \"+(size($aASymVerts))+\" asymmetric vert(s).\\n\");\n\t\t\t}\n\t\t\t\n\t\t}else{\n\t\t\twarning \"Topology on selected object doesn't match the source/destination object.\";\n\t\t\treturn;\n\t\t}\n\t}else{\n\t\tif ($srcObj == \"\" || $destObj == \"\"){\n\t\t\twarning \"You must specify a source and destination object.\";\n\t\t}else if ($srcObj != $destObj){\n\t\t\twarning \"Source and destination object must be the same.\";\n\t\t}else if ($selObj == $srcObj){\n\t\t\twarning \"Selected object cannot be the same as the source/destination object.\";\n\t\t}\n\t}\n}\n\n\nglobal proc abWlDisablePrefs(int $prefsInd, int $enable){\n\t// disables mirror or copy prefs in the options UI based on current selection (makes difference between copy and mirror more obvious)\n\t// prefsInd is 0 for mirror prefs, 1 for copy prefs.  enable will enable or disable (0) prefs specified by prefsInd\n\t\n\tif (!`window -exists abWlPrefsWin`) return;\n\t\n\tif ($prefsInd == 0){\n\t\t// mirror prefs\n\t\ttext -e -en $enable mPrefTxt;\n\t\ttext -e -en $enable axisTxt;\n\t\ttext -e -en $enable mTolTxt;\n\t\tradioButtonGrp -e -en $enable smaRbGrp;\n\t\tcheckBox -e -en $enable awovChkBx;\n\t\tcheckBox -e -en $enable maChkBx;\n\t\ttextField -e -en $enable mTolFld;\n\t}else if ($prefsInd == 1){\n\t\t// copy prefs\n\t\ttext -e -en $enable cPrefTxt;\n\t\ttext -e -en $enable ctTxt;\n\t\ttext -e -en $enable cTolTxt;\n\t\toptionMenu -e -en $enable mvuOm;\n\t\ttextField -e -en $enable cTolFld;\n\t}\n}\n\n\nglobal proc abWlShowExportWeightDialog(){\n\t// shows export weight file save dialog\n\t\n\tstring $aStr[], $aRel[], $skinObj;\n\t\n\t$aStr = `ls -sl -type transform`;\n\t\n\tif (size($aStr) != 1){\n\t\twarning \"Select a single skinned mesh\";\n\t\treturn;\n\t}else{\n\t\t$aRel = `listRelatives -c -type mesh $aStr[0]`;\n\t\tif (size($aRel) > 0){\n\t\t\t$skinObj = $aStr[0];\n\t\t\tselect -r $skinObj;\n\t\t}else{\n\t\t\treturn;\n\t\t}\n\t}\n\t\n\tstring $srcCluster = abWlGetSkinCluster($skinObj);\n\t\n\tif (!objExists($skinObj) || $srcCluster == \"\"){\n\t\twarning (\"Selected Mesh \"+$skinObj+\" is not skinned.  Select a skinned mesh and try again.\");\n\t\treturn;\n\t}\n\t\n\tfileBrowserDialog -m 1 -fc \"abWlShowExportWeightHandler\" -an \"Save\" -filterList \"abWeightLifter Save(*.wsv),*.wsv\" -fileType \"abWeightLifter Save(*.wsv)\" -dialogStyle 1;\n\t\n}\n\n\nglobal proc abWlShowExportWeightHandler(string $fileName, string $type){\n\t// called by export dialog, acts as intermediary between it and exportWeight proc\n\t\n\tstring $aStr[] = `ls -sl`;\n\tstring $skinObj = $aStr[0];\n\t\n\tabWlExportWeights($skinObj, $fileName);\n\t\n}\n\n\nglobal proc abWlExportWeights(string $skinObj, string $fileName){\n\t// exports weights to a text file in form of:\n\t// vertNum>worldX&worldY&worldZ>localX&localY&localZ>inf1&weight1&inf2&weight2&inf3&weight3\n\t// \"**infs\" signifies a special line that contains all of the infs separated by \"&\"\n\t\n\tstring $data, $aChunk[], $vtxStr, $aInfs[], $aInfWeightData[], $aInfs[];\n\tint $aInt[], $totVtx, $i, $k;\n\tfloat $aFlt[];\n\t\n\tstring $dataSep = \">\";\n\tstring $grpSep = \"&\";\n\tstring $nl = \"\\n\";\n\t\n\tstring $srcCluster = abWlGetSkinCluster($skinObj);\n\t\n\tif (!objExists($skinObj) || $srcCluster == \"\"){\n\t\twarning (\"Selected Mesh \"+$skinObj+\" is not skinned.  Select a skinned mesh and try again.\");\n\t\treturn;\n\t}\n\t\n\t$aInt = `polyEvaluate -v $skinObj`; \n\t$totVtx = $aInt[0];\n\t\n\t// init data stuff (save infs)\n\t$aInfs = sort(`skinCluster -q -influence $srcCluster`);\n\t$data += \"**infs>\"+stringArrayToString($aInfs, \"&\");\n\t// done\n\t\n\t\n\t// prog bar init stuff\n\tint $mod;\n\tint $prog;\n\tfloat $flt;\n\tfloat $progNum;\n\tfloat $progDenom;\n\t\n\tfloat $progUpdate = 50.0;\n\t\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Exporting Weights\";\n\t$progDenom = $totVtx;\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t// end prob bar init\n\t\n\t// save skin info\n\tfor ($i=0;$i<$totVtx;$i++){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t//$nl = ($i == 0) ? \"\" : \"\\n\";\n\t\t\n\t\t$vtxStr = $skinObj+\".vtx[\"+$i+\"]\";\n\t\t\n\t\tclear($aChunk);\n\t\t\n\t\t$aChunk[0] = $i;\n\t\t$aFlt = `xform -q -ws -t $vtxStr`;\n\t\t$aChunk[1] = string($aFlt[0])+$grpSep+string($aFlt[1])+$grpSep+string($aFlt[2]);\n\t\t$aFlt = `xform -q -os -t $vtxStr`;\n\t\t$aChunk[2] = string($aFlt[0])+$grpSep+string($aFlt[1])+$grpSep+string($aFlt[2]);\n\t\t\n\t\t$aInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $srcCluster $vtxStr`;\n\t\t$aFlt = `skinPercent -ib .00000000000000000000000000000000000000001 -q -v $srcCluster $vtxStr`;\n\t\t\n\t\t// capture weights for this vtx\n\t\tclear ($aInfWeightData);\n\t\tif (size($aInfs) == size($aFlt)){\n\t\t\t\n\t\t\tfor ($k=0;$k<size($aInfs);$k++){\n\t\t\t\t$aInfWeightData[size($aInfWeightData)] = $aInfs[$k];\n\t\t\t\t$aInfWeightData[size($aInfWeightData)] = string($aFlt[$k]);\n\t\t\t}\n\t\t\t\n\t\t\t$aChunk[3] = stringArrayToString($aInfWeightData, $grpSep);\n\t\t\t\n\t\t}else{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$data += $nl+stringArrayToString($aChunk, $dataSep);\n\t\t\n\t}\n\t\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n\t\n\t// save to file\n\tint $fileId = `fopen $fileName \"w\"`;\n\tfprint $fileId $data;\n\tfclose $fileId;\n\t\n\t/*\n\t\n\t// interpolate weight copy (coming some day?)\n\t\n\tint $pomLoaded = `pluginInfo -query -l nearestPointOnMesh`;\n\tif( !$pomLoaded ){\n\t\tloadPlugin nearestPointOnMesh;\n\t}\n\t\n\tstring $gNode = `createNode nearestPointOnMesh`;\n\t\n\tconnectAttr -f \"milo.worldMesh\" ($gNode+\".inMesh\");\n\t\n\tconnectAttr -f (\"locator1.tx\") ($gNode+\".ipx\");\n\tconnectAttr -f (\"locator1.ty\") ($gNode+\".ipy\");\n\tconnectAttr -f (\"locator1.tz\") ($gNode+\".ipz\");\n\t\n\tint $uu = `getAttr ($gNode+\".nearestFaceIndex\")`;\n\t\n\tselect (\"milo.f[\"+$uu+\"]\");\n\t\n\tdelete $gNode;\n\t\n\t*/\n\t\n}\n\n\nglobal proc abWlShowImportWeightDialog(){\n\t// shows export weight file save dialog\n\t\n\tglobal string $abWlPrefs[];\n\t\n\tstring $aStr[], $aRel[], $skinObj;\n\t\n\tstring $fileName = `fileDialog -m 0 -dm \"*.wsv\"`;\n\t\n\tif ($fileName == \"\"){\n\t\treturn;\n\t}else if (!(endsWith($fileName, \".wsv\"))){\n\t\twarning \"Select a valid weight save file.\";\n\t\treturn;\n\t}\n\t\n\t//$fileName = substituteAllString($fileName, \"\\\\\", \"/\");\n\t\n\t// clear selection and insert fileName\n\t\n\tabWlSoFldCleanup();\n\t\n\t// set global so the other procs know this is a special case\n\t\n\ttextField -e -text $fileName soFld;\n\t$abWlPrefs[13] = $fileName;\n\t\n\tabWlRefreshSoDoBns();\n\tabWlPopulateInfFields(\"soFld\", false, false);\n\t\n}\n\n\nglobal proc string[] abWlGetImportData(string $fileName){\n\t// returns either data from given $fileName as an array of lines, or an empty array if the file can't be found\n\t\n\tstring $aRet[], $nextLine;\n\tint $fileId;\n\t\n\tif (`file -q -ex $fileName` == false) return $aRet;\n\t\n\t$fileId = `fopen $fileName \"r\"`;\n\t$nextLine = `fgetline $fileId`;\n\t\n\twhile (size($nextLine) > 0){\n\t\tif (endsWith($nextLine, \"\\n\")) $nextLine = substring($nextLine, 1, size($nextLine)-1);\n\t\t$aRet[size($aRet)] = $nextLine;\n\t\t$nextLine = `fgetline $fileId`;\n\t}\n\t\n\tfclose $fileId;\n\t\n\treturn $aRet;\n\t\n}\n\n\nglobal proc string[] abWlGetImportInfs(string $fileName){\n\t// retrieves all of the infs from a given import file path\n\t\n\tstring $aRet[], $aData[], $aStr[];\n\tint $fileId, $i;\n\t\n\t$aData = abWlGetImportData($fileName);\n\t\n\tif (size($aData) == 0){\n\t\t// file doesn't exist; clear selection and return\n\t\tselect -clear\n\t\tabWlSelObject(\"soFld\");\n\t\t\n\t\treturn $aRet;\n\t}\n\t\n\tif (startsWith($aData[0], \"**infs\")){\n\t\t\n\t\t$aStr = stringToStringArray($aData[0],\">\");\n\t\t$aRet = stringToStringArray($aStr[1],\"&\");\n\t\t\n\t}\n\t\n\treturn $aRet;\n}\n\n\nglobal proc abWlImportWeights(string $srcObj, string $destObj, float $tol, int $normalize, int $copyType){\n\t\n\t//sets up vertCopyList and sends it to abWlWeightCopy for mesh to mesh copies\n\t//mode is 1 worldSpace, 2 objectSpace, 3 vertexNum\n\t\n\tglobal string $abWlSrcInf[];\n\tglobal string $abWlDestInf[];\n\tglobal int $abWlInfConnections[];\n\tstring $destVtx, $srcVtx;\n\tint $i, $j, $k;\n\t\n\t// import data\t\n\tstring $aData[] = abWlGetImportData($srcObj);\n\tif (size($aData) <= 1){\n\t\twarning \"The weight save file is bad.  Unable to proceed.\";\n\t\treturn;\n\t}\n\t\n\t// parse data\n\t// vertNum>worldX&worldY&worldZ>localX&localY&localZ>inf1&weight1&inf2&weight2&inf3&weight3\n\t\n\tfloat $aImpX[], $aImpY[], $aImpZ[];\n\tstring $aImpWeightData[], $aSubData1[], $aSubData2[], $aSrcVts[];\n\t\n\tint $spaceInd = ($copyType == 1) ? 1 : 2; // worldSpace atts are at index 1 of aData, localSpace at index 2\n\t\n\tfor ($i=1;$i<size($aData);$i++){\n\t\t\n\t\t$aSubData1 = stringToStringArray($aData[$i], \">\");\n\t\t$aSubData2 = stringToStringArray($aSubData1[$spaceInd], \"&\");\n\t\t$aImpX[size($aImpX)] = float($aSubData2[0]);\n\t\t$aImpY[size($aImpY)] = float($aSubData2[1]);\n\t\t$aImpZ[size($aImpZ)] = float($aSubData2[2]);\n\t\t$aImpWeightData[size($aImpWeightData)] = $aSubData1[3];\n\t\t\n\t}\n\t\n\tint $totSrcVts = size($aImpX);\n\t\n\t$aInt = `polyEvaluate -v $destObj`;\n\tint $totDestVts = $aInt[0];\n\tfloat $aFlt[];\n\tfloat $progUpdate = 50.0;\n\t\n\tstring $aDestVts[], $aVtsToCopy[];\n\tfor ($i=0;$i<$totDestVts;$i++){\n\t\t$aDestVts[size($aDestVts)] = $destObj+\".vtx[\"+$i+\"]\";\n\t}\n\t\n\tstring $aSelVts[] = `filterExpand -sm 31`;\n\tif (size($aSelVts) == 0){\n\t\t$aVtsToCopy = $aDestVts;\n\t}else{\n\t\t\n\t\t//make sure only destObj verts are selected\n\t\tstring $myIntersector = `stringArrayIntersector`;\n\t\tstringArrayIntersector -edit -intersect $aDestVts $myIntersector;\n\t\tstringArrayIntersector -edit -intersect $aSelVts $myIntersector;\n\t\t$aVtsToCopy = `stringArrayIntersector -query $myIntersector`;\n\t\tdeleteUI $myIntersector;\n\t\t\n\t}\n\t\n\tint $mod;\n\tint $prog;\n\tfloat $flt;\n\tfloat $progNum;\n\tfloat $progDenom;\n\t\n\tint $totVtsToCopy = size($aVtsToCopy);\n\tstring $aDestCopyList[];\n\tint $aSrcCopyIndList[];\n\t\n\tif ($copyType == 1 || $copyType == 2){\n\t\t\n\t\tint $matchInd;\n\t\tfloat $floatMatchFlag = -666666.0;\n\t\t\n\t\tstring $space = ($copyType == 1) ? \"-ws\" : \"-os\";\n\t\t\n\t\twaitCursor -state on;\n\t\tprogressWindow -title \"Working\" -progress 0 -status \"Checking Overlap\";\n\t\t$progDenom = $totVtsToCopy;\n\t\t$flt = ceil($progDenom/$progUpdate);\n\t\t$mod = $flt;\n\t\t\n\t\tfor ($i=0;$i<$totVtsToCopy;$i++){\n\t\t\t\n\t\t\t//prog win\n\t\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t\t$progNum = $i;\n\t\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\t\tprogressWindow -e -progress $prog;\n\t\t\t}\n\t\t\t//end prog win\n\t\t\t\n\t\t\t$destVtx = $aVtsToCopy[$i];\n\t\t\t$aFlt = eval(\"xform \"+$space+\" -q -translation \"+$destVtx);\n\t\t\tfor ($j=0;$j<$totSrcVts;$j++){\n\t\t\t\tif ($aFlt[0] == $floatMatchFlag){ //this might slow things down, I'll have to check\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (abs($aImpX[$j] - $aFlt[0]) < $tol){\n\t\t\t\t\t//passed the first gate\n\t\t\t\t\tif (abs($aImpY[$j] - $aFlt[1]) < $tol){\n\t\t\t\t\t\t//second, and...\n\t\t\t\t\t\tif (abs($aImpZ[$j] - $aFlt[2]) < $tol){\n\t\t\t\t\t\t\t//match!\n\t\t\t\t\t\t\t$aSrcCopyIndList[size($aSrcCopyIndList)] = $j;\n\t\t\t\t\t\t\t$aDestCopyList[size($aDestCopyList)] = $destVtx;\n\t\t\t\t\t\t\t$aImpX[$j] = $aImpY[$j] = $aImpZ[$j] = $floatMatchFlag;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tprogressWindow -endProgress;\n\t\twaitCursor -state off;\n\t\t\n\t}else if ($copyType == 3){\n\t\t//copy by vtx (I doubt anyone but me will ever need this)\n\t\t\n\t\tstring $match;\n\t\tint $destVtxNum;\n\t\t\n\t\tfor ($i=0;$i<$totVtsToCopy;$i++){\n\t\t\t\n\t\t\t$destVtx = $aVtsToCopy[$i];\n\t\t\t\n\t\t\t// get dest vtx num\n\t\t\t$match = `match \"vtx\\[[0-9]+\\]$\" $destVtx`;\n\t\t\t$destVtxNum = int(substring($match, 5, size($match)-1));\n\t\t\t\n\t\t\t// put them in the arrays\n\t\t\t$aSrcCopyIndList[size($aSrcCopyIndList)] = $destVtxNum;\n\t\t\t$aDestCopyList[size($aDestCopyList)] = $destVtx;\n\t\t\t\n\t\t}\n\t}\n\t\n\t\n\t// if the copy arrays are populated then there's a copyin' about to commence (hee haw)\n\t\n\tglobal string $abWlPrefs[];\n\t\n\tstring $destCluster = abWlGetSkinCluster($destObj);\n\tstring $tSrcInfs[], $tCurInfs[], $tDestInfsCopy[], $tvStr;\n\tfloat $tWeight;\n\tint $destVtxInd, $srcVtxInd;\n\tstring $tInfName, $tSrcInfName, $tDestInfName;\n\tint $aInitDestLock[]; //stores init state of lockweights\n\t\n\tstring $srcConLU[]; //source connection lookup\n\tstring $destConLU[]; //dest connection lookup\n\t\n\tint $cullMatch, $tInd;\n\tstring $aSrcInfs[], $aDestInfs[], $conInf;\n\tfloat $aSrcWeights[], $aDestWeights[];\n\tfloat $cullMatchTol = .0000000001;\n\tint $vertCounter = 0;\n\t\n\t\n\t//make sure all infs are unlocked so weights can be pruned to 0\n\tfor ($i=0;$i<size($abWlInfConnections);$i+=2){\n\t\t$tDestInfName = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t\t$aInitDestLock[size($aInitDestLock)] = `skinCluster -inf $tDestInfName -q -lockWeights $destCluster`;\n\t\tskinCluster -e -inf $tDestInfName -lockWeights 0 $destCluster; \n\t\t\n\t\t//make 2 lists to speed lookup of connections -- first with connected srcnames, second with destnames at corresponding indices\n\t\t$srcConLU[size($srcConLU)] = $abWlSrcInf[$abWlInfConnections[$i]];\n\t\t$destConLU[size($destConLU)] = $abWlDestInf[$abWlInfConnections[$i+1]];\n\t}\n\t\n\tint $scNormWeights = `getAttr ($destCluster+\".normalizeWeights\")`;\n\tif ($scNormWeights == (1-$normalize)){\n\t\tsetAttr ($destCluster+\".normalizeWeights\") $normalize;\n\t}\n\t\n\twaitCursor -state on;\n\tprogressWindow -title \"Working\" -progress 0 -status \"Copying Weights\";\n\t$progDenom = size($aSrcCopyIndList);\n\t$flt = ceil($progDenom/$progUpdate);\n\t$mod = $flt;\n\t\n\tfor ($i=0;$i<size($aSrcCopyIndList);$i++){\n\t\t\n\t\t//prog win\n\t\tif (($i % $mod) == 0){ //make the progress bar a bit less resource intensive\n\t\t\t$progNum = $i;\n\t\t\t$prog = ($progNum/$progDenom)*100.0;\n\t\t\tprogressWindow -e -progress $prog;\n\t\t}\n\t\t//end prog win\n\t\t\n\t\t$srcVtxInd = $aSrcCopyIndList[$i];\n\t\t$destVtx = $aDestCopyList[$i];\n\t\t\n\t\t//tokenize weight data\n\t\t$aSubData = stringToStringArray($aImpWeightData[$srcVtxInd], \"&\");\n\t\t\n\t\t// cull verts with the same weighting\n\t\tclear($aSrcInfs);\n\t\tclear($aSrcWeights);\n\t\tfor ($j=0;$j<size($aSubData);$j+=2){\n\t\t\t$aSrcInfs[size($aSrcInfs)] = $aSubData[$j];\n\t\t\t$aSrcWeights[size($aSrcWeights)] = float($aSubData[$j+1]);\n\t\t}\n\t\t\t\n\t\t$cullMatch = 0;\n\t\t$aDestInfs = `skinPercent -ib .00000000000000000000000000000000000000001 -q -t $destCluster $destVtx`;\n\t\t$aDestWeights = `skinPercent -ib .00000000000000000000000000000000000000001 -q -v $destCluster $destVtx`;\n\t\t\n\t\tif (size($aSrcInfs) == size($aDestInfs)){\n\t\t\tfor ($j=0;$j<size($aSrcInfs);$j++){\n\t\t\t\t$tInd = abWlStrGetPos($aSrcInfs[$j], $abWlSrcInf);\n\t\t\t\tif ($tInd >= 0){\n\t\t\t\t\t$conInf = $destConLU[$tInd];\n\t\t\t\t\tif (abWlStrGetPos($conInf, $aDestInfs) != -1){\n\t\t\t\t\t\tif ($aSrcWeights[$tInd] - $aDestWeights[$tInd] < $cullMatchTol){\n\t\t\t\t\t\t\t$cullMatch ++;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// if the weights alreadt match, this vertex can be skipped\n\t\tif ($cullMatch == size($aSrcInfs)){\n\t\t\tcontinue;\n\t\t}else{\n\t\t\t$vertCounter ++;\n\t\t}\n\t\t// done with weight check\n\t\t\n\t\t//get corresponding dest infs to copy to\n\t\t$tvStr = \"\";\n\t\tclear($tCurInfs);\n\t\tfor ($j=0;$j<size($aSubData);$j+=2){\n\t\t\t\n\t\t\t$tSrcInfName = $aSubData[$j];\n\t\t\t$tWeight = float($aSubData[$j+1]);\n\t\t\t\n\t\t\t$destVtxInd = abWlStrGetPos($tSrcInfName, $srcConLU);\n\t\t\tif ($destVtxInd != -1){\n\t\t\t\t$tDestInfName = $destConLU[$destVtxInd];\n\t\t\t\t\n\t\t\t\t$tvStr += \" -tv \"+$tDestInfName+\" \"+$tWeight;\n\t\t\t\t$tCurInfs[size($tCurInfs)] = $tDestInfName;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tif ($tvStr != \"\"){\n\t\t\t$tDestInfsCopy = $abWlDestInf;\n\t\t\t$tDestInfsCopy = stringArrayRemove($tCurInfs, $tDestInfsCopy); //tDestInfsCopy is now all infs on destobj that will be set to 0\n\t\t\tfor ($tDestInfName in $tDestInfsCopy){\n\t\t\t\t$tvStr += \" -tv \"+$tDestInfName+\" 0\";\n\t\t\t}\n\t\t\t\n\t\t\teval(\"skinPercent -nrm 0\"+$tvStr+\" \"+$destCluster+\" \"+$destVtx);\n\t\t\tif($normalize){\n\t\t\t\tskinPercent -nrm 1 -prw .00000000000000000000000000000000000000001 $destCluster $destVtx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tsetAttr ($destCluster+\".normalizeWeights\") $scNormWeights;\n\tfor ($i=0;$i<size($aInitDestLock);$i++){\n\t\tskinCluster -e -inf $destConLU[$i] -lockWeights $aInitDestLock[$i] $destCluster;\n\t}\n\tprogressWindow -endProgress;\n\twaitCursor -state off;\n\t\n\tprint (\"Matched \"+(size($aDestCopyList))+\" vert(s).  \"+$vertCounter+\" vertex weight(s) copied\\n\");\n\t\n}\n\n\n\n\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 16
        -height 11
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "//" 
        -enableBackground 0
        -align "center" 
        -label "//" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "arrowUp.png" 
        -image1 "arrowUp.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r Male_Rig_0076:left_lowerArm_mid_cluster_ctrl Male_Rig_0076:left_midArm_cluster_ctrl Male_Rig_0076:right_upperArm_mid_cluster_ctrl Male_Rig_0076:right_lowerArm_mid_cluster_ctrl Male_Rig_0076:neck_mid_cluster_ctrl Male_Rig_0076:left_upperLeg_mid_cluster_ctrl Male_Rig_0076:left_lowerLeg_mid_cluster_ctrl Male_Rig_0076:right_upperLeg_mid_cluster_ctrl Male_Rig_0076:right_lowerLeg_mid_cluster_ctrl Male_Rig_0076:left_index_a_jnt_ctrl Male_Rig_0076:left_index_b_jnt_ctrl Male_Rig_0076:left_index_c_jnt_ctrl Male_Rig_0076:left_mid_a_jnt_ctrl Male_Rig_0076:left_mid_b_jnt_ctrl Male_Rig_0076:left_mid_c_jnt_ctrl Male_Rig_0076:left_ring_a_jnt_ctrl Male_Rig_0076:left_ring_b_jnt_ctrl Male_Rig_0076:left_ring_c_jnt_ctrl Male_Rig_0076:left_pinky_a_jnt_ctrl Male_Rig_0076:left_pinky_b_jnt_ctrl Male_Rig_0076:left_pinky_c_jnt_ctrl Male_Rig_0076:left_thumb_a_jnt_ctrl Male_Rig_0076:left_thumb_b_jnt_ctrl Male_Rig_0076:left_thumb_c_jnt_ctrl Male_Rig_0076:right_arm_attribute_ctrl Male_Rig_0076:left_arm_attribute_ctrl Male_Rig_0076:right_index_a_jnt_ctrl Male_Rig_0076:right_index_b_jnt_ctrl Male_Rig_0076:right_index_c_jnt_ctrl Male_Rig_0076:right_mid_a_jnt_ctrl Male_Rig_0076:right_mid_b_jnt_ctrl Male_Rig_0076:right_mid_c_jnt_ctrl Male_Rig_0076:right_ring_a_jnt_ctrl Male_Rig_0076:right_ring_b_jnt_ctrl Male_Rig_0076:right_ring_c_jnt_ctrl Male_Rig_0076:right_pinky_a_jnt_ctrl Male_Rig_0076:right_pinky_b_jnt_ctrl Male_Rig_0076:right_pinky_c_jnt_ctrl Male_Rig_0076:right_thumb_a_jnt_ctrl Male_Rig_0076:right_thumb_b_jnt_ctrl Male_Rig_0076:right_thumb_c_jnt_ctrl Male_Rig_0076:root_jnt_ctrl Male_Rig_0076:midSpine_ctrl Male_Rig_0076:pelvis_jnt_ctrl Male_Rig_0076:spine_fk_a_jnt_ctrl Male_Rig_0076:spine_fk_b_jnt_ctrl Male_Rig_0076:spine_fk_c_jnt_ctrl Male_Rig_0076:chest_jnt_ctrl Male_Rig_0076:left_clavicle_jnt_ctrl Male_Rig_0076:left_fk_upperArm_ctrl Male_Rig_0076:left_fk_lowerArm_ctrl Male_Rig_0076:left_fk_arm_end_ctrl Male_Rig_0076:right_clavicle_jnt_ctrl Male_Rig_0076:right_fk_upperArm_ctrl Male_Rig_0076:right_fk_lowerArm_ctrl Male_Rig_0076:right_fk_arm_end_ctrl Male_Rig_0076:neck_jnt_ctrl Male_Rig_0076:head_jnt_ctrl Male_Rig_0076:jaw_ctrl Male_Rig_0076:left_low_eyeball_0_jnt_ctrl Male_Rig_0076:left_low_eyeball_1_jnt_ctrl Male_Rig_0076:left_low_eyeball_2_jnt_ctrl Male_Rig_0076:left_low_eyeball_3_jnt_ctrl Male_Rig_0076:left_up_eyeball_0_jnt_ctrl Male_Rig_0076:left_up_eyeball_1_jnt_ctrl Male_Rig_0076:left_up_eyeball_2_jnt_ctrl Male_Rig_0076:left_up_eyeball_3_jnt_ctrl Male_Rig_0076:right_low_eyeball_0_jnt_ctrl Male_Rig_0076:right_low_eyeball_1_jnt_ctrl Male_Rig_0076:right_low_eyeball_2_jnt_ctrl Male_Rig_0076:right_low_eyeball_3_jnt_ctrl Male_Rig_0076:right_up_eyeball_0_jnt_ctrl Male_Rig_0076:right_up_eyeball_1_jnt_ctrl Male_Rig_0076:right_up_eyeball_2_jnt_ctrl Male_Rig_0076:right_up_eyeball_3_jnt_ctrl Male_Rig_0076:fringe_1_IK_ctrl Male_Rig_0076:fringe_2_IK_ctrl Male_Rig_0076:fringe_3_IK_ctrl Male_Rig_0076:joint3_ctrl Male_Rig_0076:joint1_ctrl Male_Rig_0076:right_mouth_corner_ctrl Male_Rig_0076:left_mouth_corner_ctrl Male_Rig_0076:upper_lip_ctrl Male_Rig_0076:left_leg_IK_ctrl Male_Rig_0076:left_knee_ctrl Male_Rig_0076:right_leg_IK_ctrl Male_Rig_0076:right_knee_ctrl Male_Rig_0076:right_foot_attribute_ctrl Male_Rig_0076:left_foot_attribute_ctrl Male_Rig_0076:left_eyebrow_top_cluster_ctrl Male_Rig_0076:left_eyebrow_mid_cluster_ctrl Male_Rig_0076:left_eyebrow_bot_cluster_ctrl Male_Rig_0076:right_eyebrow_top_cluster_ctrl Male_Rig_0076:right_eyebrow_mid_cluster_ctrl Male_Rig_0076:right_eyebrow_bot_cluster_ctrl Male_Rig_0076:lower_lip_ctrl ;\n" 
        -enableBackground 0
        -align "center" 
        -label "select -r Male_Rig_0076:left_lowerArm_mid_cluster_ctrl Male_Rig_..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SEB" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -add Male_Rig_0076:left_lowerArm_mid_cluster_ctrl Male_Rig_0076:left_midArm_cluster_ctrl Male_Rig_0076:right_upperArm_mid_cluster_ctrl Male_Rig_0076:right_lowerArm_mid_cluster_ctrl Male_Rig_0076:neck_mid_cluster_ctrl Male_Rig_0076:left_upperLeg_mid_cluster_ctrl Male_Rig_0076:left_lowerLeg_mid_cluster_ctrl Male_Rig_0076:right_upperLeg_mid_cluster_ctrl Male_Rig_0076:right_lowerLeg_mid_cluster_ctrl Male_Rig_0076:left_index_a_jnt_ctrl Male_Rig_0076:left_index_b_jnt_ctrl Male_Rig_0076:left_index_c_jnt_ctrl Male_Rig_0076:left_mid_a_jnt_ctrl Male_Rig_0076:left_mid_b_jnt_ctrl Male_Rig_0076:left_mid_c_jnt_ctrl Male_Rig_0076:left_ring_a_jnt_ctrl Male_Rig_0076:left_ring_b_jnt_ctrl Male_Rig_0076:left_ring_c_jnt_ctrl Male_Rig_0076:left_pinky_a_jnt_ctrl Male_Rig_0076:left_pinky_b_jnt_ctrl Male_Rig_0076:left_pinky_c_jnt_ctrl Male_Rig_0076:left_thumb_a_jnt_ctrl Male_Rig_0076:left_thumb_b_jnt_ctrl Male_Rig_0076:left_thumb_c_jnt_ctrl Male_Rig_0076:right_arm_attribute_ctrl Male_Rig_0076:left_arm_attribute_ctrl Male_Rig_0076:right_index_a_jnt_ctrl Male_Rig_0076:right_index_b_jnt_ctrl Male_Rig_0076:right_index_c_jnt_ctrl Male_Rig_0076:right_mid_a_jnt_ctrl Male_Rig_0076:right_mid_b_jnt_ctrl Male_Rig_0076:right_mid_c_jnt_ctrl Male_Rig_0076:right_ring_a_jnt_ctrl Male_Rig_0076:right_ring_b_jnt_ctrl Male_Rig_0076:right_ring_c_jnt_ctrl Male_Rig_0076:right_pinky_a_jnt_ctrl Male_Rig_0076:right_pinky_b_jnt_ctrl Male_Rig_0076:right_pinky_c_jnt_ctrl Male_Rig_0076:right_thumb_a_jnt_ctrl Male_Rig_0076:right_thumb_b_jnt_ctrl Male_Rig_0076:right_thumb_c_jnt_ctrl Male_Rig_0076:root_jnt_ctrl Male_Rig_0076:midSpine_ctrl Male_Rig_0076:pelvis_jnt_ctrl Male_Rig_0076:spine_fk_a_jnt_ctrl Male_Rig_0076:spine_fk_b_jnt_ctrl Male_Rig_0076:spine_fk_c_jnt_ctrl Male_Rig_0076:chest_jnt_ctrl Male_Rig_0076:left_clavicle_jnt_ctrl Male_Rig_0076:left_fk_upperArm_ctrl Male_Rig_0076:left_fk_lowerArm_ctrl Male_Rig_0076:left_fk_arm_end_ctrl Male_Rig_0076:right_clavicle_jnt_ctrl Male_Rig_0076:right_fk_upperArm_ctrl Male_Rig_0076:right_fk_lowerArm_ctrl Male_Rig_0076:right_fk_arm_end_ctrl Male_Rig_0076:neck_jnt_ctrl Male_Rig_0076:head_jnt_ctrl Male_Rig_0076:jaw_ctrl Male_Rig_0076:left_low_eyeball_0_jnt_ctrl Male_Rig_0076:left_low_eyeball_1_jnt_ctrl Male_Rig_0076:left_low_eyeball_2_jnt_ctrl Male_Rig_0076:left_low_eyeball_3_jnt_ctrl Male_Rig_0076:left_up_eyeball_0_jnt_ctrl Male_Rig_0076:left_up_eyeball_1_jnt_ctrl Male_Rig_0076:left_up_eyeball_2_jnt_ctrl Male_Rig_0076:left_up_eyeball_3_jnt_ctrl Male_Rig_0076:right_low_eyeball_0_jnt_ctrl Male_Rig_0076:right_low_eyeball_1_jnt_ctrl Male_Rig_0076:right_low_eyeball_2_jnt_ctrl Male_Rig_0076:right_low_eyeball_3_jnt_ctrl Male_Rig_0076:right_up_eyeball_0_jnt_ctrl Male_Rig_0076:right_up_eyeball_1_jnt_ctrl Male_Rig_0076:right_up_eyeball_2_jnt_ctrl Male_Rig_0076:right_up_eyeball_3_jnt_ctrl Male_Rig_0076:fringe_1_IK_ctrl Male_Rig_0076:fringe_2_IK_ctrl Male_Rig_0076:fringe_3_IK_ctrl Male_Rig_0076:joint3_ctrl Male_Rig_0076:joint1_ctrl Male_Rig_0076:right_mouth_corner_ctrl Male_Rig_0076:left_mouth_corner_ctrl Male_Rig_0076:upper_lip_ctrl Male_Rig_0076:left_leg_IK_ctrl Male_Rig_0076:left_knee_ctrl Male_Rig_0076:right_leg_IK_ctrl Male_Rig_0076:right_knee_ctrl Male_Rig_0076:right_foot_attribute_ctrl Male_Rig_0076:left_foot_attribute_ctrl Male_Rig_0076:left_eyebrow_top_cluster_ctrl Male_Rig_0076:left_eyebrow_mid_cluster_ctrl Male_Rig_0076:left_eyebrow_bot_cluster_ctrl Male_Rig_0076:right_eyebrow_top_cluster_ctrl Male_Rig_0076:right_eyebrow_mid_cluster_ctrl Male_Rig_0076:right_eyebrow_bot_cluster_ctrl Male_Rig_0076:lower_lip_ctrl ;\nselect -add Male_Rig_0076:eye_master_ctrl ;\nselect -add Male_Rig_0076:left_arm_IK_ctrl ;\nselect -add Male_Rig_0076:left_arm_elbow_ctrl2 ;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r Male_Rig_0076:left_leg_IK_ctrl ;\nselect -add Male_Rig_0076:left_knee_ctrl ;\nselect -add Male_Rig_0076:right_knee_ctrl ;\nselect -add Male_Rig_0076:right_leg_IK_ctrl ;\nselect -add Male_Rig_0076:root_jnt_ctrl ;" 
        -enableBackground 0
        -align "center" 
        -label "select -r Male_Rig_0076:left_leg_IK_ctrl ;\nselect -add Male_Rig_..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "MOVE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -r Male_Rig_0076:left_leg_IK_ctrl ;\nselect -add Male_Rig_0076:left_knee_ctrl ;\nselect -add Male_Rig_0076:right_knee_ctrl ;\nselect -add Male_Rig_0076:right_leg_IK_ctrl ;\nselect -add Male_Rig_0076:root_jnt_ctrl ;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r purse_FINAL:purse4 purse_FINAL:main_ctrl purse_FINAL:lid_ctrl FemaleCharacter_rig_0036:left_leg_IK_ctrl FemaleCharacter_rig_0036:left_knee_ctrl FemaleCharacter_rig_0036:right_leg_IK_ctrl FemaleCharacter_rig_0036:right_knee_ctrl FemaleCharacter_rig_0036:right_foot_attribute_ctrl FemaleCharacter_rig_0036:left_foot_attribute_ctrl FemaleCharacter_rig_0036:left_arm_attribute_ctrl FemaleCharacter_rig_0036:right_arm_attribute_ctrl FemaleCharacter_rig_0036:left_upperArm_mid_cluster_ctrl FemaleCharacter_rig_0036:left_lowerArm_mid_cluster_ctrl FemaleCharacter_rig_0036:right_upperArm_mid_cluster_ctrl FemaleCharacter_rig_0036:right_lowerArm_mid_cluster_ctrl FemaleCharacter_rig_0036:right_upperLeg_mid_cluster_ctrl FemaleCharacter_rig_0036:right_lowerLeg_mid_cluster_ctrl FemaleCharacter_rig_0036:left_upperLeg_mid_cluster_ctrl FemaleCharacter_rig_0036:left_lowerLeg_mid_cluster_ctrl FemaleCharacter_rig_0036:hair_bot_cluster_ctrl FemaleCharacter_rig_0036:Lt_hair_bot_cluster_ctrl FemaleCharacter_rig_0036:Rt_hair_bot_cluster_ctrl FemaleCharacter_rig_0036:left_eyebrow_top_cluster_ctrl FemaleCharacter_rig_0036:left_eyebrow_mid_cluster_ctrl FemaleCharacter_rig_0036:left_eyebrow_bot_cluster_ctrl FemaleCharacter_rig_0036:right_eyebrow_top_cluster_ctrl FemaleCharacter_rig_0036:right_eyebrow_mid_cluster_ctrl FemaleCharacter_rig_0036:right_eyebrow_bot_cluster_ctrl FemaleCharacter_rig_0036:neck_mid_cluster_ctrl FemaleCharacter_rig_0036:root_ctrl FemaleCharacter_rig_0036:pelvis_jnt_ctrl FemaleCharacter_rig_0036:chest_jnt_ctrl FemaleCharacter_rig_0036:left_clavicle_ctrl FemaleCharacter_rig_0036:left_fk_upperArm_ctrl FemaleCharacter_rig_0036:left_fk_lowerArm_ctrl FemaleCharacter_rig_0036:left_hand_fk_ctrl FemaleCharacter_rig_0036:right_clavicle_ctrl FemaleCharacter_rig_0036:right_fk_upperArm_ctrl FemaleCharacter_rig_0036:right_fk_lowerArm_ctrl FemaleCharacter_rig_0036:right_hand_jnt_ctrl FemaleCharacter_rig_0036:bow_root_jnt_ctrl FemaleCharacter_rig_0036:left_bow_plume_a_jnt_ctrl FemaleCharacter_rig_0036:left_bow_plume_b_jnt_ctrl FemaleCharacter_rig_0036:left_bow_tassle_a_jnt_ctrl FemaleCharacter_rig_0036:left_bow_tassle_b_jnt_ctrl FemaleCharacter_rig_0036:right_bow_tassle_a_jnt_ctrl FemaleCharacter_rig_0036:right_bow_tassle_b_jnt_ctrl FemaleCharacter_rig_0036:right_bow_plume_a_jnt_ctrl FemaleCharacter_rig_0036:right_bow_plume_b_jnt_ctrl FemaleCharacter_rig_0036:neck_FK_a_jnt_ctrl FemaleCharacter_rig_0036:neck_FK_b_jnt_ctrl FemaleCharacter_rig_0036:head_jnt_ctrl FemaleCharacter_rig_0036:flower_jnt_ctrl FemaleCharacter_rig_0036:top_petal_jnt_ctrl FemaleCharacter_rig_0036:right_petal_jnt_ctrl FemaleCharacter_rig_0036:bot_petal_jnt_ctrl FemaleCharacter_rig_0036:left_petal_jnt_ctrl FemaleCharacter_rig_0036:Lt_hairStrand_ctrl FemaleCharacter_rig_0036:Rt_hairStrand_IK_ctrl FemaleCharacter_rig_0036:fringe_IK_ctrl FemaleCharacter_rig_0036:right_lowerEyelid_2_jnt_ctrl FemaleCharacter_rig_0036:right_lowerEyelid_1_jnt_ctrl FemaleCharacter_rig_0036:right_lowerEyelid_0_jnt_ctrl FemaleCharacter_rig_0036:right_upperEyelid_3_jnt_ctrl FemaleCharacter_rig_0036:right_upperEyelid_2_jnt_ctrl FemaleCharacter_rig_0036:right_upperEyelid_1_jnt_ctrl FemaleCharacter_rig_0036:right_upperEyelid_0_jnt_ctrl FemaleCharacter_rig_0036:right_lowerEyelid_3_jnt_ctrl FemaleCharacter_rig_0036:left_upperEyelid_0_jnt_ctrl FemaleCharacter_rig_0036:left_upperEyelid_1_jnt_ctrl FemaleCharacter_rig_0036:left_upperEyelid_2_jnt_ctrl FemaleCharacter_rig_0036:left_upperEyelid_3_jnt_ctrl FemaleCharacter_rig_0036:left_lowerEyelid_2_jnt_ctrl FemaleCharacter_rig_0036:left_lowerEyelid_3_jnt_ctrl FemaleCharacter_rig_0036:left_lowerEyelid_1_jnt_ctrl FemaleCharacter_rig_0036:left_lowerEyelid_0_jnt_ctrl FemaleCharacter_rig_0036:jaw_ctrl FemaleCharacter_rig_0036:left_mouth_ctrl FemaleCharacter_rig_0036:right_mouth_ctrl FemaleCharacter_rig_0036:spine_mid_ctrl FemaleCharacter_rig_0036:spine_a_FK_jnt_ctrl FemaleCharacter_rig_0036:spine_c_FK_jnt_ctrl FemaleCharacter_rig_0036:spine_e_FK_jnt_ctrl FemaleCharacter_rig_0036:left_thumb_a_bind_jnt_ctrl FemaleCharacter_rig_0036:left_thumb_b_bind_jnt_ctrl FemaleCharacter_rig_0036:left_thumb_c_bind_jnt_ctrl FemaleCharacter_rig_0036:left_index_a_bind_jnt_ctrl FemaleCharacter_rig_0036:left_index_b_bind_jnt_ctrl FemaleCharacter_rig_0036:left_index_c_bind_jnt_ctrl FemaleCharacter_rig_0036:left_middle_a_bind_jnt_ctrl FemaleCharacter_rig_0036:left_middle_b_bind_jnt_ctrl FemaleCharacter_rig_0036:left_middle_c_bind_jnt_ctrl FemaleCharacter_rig_0036:left_ring_a_bind_jnt_ctrl FemaleCharacter_rig_0036:left_ring_b_bind_jnt_ctrl FemaleCharacter_rig_0036:left_ring_c_bind_jnt_ctrl FemaleCharacter_rig_0036:left_pinky_root_bind_jnt_ctrl FemaleCharacter_rig_0036:left_pinky_a_bind_jnt_ctrl FemaleCharacter_rig_0036:left_pinky_b_bind_jnt_ctrl FemaleCharacter_rig_0036:left_pinky_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_pinky_root_bind_jnt_ctrl FemaleCharacter_rig_0036:right_pinky_a_bind_jnt_ctrl FemaleCharacter_rig_0036:right_pinky_b_bind_jnt_ctrl FemaleCharacter_rig_0036:right_pinky_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_ring_a_bind_jnt_ctrl FemaleCharacter_rig_0036:right_ring_b_bind_jnt_ctrl FemaleCharacter_rig_0036:right_ring_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_middle_a_bind_jnt_ctrl FemaleCharacter_rig_0036:right_middle_b_bind_jnt_ctrl FemaleCharacter_rig_0036:right_middle_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_index_a_bind_jnt_ctrl FemaleCharacter_rig_0036:right_index_b_bind_jnt_ctrl FemaleCharacter_rig_0036:right_index_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_thumb_a_bind_jnt_ctrl FemaleCharacter_rig_0036:right_thumb_b_bind_jnt_ctrl FemaleCharacter_rig_0036:right_thumb_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_collarRibbon_1_ctrl FemaleCharacter_rig_0036:right_collarRibbon_2_ctrl FemaleCharacter_rig_0036:right_collarRibbon_3_ctrl FemaleCharacter_rig_0036:right_collarRibbon_4_ctrl FemaleCharacter_rig_0036:right_collarRibbon_5_ctrl FemaleCharacter_rig_0036:right_collarRibbon_6_ctrl FemaleCharacter_rig_0036:left_collarRibbon_1_ctrl FemaleCharacter_rig_0036:left_collarRibbon_2_ctrl FemaleCharacter_rig_0036:left_collarRibbon_3_ctrl FemaleCharacter_rig_0036:left_collarRibbon_4_ctrl FemaleCharacter_rig_0036:left_collarRibbon_5_ctrl FemaleCharacter_rig_0036:left_collarRibbon_6_ctrl FemaleCharacter_rig_0036:eye_master_ctrl FemaleCharacter_rig_0036:right_eyeball_ctrl FemaleCharacter_rig_0036:left_eye_ctrl ;\n" 
        -enableBackground 0
        -align "center" 
        -label "select -r purse_FINAL:purse4 purse_FINAL:main_ctrl purse_FINAL:l..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "PENNY" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -add FemaleCharacter_rig_0036:left_leg_IK_ctrl FemaleCharacter_rig_0036:left_knee_ctrl FemaleCharacter_rig_0036:right_leg_IK_ctrl FemaleCharacter_rig_0036:right_knee_ctrl FemaleCharacter_rig_0036:right_foot_attribute_ctrl FemaleCharacter_rig_0036:left_foot_attribute_ctrl FemaleCharacter_rig_0036:left_arm_attribute_ctrl FemaleCharacter_rig_0036:right_arm_attribute_ctrl FemaleCharacter_rig_0036:left_upperArm_mid_cluster_ctrl FemaleCharacter_rig_0036:left_lowerArm_mid_cluster_ctrl FemaleCharacter_rig_0036:right_upperArm_mid_cluster_ctrl FemaleCharacter_rig_0036:right_lowerArm_mid_cluster_ctrl FemaleCharacter_rig_0036:right_upperLeg_mid_cluster_ctrl FemaleCharacter_rig_0036:right_lowerLeg_mid_cluster_ctrl FemaleCharacter_rig_0036:left_upperLeg_mid_cluster_ctrl FemaleCharacter_rig_0036:left_lowerLeg_mid_cluster_ctrl FemaleCharacter_rig_0036:hair_bot_cluster_ctrl FemaleCharacter_rig_0036:Lt_hair_bot_cluster_ctrl FemaleCharacter_rig_0036:Rt_hair_bot_cluster_ctrl FemaleCharacter_rig_0036:left_eyebrow_top_cluster_ctrl FemaleCharacter_rig_0036:left_eyebrow_mid_cluster_ctrl FemaleCharacter_rig_0036:left_eyebrow_bot_cluster_ctrl FemaleCharacter_rig_0036:right_eyebrow_top_cluster_ctrl FemaleCharacter_rig_0036:right_eyebrow_mid_cluster_ctrl FemaleCharacter_rig_0036:right_eyebrow_bot_cluster_ctrl FemaleCharacter_rig_0036:neck_mid_cluster_ctrl FemaleCharacter_rig_0036:root_ctrl FemaleCharacter_rig_0036:pelvis_jnt_ctrl FemaleCharacter_rig_0036:chest_jnt_ctrl FemaleCharacter_rig_0036:left_clavicle_ctrl FemaleCharacter_rig_0036:left_fk_upperArm_ctrl FemaleCharacter_rig_0036:left_fk_lowerArm_ctrl FemaleCharacter_rig_0036:left_hand_fk_ctrl FemaleCharacter_rig_0036:right_clavicle_ctrl FemaleCharacter_rig_0036:right_fk_upperArm_ctrl FemaleCharacter_rig_0036:right_fk_lowerArm_ctrl FemaleCharacter_rig_0036:right_hand_jnt_ctrl FemaleCharacter_rig_0036:bow_root_jnt_ctrl FemaleCharacter_rig_0036:left_bow_plume_a_jnt_ctrl FemaleCharacter_rig_0036:left_bow_plume_b_jnt_ctrl FemaleCharacter_rig_0036:left_bow_tassle_a_jnt_ctrl FemaleCharacter_rig_0036:left_bow_tassle_b_jnt_ctrl FemaleCharacter_rig_0036:right_bow_tassle_a_jnt_ctrl FemaleCharacter_rig_0036:right_bow_tassle_b_jnt_ctrl FemaleCharacter_rig_0036:right_bow_plume_a_jnt_ctrl FemaleCharacter_rig_0036:right_bow_plume_b_jnt_ctrl FemaleCharacter_rig_0036:neck_FK_a_jnt_ctrl FemaleCharacter_rig_0036:neck_FK_b_jnt_ctrl FemaleCharacter_rig_0036:head_jnt_ctrl FemaleCharacter_rig_0036:flower_jnt_ctrl FemaleCharacter_rig_0036:top_petal_jnt_ctrl FemaleCharacter_rig_0036:right_petal_jnt_ctrl FemaleCharacter_rig_0036:bot_petal_jnt_ctrl FemaleCharacter_rig_0036:left_petal_jnt_ctrl FemaleCharacter_rig_0036:Lt_hairStrand_ctrl FemaleCharacter_rig_0036:Rt_hairStrand_IK_ctrl FemaleCharacter_rig_0036:fringe_IK_ctrl FemaleCharacter_rig_0036:right_lowerEyelid_2_jnt_ctrl FemaleCharacter_rig_0036:right_lowerEyelid_1_jnt_ctrl FemaleCharacter_rig_0036:right_lowerEyelid_0_jnt_ctrl FemaleCharacter_rig_0036:right_upperEyelid_3_jnt_ctrl FemaleCharacter_rig_0036:right_upperEyelid_2_jnt_ctrl FemaleCharacter_rig_0036:right_upperEyelid_1_jnt_ctrl FemaleCharacter_rig_0036:right_upperEyelid_0_jnt_ctrl FemaleCharacter_rig_0036:right_lowerEyelid_3_jnt_ctrl FemaleCharacter_rig_0036:left_upperEyelid_0_jnt_ctrl FemaleCharacter_rig_0036:left_upperEyelid_1_jnt_ctrl FemaleCharacter_rig_0036:left_upperEyelid_2_jnt_ctrl FemaleCharacter_rig_0036:left_upperEyelid_3_jnt_ctrl FemaleCharacter_rig_0036:left_lowerEyelid_2_jnt_ctrl FemaleCharacter_rig_0036:left_lowerEyelid_3_jnt_ctrl FemaleCharacter_rig_0036:left_lowerEyelid_1_jnt_ctrl FemaleCharacter_rig_0036:left_lowerEyelid_0_jnt_ctrl FemaleCharacter_rig_0036:jaw_ctrl FemaleCharacter_rig_0036:left_mouth_ctrl FemaleCharacter_rig_0036:right_mouth_ctrl FemaleCharacter_rig_0036:spine_mid_ctrl FemaleCharacter_rig_0036:spine_a_FK_jnt_ctrl FemaleCharacter_rig_0036:spine_c_FK_jnt_ctrl FemaleCharacter_rig_0036:spine_e_FK_jnt_ctrl FemaleCharacter_rig_0036:left_thumb_a_bind_jnt_ctrl FemaleCharacter_rig_0036:left_thumb_b_bind_jnt_ctrl FemaleCharacter_rig_0036:left_thumb_c_bind_jnt_ctrl FemaleCharacter_rig_0036:left_index_a_bind_jnt_ctrl FemaleCharacter_rig_0036:left_index_b_bind_jnt_ctrl FemaleCharacter_rig_0036:left_index_c_bind_jnt_ctrl FemaleCharacter_rig_0036:left_middle_a_bind_jnt_ctrl FemaleCharacter_rig_0036:left_middle_b_bind_jnt_ctrl FemaleCharacter_rig_0036:left_middle_c_bind_jnt_ctrl FemaleCharacter_rig_0036:left_ring_a_bind_jnt_ctrl FemaleCharacter_rig_0036:left_ring_b_bind_jnt_ctrl FemaleCharacter_rig_0036:left_ring_c_bind_jnt_ctrl FemaleCharacter_rig_0036:left_pinky_root_bind_jnt_ctrl FemaleCharacter_rig_0036:left_pinky_a_bind_jnt_ctrl FemaleCharacter_rig_0036:left_pinky_b_bind_jnt_ctrl FemaleCharacter_rig_0036:left_pinky_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_pinky_root_bind_jnt_ctrl FemaleCharacter_rig_0036:right_pinky_a_bind_jnt_ctrl FemaleCharacter_rig_0036:right_pinky_b_bind_jnt_ctrl FemaleCharacter_rig_0036:right_pinky_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_ring_a_bind_jnt_ctrl FemaleCharacter_rig_0036:right_ring_b_bind_jnt_ctrl FemaleCharacter_rig_0036:right_ring_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_middle_a_bind_jnt_ctrl FemaleCharacter_rig_0036:right_middle_b_bind_jnt_ctrl FemaleCharacter_rig_0036:right_middle_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_index_a_bind_jnt_ctrl FemaleCharacter_rig_0036:right_index_b_bind_jnt_ctrl FemaleCharacter_rig_0036:right_index_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_thumb_a_bind_jnt_ctrl FemaleCharacter_rig_0036:right_thumb_b_bind_jnt_ctrl FemaleCharacter_rig_0036:right_thumb_c_bind_jnt_ctrl FemaleCharacter_rig_0036:right_collarRibbon_1_ctrl FemaleCharacter_rig_0036:right_collarRibbon_2_ctrl FemaleCharacter_rig_0036:right_collarRibbon_3_ctrl FemaleCharacter_rig_0036:right_collarRibbon_4_ctrl FemaleCharacter_rig_0036:right_collarRibbon_5_ctrl FemaleCharacter_rig_0036:right_collarRibbon_6_ctrl FemaleCharacter_rig_0036:left_collarRibbon_1_ctrl FemaleCharacter_rig_0036:left_collarRibbon_2_ctrl FemaleCharacter_rig_0036:left_collarRibbon_3_ctrl FemaleCharacter_rig_0036:left_collarRibbon_4_ctrl FemaleCharacter_rig_0036:left_collarRibbon_5_ctrl FemaleCharacter_rig_0036:left_collarRibbon_6_ctrl FemaleCharacter_rig_0036:eye_master_ctrl FemaleCharacter_rig_0036:right_eyeball_ctrl FemaleCharacter_rig_0036:left_eye_ctrl ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r Male_Rig_0076:joint1_ctrl ;" 
        -enableBackground 0
        -align "center" 
        -label "select -r Male_Rig_0076:joint1_ctrl ;" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -r Male_Rig_0076:joint1_ctrl ;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -tgl Male_Rig_0076:joint3_ctrl ;" 
        -enableBackground 0
        -align "center" 
        -label "select -tgl Male_Rig_0076:joint3_ctrl ;" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -tgl Male_Rig_0076:joint3_ctrl ;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a locator object on the grid" 
        -enableBackground 0
        -align "center" 
        -label "Locator" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "locator.png" 
        -image1 "locator.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateLocator" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r Male_Rig_0076:jaw_ctrl ;\nselect -tgl Male_Rig_0076:lower_lip_ctrl ;\nselect -tgl Male_Rig_0076:upper_lip_ctrl ;\nselect -tgl Male_Rig_0076:right_mouth_corner_ctrl ;\nselect -tgl Male_Rig_0076:left_mouth_corner_ctrl ;\nselect -tgl Male_Rig_0076:right_eyebrow_top_cluster_ctrl ;\nselect -tgl Male_Rig_0076:right_eyebrow_mid_cluster_ctrl ;\n// Undo: select -tgl Male_Rig_0076:right_eyebrow_mid_cluster_ctrl  // \nselect -tgl Male_Rig_0076:right_eyebrow_bot_cluster_ctrl ;\nselect -tgl Male_Rig_0076:right_eyebrow_mid_cluster_ctrl ;\nselect -tgl Male_Rig_0076:left_eyebrow_top_cluster_ctrl ;\nselect -tgl Male_Rig_0076:left_eyebrow_mid_cluster_ctrl ;\nselect -tgl Male_Rig_0076:left_eyebrow_bot_cluster_ctrl ;\n" 
        -enableBackground 0
        -align "center" 
        -label "select -r Male_Rig_0076:jaw_ctrl ;\nselect -tgl Male_Rig_0076:low..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SebFace" 
        -overlayLabelColor 0.77592 0.77592 0.77592 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -add Male_Rig_0076:jaw_ctrl ;\nselect -add Male_Rig_0076:lower_lip_ctrl ;\nselect -add Male_Rig_0076:upper_lip_ctrl ;\nselect -add Male_Rig_0076:right_mouth_corner_ctrl ;\nselect -add Male_Rig_0076:left_mouth_corner_ctrl ;\nselect -add Male_Rig_0076:right_eyebrow_top_cluster_ctrl ;\nselect -add Male_Rig_0076:right_eyebrow_bot_cluster_ctrl ;\nselect -add Male_Rig_0076:right_eyebrow_mid_cluster_ctrl ;\nselect -add Male_Rig_0076:left_eyebrow_top_cluster_ctrl ;\nselect -add Male_Rig_0076:left_eyebrow_mid_cluster_ctrl ;\nselect -add Male_Rig_0076:left_eyebrow_bot_cluster_ctrl ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r -sym LT_leg_IK_ctrl LT_knee_ctrl RT_leg_IK_ctrl RT_knee_ctrl LT_foot_attribute_ctrl RT_foot_attribute_ctrl bot_cluster_ctrl root_jnt_ctrl hip_jnt_ctrl split1_JNT_ctrl chest_jnt_ctrl LT_clavicle_jnt_ctrl LT_fk_upperArm_ctrl LT_fk_lowerArm_ctrl LT_ik_arm_end1_ctrl neck_jnt_ctrl head_jnt_ctrl RT_clavicle_jnt_ctrl RT_fk_upperArm_ctrl RT_fk_lowerArm_ctrl RT_hand_jnt_ctrl mid_cluster_ctrl LT_arm_attribute_ctrl RT_arm_attribute_ctrl LT_thumb_a_jnt_ctrl LT_thumb_b_jnt_ctrl LT_thumb_c_jnt_ctrl LT_index_a_jnt_ctrl LT_index_b_jnt_ctrl LT_index_c_jnt_ctrl LT_mid_a_jnt_ctrl LT_mid_b_jnt_ctrl LT_mid_c_jnt_ctrl LT_pinky_a_jnt_ctrl LT_pinky_b_jnt_ctrl LT_pinky_c_jnt_ctrl RT_pinky_root_jnt_ctrl RT_pinky_a_jnt_ctrl RT_pinky_b_jnt_ctrl RT_pinky_c_jnt_ctrl RT_mid_a_jnt_ctrl RT_mid_b_jnt_ctrl RT_mid_c_jnt_ctrl RT_index_a_jnt_ctrl RT_index_b_jnt_ctrl RT_index_c_jnt_ctrl RT_thumb_a_jnt_ctrl RT_thumb_b_jnt_ctrl RT_thumb_c_jnt_ctrl spine_spline RT_elbow_line1 RT_elbow_line2 ;\n" 
        -enableBackground 0
        -align "center" 
        -label "select -r -sym LT_leg_IK_ctrl LT_knee_ctrl RT_leg_IK_ctrl RT_kne..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "JACOB" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -r -sym LT_leg_IK_ctrl LT_knee_ctrl RT_leg_IK_ctrl RT_knee_ctrl LT_foot_attribute_ctrl RT_foot_attribute_ctrl bot_cluster_ctrl root_jnt_ctrl hip_jnt_ctrl split1_JNT_ctrl chest_jnt_ctrl LT_clavicle_jnt_ctrl LT_fk_upperArm_ctrl LT_fk_lowerArm_ctrl LT_ik_arm_end1_ctrl neck_jnt_ctrl head_jnt_ctrl RT_clavicle_jnt_ctrl RT_fk_upperArm_ctrl RT_fk_lowerArm_ctrl RT_hand_jnt_ctrl mid_cluster_ctrl LT_arm_attribute_ctrl RT_arm_attribute_ctrl LT_thumb_a_jnt_ctrl LT_thumb_b_jnt_ctrl LT_thumb_c_jnt_ctrl LT_index_a_jnt_ctrl LT_index_b_jnt_ctrl LT_index_c_jnt_ctrl LT_mid_a_jnt_ctrl LT_mid_b_jnt_ctrl LT_mid_c_jnt_ctrl LT_pinky_a_jnt_ctrl LT_pinky_b_jnt_ctrl LT_pinky_c_jnt_ctrl RT_pinky_root_jnt_ctrl RT_pinky_a_jnt_ctrl RT_pinky_b_jnt_ctrl RT_pinky_c_jnt_ctrl RT_mid_a_jnt_ctrl RT_mid_b_jnt_ctrl RT_mid_c_jnt_ctrl RT_index_a_jnt_ctrl RT_index_b_jnt_ctrl RT_index_c_jnt_ctrl RT_thumb_a_jnt_ctrl RT_thumb_b_jnt_ctrl RT_thumb_c_jnt_ctrl spine_spline RT_elbow_line1 RT_elbow_line2 ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\narms = [u'LT_fk_upperArm_ctrl', u'LT_fk_lowerArm_ctrl', u'LT_ik_arm_end1_ctrl', u'LT_thumb_a_jnt_ctrl', u'LT_thumb_b_jnt_ctrl', u'LT_thumb_c_jnt_ctrl', u'LT_index_a_jnt_ctrl', u'LT_index_b_jnt_ctrl', u'LT_index_c_jnt_ctrl', u'LT_mid_a_jnt_ctrl', u'LT_mid_b_jnt_ctrl', u'LT_mid_c_jnt_ctrl', u'LT_pinky_a_jnt_ctrl', u'LT_pinky_b_jnt_ctrl', u'LT_pinky_c_jnt_ctrl', u'RT_clavicle_jnt_ctrl', u'RT_fk_upperArm_ctrl', u'RT_fk_lowerArm_ctrl', u'RT_hand_jnt_ctrl', u'RT_pinky_root_jnt_ctrl', u'RT_pinky_a_jnt_ctrl', u'RT_pinky_b_jnt_ctrl', u'RT_pinky_c_jnt_ctrl', u'RT_mid_a_jnt_ctrl', u'RT_mid_b_jnt_ctrl', u'RT_mid_c_jnt_ctrl', u'RT_index_a_jnt_ctrl', u'RT_index_b_jnt_ctrl', u'RT_index_c_jnt_ctrl', u'RT_thumb_a_jnt_ctrl', u'RT_thumb_b_jnt_ctrl', u'RT_thumb_c_jnt_ctrl']\n\ncmds.select(arms)" 
        -enableBackground 0
        -align "center" 
        -label "import maya.cmds as cmds\n\narms = [u'LT_fk_upperArm_ctrl', u'LT_f..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "J.ARMS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\narms = [u'LT_fk_upperArm_ctrl', u'LT_fk_lowerArm_ctrl', u'LT_ik_arm_end1_ctrl', u'LT_thumb_a_jnt_ctrl', u'LT_thumb_b_jnt_ctrl', u'LT_thumb_c_jnt_ctrl', u'LT_index_a_jnt_ctrl', u'LT_index_b_jnt_ctrl', u'LT_index_c_jnt_ctrl', u'LT_mid_a_jnt_ctrl', u'LT_mid_b_jnt_ctrl', u'LT_mid_c_jnt_ctrl', u'LT_pinky_a_jnt_ctrl', u'LT_pinky_b_jnt_ctrl', u'LT_pinky_c_jnt_ctrl', u'RT_clavicle_jnt_ctrl', u'RT_fk_upperArm_ctrl', u'RT_fk_lowerArm_ctrl', u'RT_hand_jnt_ctrl', u'RT_pinky_root_jnt_ctrl', u'RT_pinky_a_jnt_ctrl', u'RT_pinky_b_jnt_ctrl', u'RT_pinky_c_jnt_ctrl', u'RT_mid_a_jnt_ctrl', u'RT_mid_b_jnt_ctrl', u'RT_mid_c_jnt_ctrl', u'RT_index_a_jnt_ctrl', u'RT_index_b_jnt_ctrl', u'RT_index_c_jnt_ctrl', u'RT_thumb_a_jnt_ctrl', u'RT_thumb_b_jnt_ctrl', u'RT_thumb_c_jnt_ctrl']\n\ncmds.select(arms)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\npack = [u'LT_packStrap_1_ctrl', u'LT_packStrap_2_ctrl', u'LT_packStrap_3_ctrl', u'LT_packStrap_4_ctrl', u'LT_packStrap_5_ctrl', u'RT_packStrap_1_ctrl', u'RT_packStrap_2_ctrl', u'RT_packStrap_3_ctrl', u'RT_packStrap_4_ctrl', u'RT_packStrap_5_ctrl', u'pack_2_bind_jnt_ctrl']\n\ncmds.select(pack)" 
        -enableBackground 0
        -align "center" 
        -label "import maya.cmds as cmds\n\npack = [u'LT_packStrap_1_ctrl', u'LT_p..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "J.PACK" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\npack = [u'LT_packStrap_1_ctrl', u'LT_packStrap_2_ctrl', u'LT_packStrap_3_ctrl', u'LT_packStrap_4_ctrl', u'LT_packStrap_5_ctrl', u'RT_packStrap_1_ctrl', u'RT_packStrap_2_ctrl', u'RT_packStrap_3_ctrl', u'RT_packStrap_4_ctrl', u'RT_packStrap_5_ctrl', u'pack_2_bind_jnt_ctrl']\n\ncmds.select(pack)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\na = [u'global_SRT', u'local_RT', u'root_ctrl', u'spine_fk_b_jnt_ctrl', u'chest_jnt_ctrl', u'LT_clavicle_jnt_ctrl', u'LT_fk_upperArm_ctrl', u'LT_fk_lowerArm_ctrl', u'LT_fk_hand_jnt_ctrl', u'RT_clavicle_jnt_ctrl', u'RT_fk_upperArm_ctrl', u'RT_fk_lowerArm_ctrl', u'RT_fk_hand_jnt_ctrl', u'neck_ctrl', u'head_ctrl', u'fringe_b_jnt_ctrl', u'hair_jnt_ctrl', u'fringe_c_jnt_ctrl', u'fringe_a_jnt_ctrl', u'pelvis_ctrl', u'spine_mid_cls_ctrl', u'RT_arm_attribute_ctrl', u'LT_arm_attribute_ctrl', u'RT_kneeVector_ctrl_2', u'RT_footAttr_ctrl_2', u'RT_foot_IK_ctrl_2', u'RT_toepivot_grp_2_ctrl', u'RT_footInner_grp_2_ctrl', u'RT_footOuter_grp_2_ctrl', u'RT_heelpivot_grp_2_ctrl', u'RT_ballpivot_grp_2_ctrl', u'RT_footroll_grp_2_ctrl', u'RT_toeTap_grp_2_ctrl', u'LT_kneeVector_ctrl_2', u'LT_footAttr_ctrl_2', u'LT_foot_IK_ctrl_2', u'LT_toepivot_grp_2_ctrl', u'LT_footInner_grp_2_ctrl', u'LT_footOuter_grp_2_ctrl', u'LT_heelpivot_grp_2_ctrl', u'LT_ballpivot_grp_2_ctrl', u'LT_footroll_grp_2_ctrl', u'LT_toeTap_grp_2_ctrl', u'LT_thumb_a_jnt_ctrl', u'LT_thumb_b_jnt_ctrl', u'LT_thumb_c_jnt_ctrl', u'LT_index_a_jnt_ctrl', u'LT_index_b_jnt_ctrl', u'LT_index_c_jnt_ctrl', u'LT_midFing_a_jnt_ctrl', u'LT_midFing_b_jnt_ctrl', u'LT_midFing_c_jnt_ctrl', u'LT_pinky_root_jnt_ctrl', u'LT_pinky_a_jnt_ctrl', u'LT_pinky_b_jnt_ctrl', u'LT_pinky_c_jnt_ctrl', u'RT_thumb_a_jnt_ctrl', u'RT_thumb_b_jnt_ctrl', u'RT_thumb_c_jnt_ctrl', u'RT_index_a_jnt_ctrl', u'RT_index_b_jnt_ctrl', u'RT_index_c_jnt_ctrl', u'RT_midFing_a_jnt_ctrl', u'RT_midFing_b_jnt_ctrl', u'RT_midFing_c_jnt_ctrl', u'RT_pinky_root_jnt_ctrl', u'RT_pinky_a_jnt_ctrl', u'RT_pinky_b_jnt_ctrl', u'RT_pinky_c_jnt_ctrl', u'FT_jacket_jnt_ctrl', u'LT_jacket_jnt_ctrl', u'RT_jacket_jnt_ctrl', u'BK_jacket_jnt_ctrl', u'innerHood_ctrl', u'hood_ctrl', u'RT_top_strap_jnt_ctrl', u'RT_mid_strap_jnt_ctrl', u'RT_bot_strap_jnt_ctrl', u'LT_top_strap_jnt_ctrl', u'LT_mid_strap_jnt_ctrl', u'LT_bot_strap_jnt_ctrl', u'ruckSack_jnt_ctrl', u'LT_arm_IK_ctrl', u'RT_arm_IK_ctrl', u'RT_elbow_ctrl', u'LT_elbow_ctrl'] # \n\ncmds.select(d=1)\ncmds.select(a)\n" 
        -enableBackground 0
        -align "center" 
        -label "import maya.cmds as cmds\n\na = [u'global_SRT', u'local_RT', u'roo..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Jacob" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\na = [u'global_SRT', u'local_RT', u'root_ctrl', u'spine_fk_b_jnt_ctrl', u'chest_jnt_ctrl', u'LT_clavicle_jnt_ctrl', u'LT_fk_upperArm_ctrl', u'LT_fk_lowerArm_ctrl', u'LT_fk_hand_jnt_ctrl', u'RT_clavicle_jnt_ctrl', u'RT_fk_upperArm_ctrl', u'RT_fk_lowerArm_ctrl', u'RT_fk_hand_jnt_ctrl', u'neck_ctrl', u'head_ctrl', u'fringe_b_jnt_ctrl', u'hair_jnt_ctrl', u'fringe_c_jnt_ctrl', u'fringe_a_jnt_ctrl', u'pelvis_ctrl', u'spine_mid_cls_ctrl', u'RT_arm_attribute_ctrl', u'LT_arm_attribute_ctrl', u'RT_kneeVector_ctrl_2', u'RT_footAttr_ctrl_2', u'RT_foot_IK_ctrl_2', u'RT_toepivot_grp_2_ctrl', u'RT_footInner_grp_2_ctrl', u'RT_footOuter_grp_2_ctrl', u'RT_heelpivot_grp_2_ctrl', u'RT_ballpivot_grp_2_ctrl', u'RT_footroll_grp_2_ctrl', u'RT_toeTap_grp_2_ctrl', u'LT_kneeVector_ctrl_2', u'LT_footAttr_ctrl_2', u'LT_foot_IK_ctrl_2', u'LT_toepivot_grp_2_ctrl', u'LT_footInner_grp_2_ctrl', u'LT_footOuter_grp_2_ctrl', u'LT_heelpivot_grp_2_ctrl', u'LT_ballpivot_grp_2_ctrl', u'LT_footroll_grp_2_ctrl', u'LT_toeTap_grp_2_ctrl', u'LT_thumb_a_jnt_ctrl', u'LT_thumb_b_jnt_ctrl', u'LT_thumb_c_jnt_ctrl', u'LT_index_a_jnt_ctrl', u'LT_index_b_jnt_ctrl', u'LT_index_c_jnt_ctrl', u'LT_midFing_a_jnt_ctrl', u'LT_midFing_b_jnt_ctrl', u'LT_midFing_c_jnt_ctrl', u'LT_pinky_root_jnt_ctrl', u'LT_pinky_a_jnt_ctrl', u'LT_pinky_b_jnt_ctrl', u'LT_pinky_c_jnt_ctrl', u'RT_thumb_a_jnt_ctrl', u'RT_thumb_b_jnt_ctrl', u'RT_thumb_c_jnt_ctrl', u'RT_index_a_jnt_ctrl', u'RT_index_b_jnt_ctrl', u'RT_index_c_jnt_ctrl', u'RT_midFing_a_jnt_ctrl', u'RT_midFing_b_jnt_ctrl', u'RT_midFing_c_jnt_ctrl', u'RT_pinky_root_jnt_ctrl', u'RT_pinky_a_jnt_ctrl', u'RT_pinky_b_jnt_ctrl', u'RT_pinky_c_jnt_ctrl', u'FT_jacket_jnt_ctrl', u'LT_jacket_jnt_ctrl', u'RT_jacket_jnt_ctrl', u'BK_jacket_jnt_ctrl', u'innerHood_ctrl', u'hood_ctrl', u'RT_top_strap_jnt_ctrl', u'RT_mid_strap_jnt_ctrl', u'RT_bot_strap_jnt_ctrl', u'LT_top_strap_jnt_ctrl', u'LT_mid_strap_jnt_ctrl', u'LT_bot_strap_jnt_ctrl', u'ruckSack_jnt_ctrl', u'LT_arm_IK_ctrl', u'RT_arm_IK_ctrl', u'RT_elbow_ctrl', u'LT_elbow_ctrl'] # \n\n#cmds.select(d=1)\ncmds.select(a,add=1)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\na = [u'LT_foot_IK_ctrl_2', u'RT_foot_IK_ctrl_2', u'root_ctrl', u'LT_kneeVector_ctrl_2', u'RT_kneeVector_ctrl_2', u'LT_elbow_ctrl', u'RT_elbow_ctrl', u'RT_arm_IK_ctrl', u'LT_arm_IK_ctrl'] # \ncmds.select(a)" 
        -enableBackground 0
        -align "center" 
        -label "import maya.cmds as cmds\n\na = [u'LT_foot_IK_ctrl_2', u'RT_foot_I..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "J.MOVE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\na = [u'LT_foot_IK_ctrl_2', u'RT_foot_IK_ctrl_2', u'root_ctrl', u'LT_elbow_ctrl', u'RT_elbow_ctrl', u'RT_arm_IK_ctrl', u'LT_arm_IK_ctrl'] # \ncmds.select(a)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "a = [u'Jacob:global_SRT', u'Jacob:local_RT', u'Jacob:root_ctrl', u'Jacob:spine_fk_b_jnt_ctrl', u'Jacob:chest_jnt_ctrl', u'Jacob:LT_clavicle_jnt_ctrl', u'Jacob:LT_fk_upperArm_ctrl', u'Jacob:LT_fk_lowerArm_ctrl', u'Jacob:LT_fk_hand_jnt_ctrl', u'Jacob:RT_clavicle_jnt_ctrl', u'Jacob:RT_fk_upperArm_ctrl', u'Jacob:RT_fk_lowerArm_ctrl', u'Jacob:RT_fk_hand_jnt_ctrl', u'Jacob:neck_ctrl', u'Jacob:head_ctrl', u'Jacob:fringe_b_jnt_ctrl', u'Jacob:hair_jnt_ctrl', u'Jacob:fringe_c_jnt_ctrl', u'Jacob:fringe_a_jnt_ctrl', u'Jacob:pelvis_ctrl', u'Jacob:spine_mid_cls_ctrl', u'Jacob:RT_arm_attribute_ctrl', u'Jacob:LT_arm_attribute_ctrl', u'Jacob:RT_kneeVector_ctrl_2', u'Jacob:RT_footAttr_ctrl_2', u'Jacob:RT_foot_IK_ctrl_2', u'Jacob:RT_toepivot_grp_2_ctrl', u'Jacob:RT_footInner_grp_2_ctrl', u'Jacob:RT_footOuter_grp_2_ctrl', u'Jacob:RT_heelpivot_grp_2_ctrl', u'Jacob:RT_ballpivot_grp_2_ctrl', u'Jacob:RT_footroll_grp_2_ctrl', u'Jacob:RT_toeTap_grp_2_ctrl', u'Jacob:LT_kneeVector_ctrl_2', u'Jacob:LT_footAttr_ctrl_2', u'Jacob:LT_foot_IK_ctrl_2', u'Jacob:LT_toepivot_grp_2_ctrl', u'Jacob:LT_footInner_grp_2_ctrl', u'Jacob:LT_footOuter_grp_2_ctrl', u'Jacob:LT_heelpivot_grp_2_ctrl', u'Jacob:LT_ballpivot_grp_2_ctrl', u'Jacob:LT_footroll_grp_2_ctrl', u'Jacob:LT_toeTap_grp_2_ctrl', u'Jacob:LT_thumb_a_jnt_ctrl', u'Jacob:LT_thumb_b_jnt_ctrl', u'Jacob:LT_thumb_c_jnt_ctrl', u'Jacob:LT_index_a_jnt_ctrl', u'Jacob:LT_index_b_jnt_ctrl', u'Jacob:LT_index_c_jnt_ctrl', u'Jacob:LT_midFing_a_jnt_ctrl', u'Jacob:LT_midFing_b_jnt_ctrl', u'Jacob:LT_midFing_c_jnt_ctrl', u'Jacob:LT_pinky_root_jnt_ctrl', u'Jacob:LT_pinky_a_jnt_ctrl', u'Jacob:LT_pinky_b_jnt_ctrl', u'Jacob:LT_pinky_c_jnt_ctrl', u'Jacob:RT_thumb_a_jnt_ctrl', u'Jacob:RT_thumb_b_jnt_ctrl', u'Jacob:RT_thumb_c_jnt_ctrl', u'Jacob:RT_index_a_jnt_ctrl', u'Jacob:RT_index_b_jnt_ctrl', u'Jacob:RT_index_c_jnt_ctrl', u'Jacob:RT_midFing_a_jnt_ctrl', u'Jacob:RT_midFing_b_jnt_ctrl', u'Jacob:RT_midFing_c_jnt_ctrl', u'Jacob:RT_pinky_root_jnt_ctrl', u'Jacob:RT_pinky_a_jnt_ctrl', u'Jacob:RT_pinky_b_jnt_ctrl', u'Jacob:RT_pinky_c_jnt_ctrl', u'Jacob:FT_jacket_jnt_ctrl', u'Jacob:LT_jacket_jnt_ctrl', u'Jacob:RT_jacket_jnt_ctrl', u'Jacob:BK_jacket_jnt_ctrl', u'Jacob:innerHood_ctrl', u'Jacob:hood_ctrl', u'Jacob:RT_top_strap_jnt_ctrl', u'Jacob:RT_mid_strap_jnt_ctrl', u'Jacob:RT_bot_strap_jnt_ctrl', u'Jacob:LT_top_strap_jnt_ctrl', u'Jacob:LT_mid_strap_jnt_ctrl', u'Jacob:LT_bot_strap_jnt_ctrl', u'Jacob:ruckSack_jnt_ctrl', u'Jacob:LT_arm_IK_ctrl', u'Jacob:RT_arm_IK_ctrl', u'Jacob:RT_elbow_ctrl', u'Jacob:LT_elbow_ctrl'] # \n\ncmds.select(a)" 
        -enableBackground 0
        -align "center" 
        -label "a = [u'Jacob:global_SRT', u'Jacob:local_RT', u'Jacob:root_ctrl',..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Jacob2" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "a = [u'Jacob:global_SRT', u'Jacob:local_RT', u'Jacob:root_ctrl', u'Jacob:spine_fk_b_jnt_ctrl', u'Jacob:chest_jnt_ctrl', u'Jacob:LT_clavicle_jnt_ctrl', u'Jacob:LT_fk_upperArm_ctrl', u'Jacob:LT_fk_lowerArm_ctrl', u'Jacob:LT_fk_hand_jnt_ctrl', u'Jacob:RT_clavicle_jnt_ctrl', u'Jacob:RT_fk_upperArm_ctrl', u'Jacob:RT_fk_lowerArm_ctrl', u'Jacob:RT_fk_hand_jnt_ctrl', u'Jacob:neck_ctrl', u'Jacob:head_ctrl', u'Jacob:fringe_b_jnt_ctrl', u'Jacob:hair_jnt_ctrl', u'Jacob:fringe_c_jnt_ctrl', u'Jacob:fringe_a_jnt_ctrl', u'Jacob:pelvis_ctrl', u'Jacob:spine_mid_cls_ctrl', u'Jacob:RT_arm_attribute_ctrl', u'Jacob:LT_arm_attribute_ctrl', u'Jacob:RT_kneeVector_ctrl_2', u'Jacob:RT_footAttr_ctrl_2', u'Jacob:RT_foot_IK_ctrl_2', u'Jacob:RT_toepivot_grp_2_ctrl', u'Jacob:RT_footInner_grp_2_ctrl', u'Jacob:RT_footOuter_grp_2_ctrl', u'Jacob:RT_heelpivot_grp_2_ctrl', u'Jacob:RT_ballpivot_grp_2_ctrl', u'Jacob:RT_footroll_grp_2_ctrl', u'Jacob:RT_toeTap_grp_2_ctrl', u'Jacob:LT_kneeVector_ctrl_2', u'Jacob:LT_footAttr_ctrl_2', u'Jacob:LT_foot_IK_ctrl_2', u'Jacob:LT_toepivot_grp_2_ctrl', u'Jacob:LT_footInner_grp_2_ctrl', u'Jacob:LT_footOuter_grp_2_ctrl', u'Jacob:LT_heelpivot_grp_2_ctrl', u'Jacob:LT_ballpivot_grp_2_ctrl', u'Jacob:LT_footroll_grp_2_ctrl', u'Jacob:LT_toeTap_grp_2_ctrl', u'Jacob:LT_thumb_a_jnt_ctrl', u'Jacob:LT_thumb_b_jnt_ctrl', u'Jacob:LT_thumb_c_jnt_ctrl', u'Jacob:LT_index_a_jnt_ctrl', u'Jacob:LT_index_b_jnt_ctrl', u'Jacob:LT_index_c_jnt_ctrl', u'Jacob:LT_midFing_a_jnt_ctrl', u'Jacob:LT_midFing_b_jnt_ctrl', u'Jacob:LT_midFing_c_jnt_ctrl', u'Jacob:LT_pinky_root_jnt_ctrl', u'Jacob:LT_pinky_a_jnt_ctrl', u'Jacob:LT_pinky_b_jnt_ctrl', u'Jacob:LT_pinky_c_jnt_ctrl', u'Jacob:RT_thumb_a_jnt_ctrl', u'Jacob:RT_thumb_b_jnt_ctrl', u'Jacob:RT_thumb_c_jnt_ctrl', u'Jacob:RT_index_a_jnt_ctrl', u'Jacob:RT_index_b_jnt_ctrl', u'Jacob:RT_index_c_jnt_ctrl', u'Jacob:RT_midFing_a_jnt_ctrl', u'Jacob:RT_midFing_b_jnt_ctrl', u'Jacob:RT_midFing_c_jnt_ctrl', u'Jacob:RT_pinky_root_jnt_ctrl', u'Jacob:RT_pinky_a_jnt_ctrl', u'Jacob:RT_pinky_b_jnt_ctrl', u'Jacob:RT_pinky_c_jnt_ctrl', u'Jacob:FT_jacket_jnt_ctrl', u'Jacob:LT_jacket_jnt_ctrl', u'Jacob:RT_jacket_jnt_ctrl', u'Jacob:BK_jacket_jnt_ctrl', u'Jacob:innerHood_ctrl', u'Jacob:hood_ctrl', u'Jacob:RT_top_strap_jnt_ctrl', u'Jacob:RT_mid_strap_jnt_ctrl', u'Jacob:RT_bot_strap_jnt_ctrl', u'Jacob:LT_top_strap_jnt_ctrl', u'Jacob:LT_mid_strap_jnt_ctrl', u'Jacob:LT_bot_strap_jnt_ctrl', u'Jacob:ruckSack_jnt_ctrl', u'Jacob:LT_arm_IK_ctrl', u'Jacob:RT_arm_IK_ctrl', u'Jacob:RT_elbow_ctrl', u'Jacob:LT_elbow_ctrl'] # \n\ncmds.select(a,add=1)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\nhands = [u'RT_arm_IK_ctrl', u'RT_arm_attribute_ctrl', u'LT_arm_IK_ctrl', u'LT_thumb_a_jnt_ctrl', u'LT_thumb_b_jnt_ctrl', u'LT_thumb_c_jnt_ctrl', u'LT_index_a_jnt_ctrl', u'LT_index_b_jnt_ctrl', u'LT_index_c_jnt_ctrl', u'LT_midFing_a_jnt_ctrl', u'LT_midFing_b_jnt_ctrl', u'LT_midFing_c_jnt_ctrl', u'LT_pinky_root_jnt_ctrl', u'LT_pinky_a_jnt_ctrl', u'LT_pinky_b_jnt_ctrl', u'LT_pinky_c_jnt_ctrl', u'RT_thumb_a_jnt_ctrl', u'RT_thumb_b_jnt_ctrl', u'RT_thumb_c_jnt_ctrl', u'RT_index_a_jnt_ctrl', u'RT_index_b_jnt_ctrl', u'RT_index_c_jnt_ctrl', u'RT_midFing_a_jnt_ctrl', u'RT_midFing_b_jnt_ctrl', u'RT_midFing_c_jnt_ctrl', u'RT_pinky_root_jnt_ctrl', u'RT_pinky_a_jnt_ctrl', u'RT_pinky_b_jnt_ctrl', u'RT_pinky_c_jnt_ctrl', u'LT_arm_attribute_ctrl'] # \n\ncmds.select(d=1)\ncmds.select(sl)" 
        -enableBackground 0
        -align "center" 
        -label "import maya.cmds as cmds\n\nhands = [u'RT_arm_IK_ctrl', u'RT_arm_a..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Jacob.Hands" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nhands = [u'RT_arm_IK_ctrl', u'RT_arm_attribute_ctrl', u'LT_arm_IK_ctrl', u'LT_thumb_a_jnt_ctrl', u'LT_thumb_b_jnt_ctrl', u'LT_thumb_c_jnt_ctrl', u'LT_index_a_jnt_ctrl', u'LT_index_b_jnt_ctrl', u'LT_index_c_jnt_ctrl', u'LT_midFing_a_jnt_ctrl', u'LT_midFing_b_jnt_ctrl', u'LT_midFing_c_jnt_ctrl', u'LT_pinky_root_jnt_ctrl', u'LT_pinky_a_jnt_ctrl', u'LT_pinky_b_jnt_ctrl', u'LT_pinky_c_jnt_ctrl', u'RT_thumb_a_jnt_ctrl', u'RT_thumb_b_jnt_ctrl', u'RT_thumb_c_jnt_ctrl', u'RT_index_a_jnt_ctrl', u'RT_index_b_jnt_ctrl', u'RT_index_c_jnt_ctrl', u'RT_midFing_a_jnt_ctrl', u'RT_midFing_b_jnt_ctrl', u'RT_midFing_c_jnt_ctrl', u'RT_pinky_root_jnt_ctrl', u'RT_pinky_a_jnt_ctrl', u'RT_pinky_b_jnt_ctrl', u'RT_pinky_c_jnt_ctrl', u'LT_arm_attribute_ctrl'] # \n\ncmds.select(d=1)\ncmds.select(sl)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r global_SRT local_RT root_ctrl chest_jnt_ctrl LT_clavicle_jnt_ctrl RT_clavicle_jnt_ctrl pelvis_jnt_ctrl tail_ctrl neck_mid_cls_ctrl spine_mid_cls_ctrl head_jnt_ctrl jaw_jnt_ctrl LT_ear_1_jnt_ctrl LT_ear_2_jnt_ctrl RT_ear_1_jnt_ctrl RT_ear_2_jnt_ctrl tail_mid_cluster_ctrl tail_bot_cluster_ctrl RT_BK_kneeVector_ctrl RT_BK_footAttr_ctrl RT_BK_foot_IK_ctrl RT_BK_toepivot_grp_ctrl RT_BK_footInner_grp_ctrl RT_BK_footOuter_grp_ctrl RT_BK_heelpivot_grp_ctrl RT_BK_ballpivot_grp_ctrl RT_BK_footroll_grp_ctrl RT_BK_toeTap_grp_ctrl LT_BK_kneeVector_ctrl LT_BK_footAttr_ctrl LT_BK_foot_IK_ctrl LT_BK_toepivot_grp_ctrl LT_BK_footInner_grp_ctrl LT_BK_footOuter_grp_ctrl LT_BK_heelpivot_grp_ctrl LT_BK_ballpivot_grp_ctrl LT_BK_footroll_grp_ctrl LT_BK_toeTap_grp_ctrl RT_FT_kneeVector_ctrl RT_FT_footAttr_ctrl RT_FT_foot_IK_ctrl RT_FT_toepivot_grp_ctrl RT_FT_footInner_grp_ctrl RT_FT_footOuter_grp_ctrl RT_FT_heelpivot_grp_ctrl RT_FT_ballpivot_grp_ctrl RT_FT_footroll_grp_ctrl RT_FT_toeTap_grp_ctrl LT_FT_kneeVector_ctrl LT_FT_footAttr_ctrl LT_FT_foot_IK_ctrl LT_FT_toepivot_grp_ctrl LT_FT_footInner_grp_ctrl LT_FT_footOuter_grp_ctrl LT_FT_heelpivot_grp_ctrl LT_FT_ballpivot_grp_ctrl LT_FT_footroll_grp_ctrl LT_FT_toeTap_grp_ctrl ;\n" 
        -enableBackground 0
        -align "center" 
        -label "select -r global_SRT local_RT root_ctrl chest_jnt_ctrl LT_clavic..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "WOLF" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -add global_SRT local_RT root_ctrl chest_jnt_ctrl LT_clavicle_jnt_ctrl RT_clavicle_jnt_ctrl pelvis_jnt_ctrl tail_ctrl neck_mid_cls_ctrl spine_mid_cls_ctrl head_jnt_ctrl jaw_jnt_ctrl LT_ear_1_jnt_ctrl LT_ear_2_jnt_ctrl RT_ear_1_jnt_ctrl RT_ear_2_jnt_ctrl tail_mid_cluster_ctrl tail_bot_cluster_ctrl RT_BK_kneeVector_ctrl RT_BK_footAttr_ctrl RT_BK_foot_IK_ctrl RT_BK_toepivot_grp_ctrl RT_BK_footInner_grp_ctrl RT_BK_footOuter_grp_ctrl RT_BK_heelpivot_grp_ctrl RT_BK_ballpivot_grp_ctrl RT_BK_footroll_grp_ctrl RT_BK_toeTap_grp_ctrl LT_BK_kneeVector_ctrl LT_BK_footAttr_ctrl LT_BK_foot_IK_ctrl LT_BK_toepivot_grp_ctrl LT_BK_footInner_grp_ctrl LT_BK_footOuter_grp_ctrl LT_BK_heelpivot_grp_ctrl LT_BK_ballpivot_grp_ctrl LT_BK_footroll_grp_ctrl LT_BK_toeTap_grp_ctrl RT_FT_kneeVector_ctrl RT_FT_footAttr_ctrl RT_FT_foot_IK_ctrl RT_FT_toepivot_grp_ctrl RT_FT_footInner_grp_ctrl RT_FT_footOuter_grp_ctrl RT_FT_heelpivot_grp_ctrl RT_FT_ballpivot_grp_ctrl RT_FT_footroll_grp_ctrl RT_FT_toeTap_grp_ctrl LT_FT_kneeVector_ctrl LT_FT_footAttr_ctrl LT_FT_foot_IK_ctrl LT_FT_toepivot_grp_ctrl LT_FT_footInner_grp_ctrl LT_FT_footOuter_grp_ctrl LT_FT_heelpivot_grp_ctrl LT_FT_ballpivot_grp_ctrl LT_FT_footroll_grp_ctrl LT_FT_toeTap_grp_ctrl ;\nselect -add neckBase_ctrl ;\nselect -add RT_headFur_jnt_ctrl ;\nselect -add mid_headFur_jnt_ctrl ;\nselect -add LT_headFur_jnt_ctrl ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r wolf_rig_0054:global_SRT wolf_rig_0054:local_RT wolf_rig_0054:root_ctrl wolf_rig_0054:chest_jnt_ctrl wolf_rig_0054:LT_clavicle_jnt_ctrl wolf_rig_0054:RT_clavicle_jnt_ctrl wolf_rig_0054:neckBase_ctrl wolf_rig_0054:pelvis_jnt_ctrl wolf_rig_0054:tail_ctrl wolf_rig_0054:neck_mid_cls_ctrl wolf_rig_0054:spine_mid_cls_ctrl wolf_rig_0054:head_jnt_ctrl wolf_rig_0054:jaw_jnt_ctrl wolf_rig_0054:LT_ear_1_jnt_ctrl wolf_rig_0054:LT_ear_2_jnt_ctrl wolf_rig_0054:RT_ear_1_jnt_ctrl wolf_rig_0054:RT_ear_2_jnt_ctrl wolf_rig_0054:tail_mid_cluster_ctrl wolf_rig_0054:tail_bot_cluster_ctrl wolf_rig_0054:RT_BK_kneeVector_ctrl wolf_rig_0054:RT_BK_footAttr_ctrl wolf_rig_0054:RT_BK_foot_IK_ctrl wolf_rig_0054:RT_BK_toepivot_grp_ctrl wolf_rig_0054:RT_BK_footInner_grp_ctrl wolf_rig_0054:RT_BK_footOuter_grp_ctrl wolf_rig_0054:RT_BK_heelpivot_grp_ctrl wolf_rig_0054:RT_BK_ballpivot_grp_ctrl wolf_rig_0054:RT_BK_footroll_grp_ctrl wolf_rig_0054:RT_BK_toeTap_grp_ctrl wolf_rig_0054:LT_BK_kneeVector_ctrl wolf_rig_0054:LT_BK_footAttr_ctrl wolf_rig_0054:LT_BK_foot_IK_ctrl wolf_rig_0054:LT_BK_toepivot_grp_ctrl wolf_rig_0054:LT_BK_footInner_grp_ctrl wolf_rig_0054:LT_BK_footOuter_grp_ctrl wolf_rig_0054:LT_BK_heelpivot_grp_ctrl wolf_rig_0054:LT_BK_ballpivot_grp_ctrl wolf_rig_0054:LT_BK_footroll_grp_ctrl wolf_rig_0054:LT_BK_toeTap_grp_ctrl wolf_rig_0054:RT_FT_kneeVector_ctrl wolf_rig_0054:RT_FT_footAttr_ctrl wolf_rig_0054:RT_FT_foot_IK_ctrl wolf_rig_0054:RT_FT_toepivot_grp_ctrl wolf_rig_0054:RT_FT_footInner_grp_ctrl wolf_rig_0054:RT_FT_footOuter_grp_ctrl wolf_rig_0054:RT_FT_heelpivot_grp_ctrl wolf_rig_0054:RT_FT_ballpivot_grp_ctrl wolf_rig_0054:RT_FT_footroll_grp_ctrl wolf_rig_0054:RT_FT_toeTap_grp_ctrl wolf_rig_0054:LT_FT_kneeVector_ctrl wolf_rig_0054:LT_FT_footAttr_ctrl wolf_rig_0054:LT_FT_foot_IK_ctrl wolf_rig_0054:LT_FT_toepivot_grp_ctrl wolf_rig_0054:LT_FT_footInner_grp_ctrl wolf_rig_0054:LT_FT_footOuter_grp_ctrl wolf_rig_0054:LT_FT_heelpivot_grp_ctrl wolf_rig_0054:LT_FT_ballpivot_grp_ctrl wolf_rig_0054:LT_FT_footroll_grp_ctrl wolf_rig_0054:LT_FT_toeTap_grp_ctrl ;\n" 
        -enableBackground 0
        -align "center" 
        -label "select -r wolf_rig_0054:global_SRT wolf_rig_0054:local_RT wolf_r..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "WOLF2" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -add wolf_rig_0056:global_SRT wolf_rig_0056:local_RT wolf_rig_0056:root_ctrl wolf_rig_0056:chest_jnt_ctrl wolf_rig_0056:LT_clavicle_jnt_ctrl wolf_rig_0056:RT_clavicle_jnt_ctrl wolf_rig_0056:neckBase_ctrl wolf_rig_0056:pelvis_jnt_ctrl wolf_rig_0056:tail_ctrl wolf_rig_0056:neck_mid_cls_ctrl wolf_rig_0056:spine_mid_cls_ctrl wolf_rig_0056:head_jnt_ctrl wolf_rig_0056:jaw_jnt_ctrl wolf_rig_0056:LT_ear_1_jnt_ctrl wolf_rig_0056:LT_ear_2_jnt_ctrl wolf_rig_0056:RT_ear_1_jnt_ctrl wolf_rig_0056:RT_ear_2_jnt_ctrl wolf_rig_0056:tail_mid_cluster_ctrl wolf_rig_0056:tail_bot_cluster_ctrl wolf_rig_0056:RT_BK_kneeVector_ctrl wolf_rig_0056:RT_BK_footAttr_ctrl wolf_rig_0056:RT_BK_foot_IK_ctrl wolf_rig_0056:RT_BK_toepivot_grp_ctrl wolf_rig_0056:RT_BK_footInner_grp_ctrl wolf_rig_0056:RT_BK_footOuter_grp_ctrl wolf_rig_0056:RT_BK_heelpivot_grp_ctrl wolf_rig_0056:RT_BK_ballpivot_grp_ctrl wolf_rig_0056:RT_BK_footroll_grp_ctrl wolf_rig_0056:RT_BK_toeTap_grp_ctrl wolf_rig_0056:LT_BK_kneeVector_ctrl wolf_rig_0056:LT_BK_footAttr_ctrl wolf_rig_0056:LT_BK_foot_IK_ctrl wolf_rig_0056:LT_BK_toepivot_grp_ctrl wolf_rig_0056:LT_BK_footInner_grp_ctrl wolf_rig_0056:LT_BK_footOuter_grp_ctrl wolf_rig_0056:LT_BK_heelpivot_grp_ctrl wolf_rig_0056:LT_BK_ballpivot_grp_ctrl wolf_rig_0056:LT_BK_footroll_grp_ctrl wolf_rig_0056:LT_BK_toeTap_grp_ctrl wolf_rig_0056:RT_FT_kneeVector_ctrl wolf_rig_0056:RT_FT_footAttr_ctrl wolf_rig_0056:RT_FT_foot_IK_ctrl wolf_rig_0056:RT_FT_toepivot_grp_ctrl wolf_rig_0056:RT_FT_footInner_grp_ctrl wolf_rig_0056:RT_FT_footOuter_grp_ctrl wolf_rig_0056:RT_FT_heelpivot_grp_ctrl wolf_rig_0056:RT_FT_ballpivot_grp_ctrl wolf_rig_0056:RT_FT_footroll_grp_ctrl wolf_rig_0056:RT_FT_toeTap_grp_ctrl wolf_rig_0056:LT_FT_kneeVector_ctrl wolf_rig_0056:LT_FT_footAttr_ctrl wolf_rig_0056:LT_FT_foot_IK_ctrl wolf_rig_0056:LT_FT_toepivot_grp_ctrl wolf_rig_0056:LT_FT_footInner_grp_ctrl wolf_rig_0056:LT_FT_footOuter_grp_ctrl wolf_rig_0056:LT_FT_heelpivot_grp_ctrl wolf_rig_0056:LT_FT_ballpivot_grp_ctrl wolf_rig_0056:LT_FT_footroll_grp_ctrl wolf_rig_0056:LT_FT_toeTap_grp_ctrl ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -add wolf_rig_0056:LT_BK_foot_IK_ctrl ;\nselect -add wolf_rig_0056:RT_BK_foot_IK_ctrl ;\nselect -add wolf_rig_0056:RT_FT_foot_IK_ctrl ;\nselect -add wolf_rig_0056:LT_FT_foot_IK_ctrl ;" 
        -enableBackground 0
        -align "center" 
        -label "select -add wolf_rig_0056:LT_BK_foot_IK_ctrl ;\nselect -add wolf_..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "wolfMOVE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -add root_ctrl ;\nselect -add LT_BK_foot_IK_ctrl ;\nselect -add RT_BK_foot_IK_ctrl ;\nselect -add RT_FT_foot_IK_ctrl ;\nselect -add LT_FT_foot_IK_ctrl ;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "a = [u'LT_foot_IK_ctrl_1', u'LT_toepivot_grp_1_ctrl', u'LT_footInner_grp_1_ctrl', u'LT_footOuter_grp_1_ctrl', u'LT_heelpivot_grp_1_ctrl', u'LT_ballpivot_grp_1_ctrl', u'LT_footroll_grp_1_ctrl', u'LT_toeTap_grp_1_ctrl', u'RT_footAttr_ctrl_1', u'RT_foot_IK_ctrl_1', u'RT_toepivot_grp_1_ctrl', u'RT_footInner_grp_1_ctrl', u'RT_footOuter_grp_1_ctrl', u'RT_heelpivot_grp_1_ctrl', u'RT_ballpivot_grp_1_ctrl', u'RT_footroll_grp_1_ctrl', u'RT_toeTap_grp_1_ctrl', u'LT_footAttr_ctrl_1', u'RT_kneeVector_ctrl_1', u'LT_kneeVector_ctrl_1', u'pelvis_jnt_ctrl', u'LT_thumb_1_jnt_ctrl', u'LT_thumb_2_jnt_ctrl', u'LT_thumb_3_jnt_ctrl', u'LT_index_1_jnt_ctrl', u'LT_index_2_jnt_ctrl', u'LT_index_3_jnt_ctrl', u'LT_midFing_1_jnt_ctrl', u'LT_midFing_2_jnt_ctrl', u'LT_midFing_3_jnt_ctrl', u'LT_pinky_1_jnt_ctrl', u'LT_pinky_2_jnt_ctrl', u'LT_pinky_3_jnt_ctrl', u'LT_lowArm_end_FK_ctrl_1', u'LT_lowArm_FK_ctrl_1', u'LT_upArm_FK_ctrl_1', u'LT_handAttr_ctrl_1', u'LT_clavicle_jnt_ctrl', u'neck_jnt_ctrl', u'head_jnt_ctrl', u'RT_thumb_1_jnt_ctrl', u'RT_thumb_2_jnt_ctrl', u'RT_thumb_3_jnt_ctrl', u'RT_index_1_jnt_ctrl', u'RT_index_2_jnt_ctrl', u'RT_index_3_jnt_ctrl', u'RT_midFing_1_jnt_ctrl', u'RT_midFing_2_jnt_ctrl', u'RT_midFing_3_jnt_ctrl', u'RT_pinky_1_jnt_ctrl', u'RT_pinky_2_jnt_ctrl', u'RT_pinky_3_jnt_ctrl', u'RT_handAttr_ctrl_1', u'RT_lowArm_end_FK_ctrl_1', u'RT_lowArm_FK_ctrl_1', u'RT_upArm_FK_ctrl_1', u'RT_clavicle_jnt_ctrl', u'chest_jnt_ctrl', u'spine_mid_cls_ctrl', u'root_ctrl', u'LT_hand_IK_ctrl_1', u'RT_hand_IK_ctrl_1', u'LT_elbowVector_ctrl_1', u'RT_elbowVector_ctrl_1', u'LT_hip_FK_ctrl_1', u'LT_knee_FK_ctrl_1', u'LT_foot_FK_ctrl_1', u'LT_ball_FK_ctrl_1', u'RT_hip_FK_ctrl_1', u'RT_knee_FK_ctrl_1', u'RT_foot_FK_ctrl_1', u'RT_ball_FK_ctrl_1', u'spine_fk_b_jnt_ctrl']\nfor i in a:\n    cmds.select(i,add=1)\n    \n" 
        -enableBackground 0
        -align "center" 
        -label "a = [u'LT_foot_IK_ctrl_1', u'LT_toepivot_grp_1_ctrl', u'LT_footI..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "NPC" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "a = [u'LT_foot_IK_ctrl_1', u'LT_toepivot_grp_1_ctrl', u'LT_footInner_grp_1_ctrl', u'LT_footOuter_grp_1_ctrl', u'LT_heelpivot_grp_1_ctrl', u'LT_ballpivot_grp_1_ctrl', u'LT_footroll_grp_1_ctrl', u'LT_toeTap_grp_1_ctrl', u'RT_footAttr_ctrl_1', u'RT_foot_IK_ctrl_1', u'RT_toepivot_grp_1_ctrl', u'RT_footInner_grp_1_ctrl', u'RT_footOuter_grp_1_ctrl', u'RT_heelpivot_grp_1_ctrl', u'RT_ballpivot_grp_1_ctrl', u'RT_footroll_grp_1_ctrl', u'RT_toeTap_grp_1_ctrl', u'LT_footAttr_ctrl_1', u'RT_kneeVector_ctrl_1', u'LT_kneeVector_ctrl_1', u'pelvis_jnt_ctrl', u'LT_thumb_1_jnt_ctrl', u'LT_thumb_2_jnt_ctrl', u'LT_thumb_3_jnt_ctrl', u'LT_index_1_jnt_ctrl', u'LT_index_2_jnt_ctrl', u'LT_index_3_jnt_ctrl', u'LT_midFing_1_jnt_ctrl', u'LT_midFing_2_jnt_ctrl', u'LT_midFing_3_jnt_ctrl', u'LT_pinky_1_jnt_ctrl', u'LT_pinky_2_jnt_ctrl', u'LT_pinky_3_jnt_ctrl', u'LT_lowArm_end_FK_ctrl_1', u'LT_lowArm_FK_ctrl_1', u'LT_upArm_FK_ctrl_1', u'LT_handAttr_ctrl_1', u'LT_clavicle_jnt_ctrl', u'neck_jnt_ctrl', u'head_jnt_ctrl', u'RT_thumb_1_jnt_ctrl', u'RT_thumb_2_jnt_ctrl', u'RT_thumb_3_jnt_ctrl', u'RT_index_1_jnt_ctrl', u'RT_index_2_jnt_ctrl', u'RT_index_3_jnt_ctrl', u'RT_midFing_1_jnt_ctrl', u'RT_midFing_2_jnt_ctrl', u'RT_midFing_3_jnt_ctrl', u'RT_pinky_1_jnt_ctrl', u'RT_pinky_2_jnt_ctrl', u'RT_pinky_3_jnt_ctrl', u'RT_handAttr_ctrl_1', u'RT_lowArm_end_FK_ctrl_1', u'RT_lowArm_FK_ctrl_1', u'RT_upArm_FK_ctrl_1', u'RT_clavicle_jnt_ctrl', u'chest_jnt_ctrl', u'spine_mid_cls_ctrl', u'root_ctrl', u'LT_hand_IK_ctrl_1', u'RT_hand_IK_ctrl_1', u'LT_elbowVector_ctrl_1', u'RT_elbowVector_ctrl_1', u'LT_hip_FK_ctrl_1', u'LT_knee_FK_ctrl_1', u'LT_foot_FK_ctrl_1', u'LT_ball_FK_ctrl_1', u'RT_hip_FK_ctrl_1', u'RT_knee_FK_ctrl_1', u'RT_foot_FK_ctrl_1', u'RT_ball_FK_ctrl_1', u'spine_fk_b_jnt_ctrl']\nfor i in a:\n    cmds.select(i,add=1)\n    \n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "cmds.select([u'RT_hand_IK_ctrl_1', u'RT_elbowVector_ctrl_1', u'LT_hand_IK_ctrl_1', u'LT_elbowVector_ctrl_1', u'RT_foot_IK_ctrl_1', u'LT_foot_IK_ctrl_1', u'root_ctrl'])" 
        -enableBackground 0
        -align "center" 
        -label "cmds.select([u'RT_hand_IK_ctrl_1', u'RT_elbowVector_ctrl_1', u'L..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "NPC.Move" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "cmds.select([u'RT_hand_IK_ctrl_1', u'RT_elbowVector_ctrl_1', u'LT_hand_IK_ctrl_1', u'LT_elbowVector_ctrl_1', u'RT_foot_IK_ctrl_1', u'LT_foot_IK_ctrl_1', u'root_ctrl'])" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "#IMPACT WINTER CHARACTER CONTROL SELECT\nimport maya.cmds as cmds\n\n#Generic NPC ctrls\ngeneric = [u'LT_foot_IK_ctrl_1', u'LT_toepivot_grp_1_ctrl', u'LT_footInner_grp_1_ctrl', u'LT_footOuter_grp_1_ctrl', u'LT_heelpivot_grp_1_ctrl', u'LT_ballpivot_grp_1_ctrl', u'LT_footroll_grp_1_ctrl', u'LT_toeTap_grp_1_ctrl', u'RT_footAttr_ctrl_1', u'RT_foot_IK_ctrl_1', u'RT_toepivot_grp_1_ctrl', u'RT_footInner_grp_1_ctrl', u'RT_footOuter_grp_1_ctrl', u'RT_heelpivot_grp_1_ctrl', u'RT_ballpivot_grp_1_ctrl', u'RT_footroll_grp_1_ctrl', u'RT_toeTap_grp_1_ctrl', u'LT_footAttr_ctrl_1', u'RT_kneeVector_ctrl_1', u'LT_kneeVector_ctrl_1', u'pelvis_jnt_ctrl', u'LT_thumb_1_jnt_ctrl', u'LT_thumb_2_jnt_ctrl', u'LT_thumb_3_jnt_ctrl', u'LT_index_1_jnt_ctrl', u'LT_index_2_jnt_ctrl', u'LT_index_3_jnt_ctrl', u'LT_midFing_1_jnt_ctrl', u'LT_midFing_2_jnt_ctrl', u'LT_midFing_3_jnt_ctrl', u'LT_pinky_1_jnt_ctrl', u'LT_pinky_2_jnt_ctrl', u'LT_pinky_3_jnt_ctrl', u'LT_lowArm_end_FK_ctrl_1', u'LT_lowArm_FK_ctrl_1', u'LT_upArm_FK_ctrl_1', u'LT_handAttr_ctrl_1', u'LT_clavicle_jnt_ctrl', u'neck_jnt_ctrl', u'head_jnt_ctrl', u'RT_thumb_1_jnt_ctrl', u'RT_thumb_2_jnt_ctrl', u'RT_thumb_3_jnt_ctrl', u'RT_index_1_jnt_ctrl', u'RT_index_2_jnt_ctrl', u'RT_index_3_jnt_ctrl', u'RT_midFing_1_jnt_ctrl', u'RT_midFing_2_jnt_ctrl', u'RT_midFing_3_jnt_ctrl', u'RT_pinky_1_jnt_ctrl', u'RT_pinky_2_jnt_ctrl', u'RT_pinky_3_jnt_ctrl', u'RT_handAttr_ctrl_1', u'RT_lowArm_end_FK_ctrl_1', u'RT_lowArm_FK_ctrl_1', u'RT_upArm_FK_ctrl_1', u'RT_clavicle_jnt_ctrl', u'chest_jnt_ctrl', u'spine_mid_cls_ctrl', u'root_ctrl', u'LT_hand_IK_ctrl_1', u'RT_hand_IK_ctrl_1', u'LT_elbowVector_ctrl_1', u'RT_elbowVector_ctrl_1', u'LT_hip_FK_ctrl_1', u'LT_knee_FK_ctrl_1', u'LT_foot_FK_ctrl_1', u'LT_ball_FK_ctrl_1', u'RT_hip_FK_ctrl_1', u'RT_knee_FK_ctrl_1', u'RT_foot_FK_ctrl_1', u'RT_ball_FK_ctrl_1', u'spine_fk_b_jnt_ctrl']\nfor i in generic:\n    cmds.select(i,add=1)\n\n#Christophe NPC ctrls\nchristophe = [u'Christophe:LT_foot_IK_ctrl_1', u'Christophe:LT_toepivot_grp_1_ctrl', u'Christophe:LT_footInner_grp_1_ctrl', u'Christophe:LT_footOuter_grp_1_ctrl', u'Christophe:LT_heelpivot_grp_1_ctrl', u'Christophe:LT_ballpivot_grp_1_ctrl', u'Christophe:LT_footroll_grp_1_ctrl', u'Christophe:LT_toeTap_grp_1_ctrl', u'Christophe:RT_footAttr_ctrl_1', u'Christophe:RT_foot_IK_ctrl_1', u'Christophe:RT_toepivot_grp_1_ctrl', u'Christophe:RT_footInner_grp_1_ctrl', u'Christophe:RT_footOuter_grp_1_ctrl', u'Christophe:RT_heelpivot_grp_1_ctrl', u'Christophe:RT_ballpivot_grp_1_ctrl', u'Christophe:RT_footroll_grp_1_ctrl', u'Christophe:RT_toeTap_grp_1_ctrl', u'Christophe:LT_footAttr_ctrl_1', u'Christophe:RT_kneeVector_ctrl_1', u'Christophe:LT_kneeVector_ctrl_1', u'Christophe:pelvis_jnt_ctrl', u'Christophe:LT_thumb_1_jnt_ctrl', u'Christophe:LT_thumb_2_jnt_ctrl', u'Christophe:LT_thumb_3_jnt_ctrl', u'Christophe:LT_index_1_jnt_ctrl', u'Christophe:LT_index_2_jnt_ctrl', u'Christophe:LT_index_3_jnt_ctrl', u'Christophe:LT_midFing_1_jnt_ctrl', u'Christophe:LT_midFing_2_jnt_ctrl', u'Christophe:LT_midFing_3_jnt_ctrl', u'Christophe:LT_pinky_1_jnt_ctrl', u'Christophe:LT_pinky_2_jnt_ctrl', u'Christophe:LT_pinky_3_jnt_ctrl', u'Christophe:LT_lowArm_end_FK_ctrl_1', u'Christophe:LT_lowArm_FK_ctrl_1', u'Christophe:LT_upArm_FK_ctrl_1', u'Christophe:LT_handAttr_ctrl_1', u'Christophe:LT_clavicle_jnt_ctrl', u'Christophe:neck_jnt_ctrl', u'Christophe:head_jnt_ctrl', u'Christophe:RT_thumb_1_jnt_ctrl', u'Christophe:RT_thumb_2_jnt_ctrl', u'Christophe:RT_thumb_3_jnt_ctrl', u'Christophe:RT_index_1_jnt_ctrl', u'Christophe:RT_index_2_jnt_ctrl', u'Christophe:RT_index_3_jnt_ctrl', u'Christophe:RT_midFing_1_jnt_ctrl', u'Christophe:RT_midFing_2_jnt_ctrl', u'Christophe:RT_midFing_3_jnt_ctrl', u'Christophe:RT_pinky_1_jnt_ctrl', u'Christophe:RT_pinky_2_jnt_ctrl', u'Christophe:RT_pinky_3_jnt_ctrl', u'Christophe:RT_handAttr_ctrl_1', u'Christophe:RT_lowArm_end_FK_ctrl_1', u'Christophe:RT_lowArm_FK_ctrl_1', u'Christophe:RT_upArm_FK_ctrl_1', u'Christophe:RT_clavicle_jnt_ctrl', u'Christophe:chest_jnt_ctrl', u'Christophe:spine_mid_cls_ctrl', u'Christophe:root_ctrl', u'Christophe:LT_hand_IK_ctrl_1', u'Christophe:RT_hand_IK_ctrl_1', u'Christophe:LT_elbowVector_ctrl_1', u'Christophe:RT_elbowVector_ctrl_1', u'Christophe:LT_hip_FK_ctrl_1', u'Christophe:LT_knee_FK_ctrl_1', u'Christophe:LT_foot_FK_ctrl_1', u'Christophe:LT_ball_FK_ctrl_1', u'Christophe:RT_hip_FK_ctrl_1', u'Christophe:RT_knee_FK_ctrl_1', u'Christophe:RT_foot_FK_ctrl_1', u'Christophe:RT_ball_FK_ctrl_1', u'Christophe:spine_fk_b_jnt_ctrl'] # \nfor i in christophe:\n    cmds.select(i,add=1)\n\n#Maggie NPC ctrls\nmaggie = [u'Maggie:LT_foot_IK_ctrl_1', u'Maggie:LT_toepivot_grp_1_ctrl', u'Maggie:LT_footInner_grp_1_ctrl', u'Maggie:LT_footOuter_grp_1_ctrl', u'Maggie:LT_heelpivot_grp_1_ctrl', u'Maggie:LT_ballpivot_grp_1_ctrl', u'Maggie:LT_footroll_grp_1_ctrl', u'Maggie:LT_toeTap_grp_1_ctrl', u'Maggie:RT_footAttr_ctrl_1', u'Maggie:RT_foot_IK_ctrl_1', u'Maggie:RT_toepivot_grp_1_ctrl', u'Maggie:RT_footInner_grp_1_ctrl', u'Maggie:RT_footOuter_grp_1_ctrl', u'Maggie:RT_heelpivot_grp_1_ctrl', u'Maggie:RT_ballpivot_grp_1_ctrl', u'Maggie:RT_footroll_grp_1_ctrl', u'Maggie:RT_toeTap_grp_1_ctrl', u'Maggie:LT_footAttr_ctrl_1', u'Maggie:RT_kneeVector_ctrl_1', u'Maggie:LT_kneeVector_ctrl_1', u'Maggie:pelvis_jnt_ctrl', u'Maggie:LT_thumb_1_jnt_ctrl', u'Maggie:LT_thumb_2_jnt_ctrl', u'Maggie:LT_thumb_3_jnt_ctrl', u'Maggie:LT_index_1_jnt_ctrl', u'Maggie:LT_index_2_jnt_ctrl', u'Maggie:LT_index_3_jnt_ctrl', u'Maggie:LT_midFing_1_jnt_ctrl', u'Maggie:LT_midFing_2_jnt_ctrl', u'Maggie:LT_midFing_3_jnt_ctrl', u'Maggie:LT_pinky_1_jnt_ctrl', u'Maggie:LT_pinky_2_jnt_ctrl', u'Maggie:LT_pinky_3_jnt_ctrl', u'Maggie:LT_lowArm_end_FK_ctrl_1', u'Maggie:LT_lowArm_FK_ctrl_1', u'Maggie:LT_upArm_FK_ctrl_1', u'Maggie:LT_handAttr_ctrl_1', u'Maggie:LT_clavicle_jnt_ctrl', u'Maggie:neck_jnt_ctrl', u'Maggie:head_jnt_ctrl', u'Maggie:RT_thumb_1_jnt_ctrl', u'Maggie:RT_thumb_2_jnt_ctrl', u'Maggie:RT_thumb_3_jnt_ctrl', u'Maggie:RT_index_1_jnt_ctrl', u'Maggie:RT_index_2_jnt_ctrl', u'Maggie:RT_index_3_jnt_ctrl', u'Maggie:RT_midFing_1_jnt_ctrl', u'Maggie:RT_midFing_2_jnt_ctrl', u'Maggie:RT_midFing_3_jnt_ctrl', u'Maggie:RT_pinky_1_jnt_ctrl', u'Maggie:RT_pinky_2_jnt_ctrl', u'Maggie:RT_pinky_3_jnt_ctrl', u'Maggie:RT_handAttr_ctrl_1', u'Maggie:RT_lowArm_end_FK_ctrl_1', u'Maggie:RT_lowArm_FK_ctrl_1', u'Maggie:RT_upArm_FK_ctrl_1', u'Maggie:RT_clavicle_jnt_ctrl', u'Maggie:chest_jnt_ctrl', u'Maggie:spine_mid_cls_ctrl', u'Maggie:root_ctrl', u'Maggie:LT_hand_IK_ctrl_1', u'Maggie:RT_hand_IK_ctrl_1', u'Maggie:LT_elbowVector_ctrl_1', u'Maggie:RT_elbowVector_ctrl_1', u'Maggie:LT_hip_FK_ctrl_1', u'Maggie:LT_knee_FK_ctrl_1', u'Maggie:LT_foot_FK_ctrl_1', u'Maggie:LT_ball_FK_ctrl_1', u'Maggie:RT_hip_FK_ctrl_1', u'Maggie:RT_knee_FK_ctrl_1', u'Maggie:RT_foot_FK_ctrl_1', u'Maggie:RT_ball_FK_ctrl_1', u'Maggie:spine_fk_b_jnt_ctrl'] # \nfor i in maggie:\n    cmds.select(i,add=1)\n\n#Wendy NPC ctrls\nwendy = [u'Wendy:LT_foot_IK_ctrl_1', u'Wendy:LT_toepivot_grp_1_ctrl', u'Wendy:LT_footInner_grp_1_ctrl', u'Wendy:LT_footOuter_grp_1_ctrl', u'Wendy:LT_heelpivot_grp_1_ctrl', u'Wendy:LT_ballpivot_grp_1_ctrl', u'Wendy:LT_footroll_grp_1_ctrl', u'Wendy:LT_toeTap_grp_1_ctrl', u'Wendy:RT_footAttr_ctrl_1', u'Wendy:RT_foot_IK_ctrl_1', u'Wendy:RT_toepivot_grp_1_ctrl', u'Wendy:RT_footInner_grp_1_ctrl', u'Wendy:RT_footOuter_grp_1_ctrl', u'Wendy:RT_heelpivot_grp_1_ctrl', u'Wendy:RT_ballpivot_grp_1_ctrl', u'Wendy:RT_footroll_grp_1_ctrl', u'Wendy:RT_toeTap_grp_1_ctrl', u'Wendy:LT_footAttr_ctrl_1', u'Wendy:RT_kneeVector_ctrl_1', u'Wendy:LT_kneeVector_ctrl_1', u'Wendy:pelvis_jnt_ctrl', u'Wendy:LT_thumb_1_jnt_ctrl', u'Wendy:LT_thumb_2_jnt_ctrl', u'Wendy:LT_thumb_3_jnt_ctrl', u'Wendy:LT_index_1_jnt_ctrl', u'Wendy:LT_index_2_jnt_ctrl', u'Wendy:LT_index_3_jnt_ctrl', u'Wendy:LT_midFing_1_jnt_ctrl', u'Wendy:LT_midFing_2_jnt_ctrl', u'Wendy:LT_midFing_3_jnt_ctrl', u'Wendy:LT_pinky_1_jnt_ctrl', u'Wendy:LT_pinky_2_jnt_ctrl', u'Wendy:LT_pinky_3_jnt_ctrl', u'Wendy:LT_lowArm_end_FK_ctrl_1', u'Wendy:LT_lowArm_FK_ctrl_1', u'Wendy:LT_upArm_FK_ctrl_1', u'Wendy:LT_handAttr_ctrl_1', u'Wendy:LT_clavicle_jnt_ctrl', u'Wendy:neck_jnt_ctrl', u'Wendy:head_jnt_ctrl', u'Wendy:RT_thumb_1_jnt_ctrl', u'Wendy:RT_thumb_2_jnt_ctrl', u'Wendy:RT_thumb_3_jnt_ctrl', u'Wendy:RT_index_1_jnt_ctrl', u'Wendy:RT_index_2_jnt_ctrl', u'Wendy:RT_index_3_jnt_ctrl', u'Wendy:RT_midFing_1_jnt_ctrl', u'Wendy:RT_midFing_2_jnt_ctrl', u'Wendy:RT_midFing_3_jnt_ctrl', u'Wendy:RT_pinky_1_jnt_ctrl', u'Wendy:RT_pinky_2_jnt_ctrl', u'Wendy:RT_pinky_3_jnt_ctrl', u'Wendy:RT_handAttr_ctrl_1', u'Wendy:RT_lowArm_end_FK_ctrl_1', u'Wendy:RT_lowArm_FK_ctrl_1', u'Wendy:RT_upArm_FK_ctrl_1', u'Wendy:RT_clavicle_jnt_ctrl', u'Wendy:chest_jnt_ctrl', u'Wendy:spine_mid_cls_ctrl', u'Wendy:root_ctrl', u'Wendy:LT_hand_IK_ctrl_1', u'Wendy:RT_hand_IK_ctrl_1', u'Wendy:LT_elbowVector_ctrl_1', u'Wendy:RT_elbowVector_ctrl_1', u'Wendy:LT_hip_FK_ctrl_1', u'Wendy:LT_knee_FK_ctrl_1', u'Wendy:LT_foot_FK_ctrl_1', u'Wendy:LT_ball_FK_ctrl_1', u'Wendy:RT_hip_FK_ctrl_1', u'Wendy:RT_knee_FK_ctrl_1', u'Wendy:RT_foot_FK_ctrl_1', u'Wendy:RT_ball_FK_ctrl_1', u'Wendy:spine_fk_b_jnt_ctrl'] # \nfor i in wendy:\n    cmds.select(i,add=1)\n\n#Blane NPC ctrls\nblane = [u'Blane:LT_foot_IK_ctrl_1', u'Blane:LT_toepivot_grp_1_ctrl', u'Blane:LT_footInner_grp_1_ctrl', u'Blane:LT_footOuter_grp_1_ctrl', u'Blane:LT_heelpivot_grp_1_ctrl', u'Blane:LT_ballpivot_grp_1_ctrl', u'Blane:LT_footroll_grp_1_ctrl', u'Blane:LT_toeTap_grp_1_ctrl', u'Blane:RT_footAttr_ctrl_1', u'Blane:RT_foot_IK_ctrl_1', u'Blane:RT_toepivot_grp_1_ctrl', u'Blane:RT_footInner_grp_1_ctrl', u'Blane:RT_footOuter_grp_1_ctrl', u'Blane:RT_heelpivot_grp_1_ctrl', u'Blane:RT_ballpivot_grp_1_ctrl', u'Blane:RT_footroll_grp_1_ctrl', u'Blane:RT_toeTap_grp_1_ctrl', u'Blane:LT_footAttr_ctrl_1', u'Blane:RT_kneeVector_ctrl_1', u'Blane:LT_kneeVector_ctrl_1', u'Blane:pelvis_jnt_ctrl', u'Blane:LT_thumb_1_jnt_ctrl', u'Blane:LT_thumb_2_jnt_ctrl', u'Blane:LT_thumb_3_jnt_ctrl', u'Blane:LT_index_1_jnt_ctrl', u'Blane:LT_index_2_jnt_ctrl', u'Blane:LT_index_3_jnt_ctrl', u'Blane:LT_midFing_1_jnt_ctrl', u'Blane:LT_midFing_2_jnt_ctrl', u'Blane:LT_midFing_3_jnt_ctrl', u'Blane:LT_pinky_1_jnt_ctrl', u'Blane:LT_pinky_2_jnt_ctrl', u'Blane:LT_pinky_3_jnt_ctrl', u'Blane:LT_lowArm_end_FK_ctrl_1', u'Blane:LT_lowArm_FK_ctrl_1', u'Blane:LT_upArm_FK_ctrl_1', u'Blane:LT_handAttr_ctrl_1', u'Blane:LT_clavicle_jnt_ctrl', u'Blane:neck_jnt_ctrl', u'Blane:head_jnt_ctrl', u'Blane:RT_thumb_1_jnt_ctrl', u'Blane:RT_thumb_2_jnt_ctrl', u'Blane:RT_thumb_3_jnt_ctrl', u'Blane:RT_index_1_jnt_ctrl', u'Blane:RT_index_2_jnt_ctrl', u'Blane:RT_index_3_jnt_ctrl', u'Blane:RT_midFing_1_jnt_ctrl', u'Blane:RT_midFing_2_jnt_ctrl', u'Blane:RT_midFing_3_jnt_ctrl', u'Blane:RT_pinky_1_jnt_ctrl', u'Blane:RT_pinky_2_jnt_ctrl', u'Blane:RT_pinky_3_jnt_ctrl', u'Blane:RT_handAttr_ctrl_1', u'Blane:RT_lowArm_end_FK_ctrl_1', u'Blane:RT_lowArm_FK_ctrl_1', u'Blane:RT_upArm_FK_ctrl_1', u'Blane:RT_clavicle_jnt_ctrl', u'Blane:chest_jnt_ctrl', u'Blane:spine_mid_cls_ctrl', u'Blane:root_ctrl', u'Blane:LT_hand_IK_ctrl_1', u'Blane:RT_hand_IK_ctrl_1', u'Blane:LT_elbowVector_ctrl_1', u'Blane:RT_elbowVector_ctrl_1', u'Blane:LT_hip_FK_ctrl_1', u'Blane:LT_knee_FK_ctrl_1', u'Blane:LT_foot_FK_ctrl_1', u'Blane:LT_ball_FK_ctrl_1', u'Blane:RT_hip_FK_ctrl_1', u'Blane:RT_knee_FK_ctrl_1', u'Blane:RT_foot_FK_ctrl_1', u'Blane:RT_ball_FK_ctrl_1', u'Blane:spine_fk_b_jnt_ctrl'] # \nfor i in blane:\n    cmds.select(i,add=1)\n\n#Jacob\njacob = [u'global_SRT', u'local_RT', u'root_ctrl', u'spine_fk_b_jnt_ctrl', u'chest_jnt_ctrl', u'LT_clavicle_jnt_ctrl', u'LT_fk_upperArm_ctrl', u'LT_fk_lowerArm_ctrl', u'LT_fk_hand_jnt_ctrl', u'RT_clavicle_jnt_ctrl', u'RT_fk_upperArm_ctrl', u'RT_fk_lowerArm_ctrl', u'RT_fk_hand_jnt_ctrl', u'neck_ctrl', u'head_ctrl', u'fringe_b_jnt_ctrl', u'hair_jnt_ctrl', u'fringe_c_jnt_ctrl', u'fringe_a_jnt_ctrl', u'pelvis_ctrl', u'spine_mid_cls_ctrl', u'RT_arm_attribute_ctrl', u'LT_arm_attribute_ctrl', u'RT_kneeVector_ctrl_2', u'RT_footAttr_ctrl_2', u'RT_foot_IK_ctrl_2', u'RT_toepivot_grp_2_ctrl', u'RT_footInner_grp_2_ctrl', u'RT_footOuter_grp_2_ctrl', u'RT_heelpivot_grp_2_ctrl', u'RT_ballpivot_grp_2_ctrl', u'RT_footroll_grp_2_ctrl', u'RT_toeTap_grp_2_ctrl', u'LT_kneeVector_ctrl_2', u'LT_footAttr_ctrl_2', u'LT_foot_IK_ctrl_2', u'LT_toepivot_grp_2_ctrl', u'LT_footInner_grp_2_ctrl', u'LT_footOuter_grp_2_ctrl', u'LT_heelpivot_grp_2_ctrl', u'LT_ballpivot_grp_2_ctrl', u'LT_footroll_grp_2_ctrl', u'LT_toeTap_grp_2_ctrl', u'LT_thumb_a_jnt_ctrl', u'LT_thumb_b_jnt_ctrl', u'LT_thumb_c_jnt_ctrl', u'LT_index_a_jnt_ctrl', u'LT_index_b_jnt_ctrl', u'LT_index_c_jnt_ctrl', u'LT_midFing_a_jnt_ctrl', u'LT_midFing_b_jnt_ctrl', u'LT_midFing_c_jnt_ctrl', u'LT_pinky_root_jnt_ctrl', u'LT_pinky_a_jnt_ctrl', u'LT_pinky_b_jnt_ctrl', u'LT_pinky_c_jnt_ctrl', u'RT_thumb_a_jnt_ctrl', u'RT_thumb_b_jnt_ctrl', u'RT_thumb_c_jnt_ctrl', u'RT_index_a_jnt_ctrl', u'RT_index_b_jnt_ctrl', u'RT_index_c_jnt_ctrl', u'RT_midFing_a_jnt_ctrl', u'RT_midFing_b_jnt_ctrl', u'RT_midFing_c_jnt_ctrl', u'RT_pinky_root_jnt_ctrl', u'RT_pinky_a_jnt_ctrl', u'RT_pinky_b_jnt_ctrl', u'RT_pinky_c_jnt_ctrl', u'FT_jacket_jnt_ctrl', u'LT_jacket_jnt_ctrl', u'RT_jacket_jnt_ctrl', u'BK_jacket_jnt_ctrl', u'innerHood_ctrl', u'hood_ctrl', u'RT_top_strap_jnt_ctrl', u'RT_mid_strap_jnt_ctrl', u'RT_bot_strap_jnt_ctrl', u'LT_top_strap_jnt_ctrl', u'LT_mid_strap_jnt_ctrl', u'LT_bot_strap_jnt_ctrl', u'ruckSack_jnt_ctrl', u'LT_arm_IK_ctrl', u'RT_arm_IK_ctrl', u'RT_elbow_ctrl', u'LT_elbow_ctrl']\nfor i in jacob:\n    cmds.select(i,add=1)\n" 
        -enableBackground 0
        -align "center" 
        -label "#IMPACT WINTER CHARACTER CONTROL SELECT\nimport maya.cmds as cmds..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "#IMPACT WINTER CHARACTER CONTROL SELECT\nimport maya.cmds as cmds\n\n#Generic NPC ctrls\n#generic = [u'LT_foot_IK_ctrl_1', u'LT_toepivot_grp_1_ctrl', u'LT_footInner_grp_1_ctrl', u'LT_footOuter_grp_1_ctrl', u'LT_heelpivot_grp_1_ctrl', u'LT_ballpivot_grp_1_ctrl', u'LT_footroll_grp_1_ctrl', u'LT_toeTap_grp_1_ctrl', u'RT_footAttr_ctrl_1', u'RT_foot_IK_ctrl_1', u'RT_toepivot_grp_1_ctrl', u'RT_footInner_grp_1_ctrl', u'RT_footOuter_grp_1_ctrl', u'RT_heelpivot_grp_1_ctrl', u'RT_ballpivot_grp_1_ctrl', u'RT_footroll_grp_1_ctrl', u'RT_toeTap_grp_1_ctrl', u'LT_footAttr_ctrl_1', u'RT_kneeVector_ctrl_1', u'LT_kneeVector_ctrl_1', u'pelvis_jnt_ctrl', u'LT_thumb_1_jnt_ctrl', u'LT_thumb_2_jnt_ctrl', u'LT_thumb_3_jnt_ctrl', u'LT_index_1_jnt_ctrl', u'LT_index_2_jnt_ctrl', u'LT_index_3_jnt_ctrl', u'LT_midFing_1_jnt_ctrl', u'LT_midFing_2_jnt_ctrl', u'LT_midFing_3_jnt_ctrl', u'LT_pinky_1_jnt_ctrl', u'LT_pinky_2_jnt_ctrl', u'LT_pinky_3_jnt_ctrl', u'LT_lowArm_end_FK_ctrl_1', u'LT_lowArm_FK_ctrl_1', u'LT_upArm_FK_ctrl_1', u'LT_handAttr_ctrl_1', u'LT_clavicle_jnt_ctrl', u'neck_jnt_ctrl', u'head_jnt_ctrl', u'RT_thumb_1_jnt_ctrl', u'RT_thumb_2_jnt_ctrl', u'RT_thumb_3_jnt_ctrl', u'RT_index_1_jnt_ctrl', u'RT_index_2_jnt_ctrl', u'RT_index_3_jnt_ctrl', u'RT_midFing_1_jnt_ctrl', u'RT_midFing_2_jnt_ctrl', u'RT_midFing_3_jnt_ctrl', u'RT_pinky_1_jnt_ctrl', u'RT_pinky_2_jnt_ctrl', u'RT_pinky_3_jnt_ctrl', u'RT_handAttr_ctrl_1', u'RT_lowArm_end_FK_ctrl_1', u'RT_lowArm_FK_ctrl_1', u'RT_upArm_FK_ctrl_1', u'RT_clavicle_jnt_ctrl', u'chest_jnt_ctrl', u'spine_mid_cls_ctrl', u'root_ctrl', u'LT_hand_IK_ctrl_1', u'RT_hand_IK_ctrl_1', u'LT_elbowVector_ctrl_1', u'RT_elbowVector_ctrl_1', u'LT_hip_FK_ctrl_1', u'LT_knee_FK_ctrl_1', u'LT_foot_FK_ctrl_1', u'LT_ball_FK_ctrl_1', u'RT_hip_FK_ctrl_1', u'RT_knee_FK_ctrl_1', u'RT_foot_FK_ctrl_1', u'RT_ball_FK_ctrl_1', u'spine_fk_b_jnt_ctrl']\n#for i in generic:\n#    cmds.select(i,add=1)\n\n#Christophe NPC ctrls\nchristophe = [u'Christophe:LT_foot_IK_ctrl_1', u'Christophe:LT_toepivot_grp_1_ctrl', u'Christophe:LT_footInner_grp_1_ctrl', u'Christophe:LT_footOuter_grp_1_ctrl', u'Christophe:LT_heelpivot_grp_1_ctrl', u'Christophe:LT_ballpivot_grp_1_ctrl', u'Christophe:LT_footroll_grp_1_ctrl', u'Christophe:LT_toeTap_grp_1_ctrl', u'Christophe:RT_footAttr_ctrl_1', u'Christophe:RT_foot_IK_ctrl_1', u'Christophe:RT_toepivot_grp_1_ctrl', u'Christophe:RT_footInner_grp_1_ctrl', u'Christophe:RT_footOuter_grp_1_ctrl', u'Christophe:RT_heelpivot_grp_1_ctrl', u'Christophe:RT_ballpivot_grp_1_ctrl', u'Christophe:RT_footroll_grp_1_ctrl', u'Christophe:RT_toeTap_grp_1_ctrl', u'Christophe:LT_footAttr_ctrl_1', u'Christophe:RT_kneeVector_ctrl_1', u'Christophe:LT_kneeVector_ctrl_1', u'Christophe:pelvis_jnt_ctrl', u'Christophe:LT_thumb_1_jnt_ctrl', u'Christophe:LT_thumb_2_jnt_ctrl', u'Christophe:LT_thumb_3_jnt_ctrl', u'Christophe:LT_index_1_jnt_ctrl', u'Christophe:LT_index_2_jnt_ctrl', u'Christophe:LT_index_3_jnt_ctrl', u'Christophe:LT_midFing_1_jnt_ctrl', u'Christophe:LT_midFing_2_jnt_ctrl', u'Christophe:LT_midFing_3_jnt_ctrl', u'Christophe:LT_pinky_1_jnt_ctrl', u'Christophe:LT_pinky_2_jnt_ctrl', u'Christophe:LT_pinky_3_jnt_ctrl', u'Christophe:LT_lowArm_end_FK_ctrl_1', u'Christophe:LT_lowArm_FK_ctrl_1', u'Christophe:LT_upArm_FK_ctrl_1', u'Christophe:LT_handAttr_ctrl_1', u'Christophe:LT_clavicle_jnt_ctrl', u'Christophe:neck_jnt_ctrl', u'Christophe:head_jnt_ctrl', u'Christophe:RT_thumb_1_jnt_ctrl', u'Christophe:RT_thumb_2_jnt_ctrl', u'Christophe:RT_thumb_3_jnt_ctrl', u'Christophe:RT_index_1_jnt_ctrl', u'Christophe:RT_index_2_jnt_ctrl', u'Christophe:RT_index_3_jnt_ctrl', u'Christophe:RT_midFing_1_jnt_ctrl', u'Christophe:RT_midFing_2_jnt_ctrl', u'Christophe:RT_midFing_3_jnt_ctrl', u'Christophe:RT_pinky_1_jnt_ctrl', u'Christophe:RT_pinky_2_jnt_ctrl', u'Christophe:RT_pinky_3_jnt_ctrl', u'Christophe:RT_handAttr_ctrl_1', u'Christophe:RT_lowArm_end_FK_ctrl_1', u'Christophe:RT_lowArm_FK_ctrl_1', u'Christophe:RT_upArm_FK_ctrl_1', u'Christophe:RT_clavicle_jnt_ctrl', u'Christophe:chest_jnt_ctrl', u'Christophe:spine_mid_cls_ctrl', u'Christophe:root_ctrl', u'Christophe:LT_hand_IK_ctrl_1', u'Christophe:RT_hand_IK_ctrl_1', u'Christophe:LT_elbowVector_ctrl_1', u'Christophe:RT_elbowVector_ctrl_1', u'Christophe:LT_hip_FK_ctrl_1', u'Christophe:LT_knee_FK_ctrl_1', u'Christophe:LT_foot_FK_ctrl_1', u'Christophe:LT_ball_FK_ctrl_1', u'Christophe:RT_hip_FK_ctrl_1', u'Christophe:RT_knee_FK_ctrl_1', u'Christophe:RT_foot_FK_ctrl_1', u'Christophe:RT_ball_FK_ctrl_1', u'Christophe:spine_fk_b_jnt_ctrl'] # \nfor i in christophe:\n    cmds.select(i,add=1)\n\n#Maggie NPC ctrls\nmaggie = [u'Maggie:LT_foot_IK_ctrl_1', u'Maggie:LT_toepivot_grp_1_ctrl', u'Maggie:LT_footInner_grp_1_ctrl', u'Maggie:LT_footOuter_grp_1_ctrl', u'Maggie:LT_heelpivot_grp_1_ctrl', u'Maggie:LT_ballpivot_grp_1_ctrl', u'Maggie:LT_footroll_grp_1_ctrl', u'Maggie:LT_toeTap_grp_1_ctrl', u'Maggie:RT_footAttr_ctrl_1', u'Maggie:RT_foot_IK_ctrl_1', u'Maggie:RT_toepivot_grp_1_ctrl', u'Maggie:RT_footInner_grp_1_ctrl', u'Maggie:RT_footOuter_grp_1_ctrl', u'Maggie:RT_heelpivot_grp_1_ctrl', u'Maggie:RT_ballpivot_grp_1_ctrl', u'Maggie:RT_footroll_grp_1_ctrl', u'Maggie:RT_toeTap_grp_1_ctrl', u'Maggie:LT_footAttr_ctrl_1', u'Maggie:RT_kneeVector_ctrl_1', u'Maggie:LT_kneeVector_ctrl_1', u'Maggie:pelvis_jnt_ctrl', u'Maggie:LT_thumb_1_jnt_ctrl', u'Maggie:LT_thumb_2_jnt_ctrl', u'Maggie:LT_thumb_3_jnt_ctrl', u'Maggie:LT_index_1_jnt_ctrl', u'Maggie:LT_index_2_jnt_ctrl', u'Maggie:LT_index_3_jnt_ctrl', u'Maggie:LT_midFing_1_jnt_ctrl', u'Maggie:LT_midFing_2_jnt_ctrl', u'Maggie:LT_midFing_3_jnt_ctrl', u'Maggie:LT_pinky_1_jnt_ctrl', u'Maggie:LT_pinky_2_jnt_ctrl', u'Maggie:LT_pinky_3_jnt_ctrl', u'Maggie:LT_lowArm_end_FK_ctrl_1', u'Maggie:LT_lowArm_FK_ctrl_1', u'Maggie:LT_upArm_FK_ctrl_1', u'Maggie:LT_handAttr_ctrl_1', u'Maggie:LT_clavicle_jnt_ctrl', u'Maggie:neck_jnt_ctrl', u'Maggie:head_jnt_ctrl', u'Maggie:RT_thumb_1_jnt_ctrl', u'Maggie:RT_thumb_2_jnt_ctrl', u'Maggie:RT_thumb_3_jnt_ctrl', u'Maggie:RT_index_1_jnt_ctrl', u'Maggie:RT_index_2_jnt_ctrl', u'Maggie:RT_index_3_jnt_ctrl', u'Maggie:RT_midFing_1_jnt_ctrl', u'Maggie:RT_midFing_2_jnt_ctrl', u'Maggie:RT_midFing_3_jnt_ctrl', u'Maggie:RT_pinky_1_jnt_ctrl', u'Maggie:RT_pinky_2_jnt_ctrl', u'Maggie:RT_pinky_3_jnt_ctrl', u'Maggie:RT_handAttr_ctrl_1', u'Maggie:RT_lowArm_end_FK_ctrl_1', u'Maggie:RT_lowArm_FK_ctrl_1', u'Maggie:RT_upArm_FK_ctrl_1', u'Maggie:RT_clavicle_jnt_ctrl', u'Maggie:chest_jnt_ctrl', u'Maggie:spine_mid_cls_ctrl', u'Maggie:root_ctrl', u'Maggie:LT_hand_IK_ctrl_1', u'Maggie:RT_hand_IK_ctrl_1', u'Maggie:LT_elbowVector_ctrl_1', u'Maggie:RT_elbowVector_ctrl_1', u'Maggie:LT_hip_FK_ctrl_1', u'Maggie:LT_knee_FK_ctrl_1', u'Maggie:LT_foot_FK_ctrl_1', u'Maggie:LT_ball_FK_ctrl_1', u'Maggie:RT_hip_FK_ctrl_1', u'Maggie:RT_knee_FK_ctrl_1', u'Maggie:RT_foot_FK_ctrl_1', u'Maggie:RT_ball_FK_ctrl_1', u'Maggie:spine_fk_b_jnt_ctrl'] # \nfor i in maggie:\n    cmds.select(i,add=1)\n\n#Wendy NPC ctrls\nwendy = [u'Wendy:LT_foot_IK_ctrl_1', u'Wendy:LT_toepivot_grp_1_ctrl', u'Wendy:LT_footInner_grp_1_ctrl', u'Wendy:LT_footOuter_grp_1_ctrl', u'Wendy:LT_heelpivot_grp_1_ctrl', u'Wendy:LT_ballpivot_grp_1_ctrl', u'Wendy:LT_footroll_grp_1_ctrl', u'Wendy:LT_toeTap_grp_1_ctrl', u'Wendy:RT_footAttr_ctrl_1', u'Wendy:RT_foot_IK_ctrl_1', u'Wendy:RT_toepivot_grp_1_ctrl', u'Wendy:RT_footInner_grp_1_ctrl', u'Wendy:RT_footOuter_grp_1_ctrl', u'Wendy:RT_heelpivot_grp_1_ctrl', u'Wendy:RT_ballpivot_grp_1_ctrl', u'Wendy:RT_footroll_grp_1_ctrl', u'Wendy:RT_toeTap_grp_1_ctrl', u'Wendy:LT_footAttr_ctrl_1', u'Wendy:RT_kneeVector_ctrl_1', u'Wendy:LT_kneeVector_ctrl_1', u'Wendy:pelvis_jnt_ctrl', u'Wendy:LT_thumb_1_jnt_ctrl', u'Wendy:LT_thumb_2_jnt_ctrl', u'Wendy:LT_thumb_3_jnt_ctrl', u'Wendy:LT_index_1_jnt_ctrl', u'Wendy:LT_index_2_jnt_ctrl', u'Wendy:LT_index_3_jnt_ctrl', u'Wendy:LT_midFing_1_jnt_ctrl', u'Wendy:LT_midFing_2_jnt_ctrl', u'Wendy:LT_midFing_3_jnt_ctrl', u'Wendy:LT_pinky_1_jnt_ctrl', u'Wendy:LT_pinky_2_jnt_ctrl', u'Wendy:LT_pinky_3_jnt_ctrl', u'Wendy:LT_lowArm_end_FK_ctrl_1', u'Wendy:LT_lowArm_FK_ctrl_1', u'Wendy:LT_upArm_FK_ctrl_1', u'Wendy:LT_handAttr_ctrl_1', u'Wendy:LT_clavicle_jnt_ctrl', u'Wendy:neck_jnt_ctrl', u'Wendy:head_jnt_ctrl', u'Wendy:RT_thumb_1_jnt_ctrl', u'Wendy:RT_thumb_2_jnt_ctrl', u'Wendy:RT_thumb_3_jnt_ctrl', u'Wendy:RT_index_1_jnt_ctrl', u'Wendy:RT_index_2_jnt_ctrl', u'Wendy:RT_index_3_jnt_ctrl', u'Wendy:RT_midFing_1_jnt_ctrl', u'Wendy:RT_midFing_2_jnt_ctrl', u'Wendy:RT_midFing_3_jnt_ctrl', u'Wendy:RT_pinky_1_jnt_ctrl', u'Wendy:RT_pinky_2_jnt_ctrl', u'Wendy:RT_pinky_3_jnt_ctrl', u'Wendy:RT_handAttr_ctrl_1', u'Wendy:RT_lowArm_end_FK_ctrl_1', u'Wendy:RT_lowArm_FK_ctrl_1', u'Wendy:RT_upArm_FK_ctrl_1', u'Wendy:RT_clavicle_jnt_ctrl', u'Wendy:chest_jnt_ctrl', u'Wendy:spine_mid_cls_ctrl', u'Wendy:root_ctrl', u'Wendy:LT_hand_IK_ctrl_1', u'Wendy:RT_hand_IK_ctrl_1', u'Wendy:LT_elbowVector_ctrl_1', u'Wendy:RT_elbowVector_ctrl_1', u'Wendy:LT_hip_FK_ctrl_1', u'Wendy:LT_knee_FK_ctrl_1', u'Wendy:LT_foot_FK_ctrl_1', u'Wendy:LT_ball_FK_ctrl_1', u'Wendy:RT_hip_FK_ctrl_1', u'Wendy:RT_knee_FK_ctrl_1', u'Wendy:RT_foot_FK_ctrl_1', u'Wendy:RT_ball_FK_ctrl_1', u'Wendy:spine_fk_b_jnt_ctrl'] # \nfor i in wendy:\n    cmds.select(i,add=1)\n\n#Blane NPC ctrls\nblane = [u'Blane:LT_foot_IK_ctrl_1', u'Blane:LT_toepivot_grp_1_ctrl', u'Blane:LT_footInner_grp_1_ctrl', u'Blane:LT_footOuter_grp_1_ctrl', u'Blane:LT_heelpivot_grp_1_ctrl', u'Blane:LT_ballpivot_grp_1_ctrl', u'Blane:LT_footroll_grp_1_ctrl', u'Blane:LT_toeTap_grp_1_ctrl', u'Blane:RT_footAttr_ctrl_1', u'Blane:RT_foot_IK_ctrl_1', u'Blane:RT_toepivot_grp_1_ctrl', u'Blane:RT_footInner_grp_1_ctrl', u'Blane:RT_footOuter_grp_1_ctrl', u'Blane:RT_heelpivot_grp_1_ctrl', u'Blane:RT_ballpivot_grp_1_ctrl', u'Blane:RT_footroll_grp_1_ctrl', u'Blane:RT_toeTap_grp_1_ctrl', u'Blane:LT_footAttr_ctrl_1', u'Blane:RT_kneeVector_ctrl_1', u'Blane:LT_kneeVector_ctrl_1', u'Blane:pelvis_jnt_ctrl', u'Blane:LT_thumb_1_jnt_ctrl', u'Blane:LT_thumb_2_jnt_ctrl', u'Blane:LT_thumb_3_jnt_ctrl', u'Blane:LT_index_1_jnt_ctrl', u'Blane:LT_index_2_jnt_ctrl', u'Blane:LT_index_3_jnt_ctrl', u'Blane:LT_midFing_1_jnt_ctrl', u'Blane:LT_midFing_2_jnt_ctrl', u'Blane:LT_midFing_3_jnt_ctrl', u'Blane:LT_pinky_1_jnt_ctrl', u'Blane:LT_pinky_2_jnt_ctrl', u'Blane:LT_pinky_3_jnt_ctrl', u'Blane:LT_lowArm_end_FK_ctrl_1', u'Blane:LT_lowArm_FK_ctrl_1', u'Blane:LT_upArm_FK_ctrl_1', u'Blane:LT_handAttr_ctrl_1', u'Blane:LT_clavicle_jnt_ctrl', u'Blane:neck_jnt_ctrl', u'Blane:head_jnt_ctrl', u'Blane:RT_thumb_1_jnt_ctrl', u'Blane:RT_thumb_2_jnt_ctrl', u'Blane:RT_thumb_3_jnt_ctrl', u'Blane:RT_index_1_jnt_ctrl', u'Blane:RT_index_2_jnt_ctrl', u'Blane:RT_index_3_jnt_ctrl', u'Blane:RT_midFing_1_jnt_ctrl', u'Blane:RT_midFing_2_jnt_ctrl', u'Blane:RT_midFing_3_jnt_ctrl', u'Blane:RT_pinky_1_jnt_ctrl', u'Blane:RT_pinky_2_jnt_ctrl', u'Blane:RT_pinky_3_jnt_ctrl', u'Blane:RT_handAttr_ctrl_1', u'Blane:RT_lowArm_end_FK_ctrl_1', u'Blane:RT_lowArm_FK_ctrl_1', u'Blane:RT_upArm_FK_ctrl_1', u'Blane:RT_clavicle_jnt_ctrl', u'Blane:chest_jnt_ctrl', u'Blane:spine_mid_cls_ctrl', u'Blane:root_ctrl', u'Blane:LT_hand_IK_ctrl_1', u'Blane:RT_hand_IK_ctrl_1', u'Blane:LT_elbowVector_ctrl_1', u'Blane:RT_elbowVector_ctrl_1', u'Blane:LT_hip_FK_ctrl_1', u'Blane:LT_knee_FK_ctrl_1', u'Blane:LT_foot_FK_ctrl_1', u'Blane:LT_ball_FK_ctrl_1', u'Blane:RT_hip_FK_ctrl_1', u'Blane:RT_knee_FK_ctrl_1', u'Blane:RT_foot_FK_ctrl_1', u'Blane:RT_ball_FK_ctrl_1', u'Blane:spine_fk_b_jnt_ctrl'] # \nfor i in blane:\n    cmds.select(i,add=1)\n\n#Jacob\njacob = [u'Jacob:global_SRT', u'Jacob:local_RT', u'Jacob:root_ctrl', u'Jacob:spine_fk_b_jnt_ctrl', u'Jacob:chest_jnt_ctrl', u'Jacob:LT_clavicle_jnt_ctrl', u'Jacob:LT_fk_upperArm_ctrl', u'Jacob:LT_fk_lowerArm_ctrl', u'Jacob:LT_fk_hand_jnt_ctrl', u'Jacob:RT_clavicle_jnt_ctrl', u'Jacob:RT_fk_upperArm_ctrl', u'Jacob:RT_fk_lowerArm_ctrl', u'Jacob:RT_fk_hand_jnt_ctrl', u'Jacob:neck_ctrl', u'Jacob:head_ctrl', u'Jacob:fringe_b_jnt_ctrl', u'Jacob:hair_jnt_ctrl', u'Jacob:fringe_c_jnt_ctrl', u'Jacob:fringe_a_jnt_ctrl', u'Jacob:pelvis_ctrl', u'Jacob:spine_mid_cls_ctrl', u'Jacob:RT_arm_attribute_ctrl', u'Jacob:LT_arm_attribute_ctrl', u'Jacob:RT_kneeVector_ctrl_2', u'Jacob:RT_footAttr_ctrl_2', u'Jacob:RT_foot_IK_ctrl_2', u'Jacob:RT_toepivot_grp_2_ctrl', u'Jacob:RT_footInner_grp_2_ctrl', u'Jacob:RT_footOuter_grp_2_ctrl', u'Jacob:RT_heelpivot_grp_2_ctrl', u'Jacob:RT_ballpivot_grp_2_ctrl', u'Jacob:RT_footroll_grp_2_ctrl', u'Jacob:RT_toeTap_grp_2_ctrl', u'Jacob:LT_kneeVector_ctrl_2', u'Jacob:LT_footAttr_ctrl_2', u'Jacob:LT_foot_IK_ctrl_2', u'Jacob:LT_toepivot_grp_2_ctrl', u'Jacob:LT_footInner_grp_2_ctrl', u'Jacob:LT_footOuter_grp_2_ctrl', u'Jacob:LT_heelpivot_grp_2_ctrl', u'Jacob:LT_ballpivot_grp_2_ctrl', u'Jacob:LT_footroll_grp_2_ctrl', u'Jacob:LT_toeTap_grp_2_ctrl', u'Jacob:LT_thumb_a_jnt_ctrl', u'Jacob:LT_thumb_b_jnt_ctrl', u'Jacob:LT_thumb_c_jnt_ctrl', u'Jacob:LT_index_a_jnt_ctrl', u'Jacob:LT_index_b_jnt_ctrl', u'Jacob:LT_index_c_jnt_ctrl', u'Jacob:LT_midFing_a_jnt_ctrl', u'Jacob:LT_midFing_b_jnt_ctrl', u'Jacob:LT_midFing_c_jnt_ctrl', u'Jacob:LT_pinky_root_jnt_ctrl', u'Jacob:LT_pinky_a_jnt_ctrl', u'Jacob:LT_pinky_b_jnt_ctrl', u'Jacob:LT_pinky_c_jnt_ctrl', u'Jacob:RT_thumb_a_jnt_ctrl', u'Jacob:RT_thumb_b_jnt_ctrl', u'Jacob:RT_thumb_c_jnt_ctrl', u'Jacob:RT_index_a_jnt_ctrl', u'Jacob:RT_index_b_jnt_ctrl', u'Jacob:RT_index_c_jnt_ctrl', u'Jacob:RT_midFing_a_jnt_ctrl', u'Jacob:RT_midFing_b_jnt_ctrl', u'Jacob:RT_midFing_c_jnt_ctrl', u'Jacob:RT_pinky_root_jnt_ctrl', u'Jacob:RT_pinky_a_jnt_ctrl', u'Jacob:RT_pinky_b_jnt_ctrl', u'Jacob:RT_pinky_c_jnt_ctrl', u'Jacob:FT_jacket_jnt_ctrl', u'Jacob:LT_jacket_jnt_ctrl', u'Jacob:RT_jacket_jnt_ctrl', u'Jacob:BK_jacket_jnt_ctrl', u'Jacob:innerHood_ctrl', u'Jacob:hood_ctrl', u'Jacob:RT_top_strap_jnt_ctrl', u'Jacob:RT_mid_strap_jnt_ctrl', u'Jacob:RT_bot_strap_jnt_ctrl', u'Jacob:LT_top_strap_jnt_ctrl', u'Jacob:LT_mid_strap_jnt_ctrl', u'Jacob:LT_bot_strap_jnt_ctrl', u'Jacob:ruckSack_jnt_ctrl', u'Jacob:LT_arm_IK_ctrl', u'Jacob:RT_arm_IK_ctrl', u'Jacob:RT_elbow_ctrl', u'Jacob:LT_elbow_ctrl'] # \nfor i in jacob:\n    cmds.select(i,add=1)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "Jacob" ( "#Jacob\ncmds.select(d=1)\njacob = [u'Jacob:global_SRT', u'Jacob:local_RT', u'Jacob:root_ctrl', u'Jacob:spine_fk_b_jnt_ctrl', u'Jacob:chest_jnt_ctrl', u'Jacob:LT_clavicle_jnt_ctrl', u'Jacob:LT_fk_upperArm_ctrl', u'Jacob:LT_fk_lowerArm_ctrl', u'Jacob:LT_fk_hand_jnt_ctrl', u'Jacob:RT_clavicle_jnt_ctrl', u'Jacob:RT_fk_upperArm_ctrl', u'Jacob:RT_fk_lowerArm_ctrl', u'Jacob:RT_fk_hand_jnt_ctrl', u'Jacob:neck_ctrl', u'Jacob:head_ctrl', u'Jacob:fringe_b_jnt_ctrl', u'Jacob:hair_jnt_ctrl', u'Jacob:fringe_c_jnt_ctrl', u'Jacob:fringe_a_jnt_ctrl', u'Jacob:pelvis_ctrl', u'Jacob:spine_mid_cls_ctrl', u'Jacob:RT_arm_attribute_ctrl', u'Jacob:LT_arm_attribute_ctrl', u'Jacob:RT_kneeVector_ctrl_2', u'Jacob:RT_footAttr_ctrl_2', u'Jacob:RT_foot_IK_ctrl_2', u'Jacob:RT_toepivot_grp_2_ctrl', u'Jacob:RT_footInner_grp_2_ctrl', u'Jacob:RT_footOuter_grp_2_ctrl', u'Jacob:RT_heelpivot_grp_2_ctrl', u'Jacob:RT_ballpivot_grp_2_ctrl', u'Jacob:RT_footroll_grp_2_ctrl', u'Jacob:RT_toeTap_grp_2_ctrl', u'Jacob:LT_kneeVector_ctrl_2', u'Jacob:LT_footAttr_ctrl_2', u'Jacob:LT_foot_IK_ctrl_2', u'Jacob:LT_toepivot_grp_2_ctrl', u'Jacob:LT_footInner_grp_2_ctrl', u'Jacob:LT_footOuter_grp_2_ctrl', u'Jacob:LT_heelpivot_grp_2_ctrl', u'Jacob:LT_ballpivot_grp_2_ctrl', u'Jacob:LT_footroll_grp_2_ctrl', u'Jacob:LT_toeTap_grp_2_ctrl', u'Jacob:LT_thumb_a_jnt_ctrl', u'Jacob:LT_thumb_b_jnt_ctrl', u'Jacob:LT_thumb_c_jnt_ctrl', u'Jacob:LT_index_a_jnt_ctrl', u'Jacob:LT_index_b_jnt_ctrl', u'Jacob:LT_index_c_jnt_ctrl', u'Jacob:LT_midFing_a_jnt_ctrl', u'Jacob:LT_midFing_b_jnt_ctrl', u'Jacob:LT_midFing_c_jnt_ctrl', u'Jacob:LT_pinky_root_jnt_ctrl', u'Jacob:LT_pinky_a_jnt_ctrl', u'Jacob:LT_pinky_b_jnt_ctrl', u'Jacob:LT_pinky_c_jnt_ctrl', u'Jacob:RT_thumb_a_jnt_ctrl', u'Jacob:RT_thumb_b_jnt_ctrl', u'Jacob:RT_thumb_c_jnt_ctrl', u'Jacob:RT_index_a_jnt_ctrl', u'Jacob:RT_index_b_jnt_ctrl', u'Jacob:RT_index_c_jnt_ctrl', u'Jacob:RT_midFing_a_jnt_ctrl', u'Jacob:RT_midFing_b_jnt_ctrl', u'Jacob:RT_midFing_c_jnt_ctrl', u'Jacob:RT_pinky_root_jnt_ctrl', u'Jacob:RT_pinky_a_jnt_ctrl', u'Jacob:RT_pinky_b_jnt_ctrl', u'Jacob:RT_pinky_c_jnt_ctrl', u'Jacob:FT_jacket_jnt_ctrl', u'Jacob:LT_jacket_jnt_ctrl', u'Jacob:RT_jacket_jnt_ctrl', u'Jacob:BK_jacket_jnt_ctrl', u'Jacob:innerHood_ctrl', u'Jacob:hood_ctrl', u'Jacob:RT_top_strap_jnt_ctrl', u'Jacob:RT_mid_strap_jnt_ctrl', u'Jacob:RT_bot_strap_jnt_ctrl', u'Jacob:LT_top_strap_jnt_ctrl', u'Jacob:LT_mid_strap_jnt_ctrl', u'Jacob:LT_bot_strap_jnt_ctrl', u'Jacob:ruckSack_jnt_ctrl', u'Jacob:LT_arm_IK_ctrl', u'Jacob:RT_arm_IK_ctrl', u'Jacob:RT_elbow_ctrl', u'Jacob:LT_elbow_ctrl'] # \nfor i in jacob:\n    cmds.select(i,add=1)" )
        -mip 0
        -mi "Christophe" ( "#Christophe NPC ctrls\ncmds.select(d=1)\nchristophe = [u'Christophe:LT_foot_IK_ctrl_1', u'Christophe:LT_toepivot_grp_1_ctrl', u'Christophe:LT_footInner_grp_1_ctrl', u'Christophe:LT_footOuter_grp_1_ctrl', u'Christophe:LT_heelpivot_grp_1_ctrl', u'Christophe:LT_ballpivot_grp_1_ctrl', u'Christophe:LT_footroll_grp_1_ctrl', u'Christophe:LT_toeTap_grp_1_ctrl', u'Christophe:RT_footAttr_ctrl_1', u'Christophe:RT_foot_IK_ctrl_1', u'Christophe:RT_toepivot_grp_1_ctrl', u'Christophe:RT_footInner_grp_1_ctrl', u'Christophe:RT_footOuter_grp_1_ctrl', u'Christophe:RT_heelpivot_grp_1_ctrl', u'Christophe:RT_ballpivot_grp_1_ctrl', u'Christophe:RT_footroll_grp_1_ctrl', u'Christophe:RT_toeTap_grp_1_ctrl', u'Christophe:LT_footAttr_ctrl_1', u'Christophe:RT_kneeVector_ctrl_1', u'Christophe:LT_kneeVector_ctrl_1', u'Christophe:pelvis_jnt_ctrl', u'Christophe:LT_thumb_1_jnt_ctrl', u'Christophe:LT_thumb_2_jnt_ctrl', u'Christophe:LT_thumb_3_jnt_ctrl', u'Christophe:LT_index_1_jnt_ctrl', u'Christophe:LT_index_2_jnt_ctrl', u'Christophe:LT_index_3_jnt_ctrl', u'Christophe:LT_midFing_1_jnt_ctrl', u'Christophe:LT_midFing_2_jnt_ctrl', u'Christophe:LT_midFing_3_jnt_ctrl', u'Christophe:LT_pinky_1_jnt_ctrl', u'Christophe:LT_pinky_2_jnt_ctrl', u'Christophe:LT_pinky_3_jnt_ctrl', u'Christophe:LT_lowArm_end_FK_ctrl_1', u'Christophe:LT_lowArm_FK_ctrl_1', u'Christophe:LT_upArm_FK_ctrl_1', u'Christophe:LT_handAttr_ctrl_1', u'Christophe:LT_clavicle_jnt_ctrl', u'Christophe:neck_jnt_ctrl', u'Christophe:head_jnt_ctrl', u'Christophe:RT_thumb_1_jnt_ctrl', u'Christophe:RT_thumb_2_jnt_ctrl', u'Christophe:RT_thumb_3_jnt_ctrl', u'Christophe:RT_index_1_jnt_ctrl', u'Christophe:RT_index_2_jnt_ctrl', u'Christophe:RT_index_3_jnt_ctrl', u'Christophe:RT_midFing_1_jnt_ctrl', u'Christophe:RT_midFing_2_jnt_ctrl', u'Christophe:RT_midFing_3_jnt_ctrl', u'Christophe:RT_pinky_1_jnt_ctrl', u'Christophe:RT_pinky_2_jnt_ctrl', u'Christophe:RT_pinky_3_jnt_ctrl', u'Christophe:RT_handAttr_ctrl_1', u'Christophe:RT_lowArm_end_FK_ctrl_1', u'Christophe:RT_lowArm_FK_ctrl_1', u'Christophe:RT_upArm_FK_ctrl_1', u'Christophe:RT_clavicle_jnt_ctrl', u'Christophe:chest_jnt_ctrl', u'Christophe:spine_mid_cls_ctrl', u'Christophe:root_ctrl', u'Christophe:LT_hand_IK_ctrl_1', u'Christophe:RT_hand_IK_ctrl_1', u'Christophe:LT_elbowVector_ctrl_1', u'Christophe:RT_elbowVector_ctrl_1', u'Christophe:LT_hip_FK_ctrl_1', u'Christophe:LT_knee_FK_ctrl_1', u'Christophe:LT_foot_FK_ctrl_1', u'Christophe:LT_ball_FK_ctrl_1', u'Christophe:RT_hip_FK_ctrl_1', u'Christophe:RT_knee_FK_ctrl_1', u'Christophe:RT_foot_FK_ctrl_1', u'Christophe:RT_ball_FK_ctrl_1', u'Christophe:spine_fk_b_jnt_ctrl'] # \nfor i in christophe:\n    cmds.select(i,add=1)" )
        -mip 1
        -mi "Maggie" ( "#Maggie NPC ctrls\ncmds.select(d=1)\nmaggie = [u'Maggie:LT_foot_IK_ctrl_1', u'Maggie:LT_toepivot_grp_1_ctrl', u'Maggie:LT_footInner_grp_1_ctrl', u'Maggie:LT_footOuter_grp_1_ctrl', u'Maggie:LT_heelpivot_grp_1_ctrl', u'Maggie:LT_ballpivot_grp_1_ctrl', u'Maggie:LT_footroll_grp_1_ctrl', u'Maggie:LT_toeTap_grp_1_ctrl', u'Maggie:RT_footAttr_ctrl_1', u'Maggie:RT_foot_IK_ctrl_1', u'Maggie:RT_toepivot_grp_1_ctrl', u'Maggie:RT_footInner_grp_1_ctrl', u'Maggie:RT_footOuter_grp_1_ctrl', u'Maggie:RT_heelpivot_grp_1_ctrl', u'Maggie:RT_ballpivot_grp_1_ctrl', u'Maggie:RT_footroll_grp_1_ctrl', u'Maggie:RT_toeTap_grp_1_ctrl', u'Maggie:LT_footAttr_ctrl_1', u'Maggie:RT_kneeVector_ctrl_1', u'Maggie:LT_kneeVector_ctrl_1', u'Maggie:pelvis_jnt_ctrl', u'Maggie:LT_thumb_1_jnt_ctrl', u'Maggie:LT_thumb_2_jnt_ctrl', u'Maggie:LT_thumb_3_jnt_ctrl', u'Maggie:LT_index_1_jnt_ctrl', u'Maggie:LT_index_2_jnt_ctrl', u'Maggie:LT_index_3_jnt_ctrl', u'Maggie:LT_midFing_1_jnt_ctrl', u'Maggie:LT_midFing_2_jnt_ctrl', u'Maggie:LT_midFing_3_jnt_ctrl', u'Maggie:LT_pinky_1_jnt_ctrl', u'Maggie:LT_pinky_2_jnt_ctrl', u'Maggie:LT_pinky_3_jnt_ctrl', u'Maggie:LT_lowArm_end_FK_ctrl_1', u'Maggie:LT_lowArm_FK_ctrl_1', u'Maggie:LT_upArm_FK_ctrl_1', u'Maggie:LT_handAttr_ctrl_1', u'Maggie:LT_clavicle_jnt_ctrl', u'Maggie:neck_jnt_ctrl', u'Maggie:head_jnt_ctrl', u'Maggie:RT_thumb_1_jnt_ctrl', u'Maggie:RT_thumb_2_jnt_ctrl', u'Maggie:RT_thumb_3_jnt_ctrl', u'Maggie:RT_index_1_jnt_ctrl', u'Maggie:RT_index_2_jnt_ctrl', u'Maggie:RT_index_3_jnt_ctrl', u'Maggie:RT_midFing_1_jnt_ctrl', u'Maggie:RT_midFing_2_jnt_ctrl', u'Maggie:RT_midFing_3_jnt_ctrl', u'Maggie:RT_pinky_1_jnt_ctrl', u'Maggie:RT_pinky_2_jnt_ctrl', u'Maggie:RT_pinky_3_jnt_ctrl', u'Maggie:RT_handAttr_ctrl_1', u'Maggie:RT_lowArm_end_FK_ctrl_1', u'Maggie:RT_lowArm_FK_ctrl_1', u'Maggie:RT_upArm_FK_ctrl_1', u'Maggie:RT_clavicle_jnt_ctrl', u'Maggie:chest_jnt_ctrl', u'Maggie:spine_mid_cls_ctrl', u'Maggie:root_ctrl', u'Maggie:LT_hand_IK_ctrl_1', u'Maggie:RT_hand_IK_ctrl_1', u'Maggie:LT_elbowVector_ctrl_1', u'Maggie:RT_elbowVector_ctrl_1', u'Maggie:LT_hip_FK_ctrl_1', u'Maggie:LT_knee_FK_ctrl_1', u'Maggie:LT_foot_FK_ctrl_1', u'Maggie:LT_ball_FK_ctrl_1', u'Maggie:RT_hip_FK_ctrl_1', u'Maggie:RT_knee_FK_ctrl_1', u'Maggie:RT_foot_FK_ctrl_1', u'Maggie:RT_ball_FK_ctrl_1', u'Maggie:spine_fk_b_jnt_ctrl'] # \nfor i in maggie:\n    cmds.select(i,add=1)" )
        -mip 2
        -mi "Wendy" ( "#Wendy NPC ctrls\ncmds.select(d=1)\nwendy = [u'Wendy:LT_foot_IK_ctrl_1', u'Wendy:LT_toepivot_grp_1_ctrl', u'Wendy:LT_footInner_grp_1_ctrl', u'Wendy:LT_footOuter_grp_1_ctrl', u'Wendy:LT_heelpivot_grp_1_ctrl', u'Wendy:LT_ballpivot_grp_1_ctrl', u'Wendy:LT_footroll_grp_1_ctrl', u'Wendy:LT_toeTap_grp_1_ctrl', u'Wendy:RT_footAttr_ctrl_1', u'Wendy:RT_foot_IK_ctrl_1', u'Wendy:RT_toepivot_grp_1_ctrl', u'Wendy:RT_footInner_grp_1_ctrl', u'Wendy:RT_footOuter_grp_1_ctrl', u'Wendy:RT_heelpivot_grp_1_ctrl', u'Wendy:RT_ballpivot_grp_1_ctrl', u'Wendy:RT_footroll_grp_1_ctrl', u'Wendy:RT_toeTap_grp_1_ctrl', u'Wendy:LT_footAttr_ctrl_1', u'Wendy:RT_kneeVector_ctrl_1', u'Wendy:LT_kneeVector_ctrl_1', u'Wendy:pelvis_jnt_ctrl', u'Wendy:LT_thumb_1_jnt_ctrl', u'Wendy:LT_thumb_2_jnt_ctrl', u'Wendy:LT_thumb_3_jnt_ctrl', u'Wendy:LT_index_1_jnt_ctrl', u'Wendy:LT_index_2_jnt_ctrl', u'Wendy:LT_index_3_jnt_ctrl', u'Wendy:LT_midFing_1_jnt_ctrl', u'Wendy:LT_midFing_2_jnt_ctrl', u'Wendy:LT_midFing_3_jnt_ctrl', u'Wendy:LT_pinky_1_jnt_ctrl', u'Wendy:LT_pinky_2_jnt_ctrl', u'Wendy:LT_pinky_3_jnt_ctrl', u'Wendy:LT_lowArm_end_FK_ctrl_1', u'Wendy:LT_lowArm_FK_ctrl_1', u'Wendy:LT_upArm_FK_ctrl_1', u'Wendy:LT_handAttr_ctrl_1', u'Wendy:LT_clavicle_jnt_ctrl', u'Wendy:neck_jnt_ctrl', u'Wendy:head_jnt_ctrl', u'Wendy:RT_thumb_1_jnt_ctrl', u'Wendy:RT_thumb_2_jnt_ctrl', u'Wendy:RT_thumb_3_jnt_ctrl', u'Wendy:RT_index_1_jnt_ctrl', u'Wendy:RT_index_2_jnt_ctrl', u'Wendy:RT_index_3_jnt_ctrl', u'Wendy:RT_midFing_1_jnt_ctrl', u'Wendy:RT_midFing_2_jnt_ctrl', u'Wendy:RT_midFing_3_jnt_ctrl', u'Wendy:RT_pinky_1_jnt_ctrl', u'Wendy:RT_pinky_2_jnt_ctrl', u'Wendy:RT_pinky_3_jnt_ctrl', u'Wendy:RT_handAttr_ctrl_1', u'Wendy:RT_lowArm_end_FK_ctrl_1', u'Wendy:RT_lowArm_FK_ctrl_1', u'Wendy:RT_upArm_FK_ctrl_1', u'Wendy:RT_clavicle_jnt_ctrl', u'Wendy:chest_jnt_ctrl', u'Wendy:spine_mid_cls_ctrl', u'Wendy:root_ctrl', u'Wendy:LT_hand_IK_ctrl_1', u'Wendy:RT_hand_IK_ctrl_1', u'Wendy:LT_elbowVector_ctrl_1', u'Wendy:RT_elbowVector_ctrl_1', u'Wendy:LT_hip_FK_ctrl_1', u'Wendy:LT_knee_FK_ctrl_1', u'Wendy:LT_foot_FK_ctrl_1', u'Wendy:LT_ball_FK_ctrl_1', u'Wendy:RT_hip_FK_ctrl_1', u'Wendy:RT_knee_FK_ctrl_1', u'Wendy:RT_foot_FK_ctrl_1', u'Wendy:RT_ball_FK_ctrl_1', u'Wendy:spine_fk_b_jnt_ctrl'] # \nfor i in wendy:\n    cmds.select(i,add=1)" )
        -mip 3
        -mi "Blane" ( "#Blane NPC ctrls\ncmds.select(d=1)\nblane = [u'Blane:LT_foot_IK_ctrl_1', u'Blane:LT_toepivot_grp_1_ctrl', u'Blane:LT_footInner_grp_1_ctrl', u'Blane:LT_footOuter_grp_1_ctrl', u'Blane:LT_heelpivot_grp_1_ctrl', u'Blane:LT_ballpivot_grp_1_ctrl', u'Blane:LT_footroll_grp_1_ctrl', u'Blane:LT_toeTap_grp_1_ctrl', u'Blane:RT_footAttr_ctrl_1', u'Blane:RT_foot_IK_ctrl_1', u'Blane:RT_toepivot_grp_1_ctrl', u'Blane:RT_footInner_grp_1_ctrl', u'Blane:RT_footOuter_grp_1_ctrl', u'Blane:RT_heelpivot_grp_1_ctrl', u'Blane:RT_ballpivot_grp_1_ctrl', u'Blane:RT_footroll_grp_1_ctrl', u'Blane:RT_toeTap_grp_1_ctrl', u'Blane:LT_footAttr_ctrl_1', u'Blane:RT_kneeVector_ctrl_1', u'Blane:LT_kneeVector_ctrl_1', u'Blane:pelvis_jnt_ctrl', u'Blane:LT_thumb_1_jnt_ctrl', u'Blane:LT_thumb_2_jnt_ctrl', u'Blane:LT_thumb_3_jnt_ctrl', u'Blane:LT_index_1_jnt_ctrl', u'Blane:LT_index_2_jnt_ctrl', u'Blane:LT_index_3_jnt_ctrl', u'Blane:LT_midFing_1_jnt_ctrl', u'Blane:LT_midFing_2_jnt_ctrl', u'Blane:LT_midFing_3_jnt_ctrl', u'Blane:LT_pinky_1_jnt_ctrl', u'Blane:LT_pinky_2_jnt_ctrl', u'Blane:LT_pinky_3_jnt_ctrl', u'Blane:LT_lowArm_end_FK_ctrl_1', u'Blane:LT_lowArm_FK_ctrl_1', u'Blane:LT_upArm_FK_ctrl_1', u'Blane:LT_handAttr_ctrl_1', u'Blane:LT_clavicle_jnt_ctrl', u'Blane:neck_jnt_ctrl', u'Blane:head_jnt_ctrl', u'Blane:RT_thumb_1_jnt_ctrl', u'Blane:RT_thumb_2_jnt_ctrl', u'Blane:RT_thumb_3_jnt_ctrl', u'Blane:RT_index_1_jnt_ctrl', u'Blane:RT_index_2_jnt_ctrl', u'Blane:RT_index_3_jnt_ctrl', u'Blane:RT_midFing_1_jnt_ctrl', u'Blane:RT_midFing_2_jnt_ctrl', u'Blane:RT_midFing_3_jnt_ctrl', u'Blane:RT_pinky_1_jnt_ctrl', u'Blane:RT_pinky_2_jnt_ctrl', u'Blane:RT_pinky_3_jnt_ctrl', u'Blane:RT_handAttr_ctrl_1', u'Blane:RT_lowArm_end_FK_ctrl_1', u'Blane:RT_lowArm_FK_ctrl_1', u'Blane:RT_upArm_FK_ctrl_1', u'Blane:RT_clavicle_jnt_ctrl', u'Blane:chest_jnt_ctrl', u'Blane:spine_mid_cls_ctrl', u'Blane:root_ctrl', u'Blane:LT_hand_IK_ctrl_1', u'Blane:RT_hand_IK_ctrl_1', u'Blane:LT_elbowVector_ctrl_1', u'Blane:RT_elbowVector_ctrl_1', u'Blane:LT_hip_FK_ctrl_1', u'Blane:LT_knee_FK_ctrl_1', u'Blane:LT_foot_FK_ctrl_1', u'Blane:LT_ball_FK_ctrl_1', u'Blane:RT_hip_FK_ctrl_1', u'Blane:RT_knee_FK_ctrl_1', u'Blane:RT_foot_FK_ctrl_1', u'Blane:RT_ball_FK_ctrl_1', u'Blane:spine_fk_b_jnt_ctrl'] # \nfor i in blane:\n    cmds.select(i,add=1)" )
        -mip 4
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "cmds.setAttr( \"polySurfaceShape3.doubleSided\", 0)\ncmds.setAttr( \"polySurfaceShape3.opposite\", 1)" 
        -enableBackground 0
        -align "center" 
        -label "cmds.setAttr( \"polySurfaceShape3.doubleSided\", 0)\ncmds.setAttr( ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "tent2Vis" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "cmds.setAttr( \"polySurfaceShape3.doubleSided\", 0)\ncmds.setAttr( \"polySurfaceShape3.opposite\", 1)" 
        -sourceType "python" 
        -doubleClickCommand "cmds.setAttr( \"polySurfaceShape3.opposite\", 0)\ncmds.setAttr( \"polySurfaceShape3.doubleSided\", 1)\n" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "cmds.setAttr( \"polySurfaceShape3.opposite\", 0)\ncmds.setAttr( \"polySurfaceShape3.doubleSided\", 1)\n" 
        -enableBackground 0
        -align "center" 
        -label "cmds.setAttr( \"polySurfaceShape3.opposite\", 0)\ncmds.setAttr( \"po..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "cmds.setAttr( \"polySurfaceShape3.opposite\", 0)\ncmds.setAttr( \"polySurfaceShape3.doubleSided\", 1)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r global_SRT local_RT root_ctrl pelvis_jnt_ctrl tail_1_jnt_ctrl tail_2_jnt_ctrl spine_FK_1_jnt_ctrl spine_FK_2_jnt_ctrl LT_FT_kneeVector_ctrl LT_FT_footAttr_ctrl LT_FT_foot_IK_ctrl LT_FT_toepivot_grp_2_ctrl LT_FT_footInner_grp_2_ctrl LT_FT_footOuter_grp_2_ctrl LT_FT_heelpivot_grp_2_ctrl LT_FT_ballpivot_grp_2_ctrl LT_FT_footroll_grp_2_ctrl LT_FT_toeTap_grp_2_ctrl RT_FT_kneeVector_ctrl RT_FT_footAttr_ctrl RT_FT_foot_IK_ctrl RT_FT_toepivot_grp_2_ctrl RT_FT_footInner_grp_2_ctrl RT_FT_footOuter_grp_2_ctrl RT_FT_heelpivot_grp_2_ctrl RT_FT_ballpivot_grp_2_ctrl RT_FT_footroll_grp_2_ctrl RT_FT_toeTap_grp_2_ctrl LT_BK_kneeVector_ctrl LT_BK_footAttr_ctrl LT_BK_foot_IK_ctrl LT_BK_toepivot_grp_1_ctrl LT_BK_footInner_grp_1_ctrl LT_BK_footOuter_grp_1_ctrl LT_BK_heelpivot_grp_1_ctrl LT_BK_ballpivot_grp_1_ctrl LT_BK_footroll_grp_1_ctrl LT_BK_toeTap_grp_1_ctrl RT_BK_kneeVector_ctrl RT_BK_footAttr_ctrl RT_BK_foot_IK_ctrl RT_BK_toepivot_grp_1_ctrl RT_BK_footInner_grp_1_ctrl RT_BK_footOuter_grp_1_ctrl RT_BK_heelpivot_grp_1_ctrl RT_BK_ballpivot_grp_1_ctrl RT_BK_footroll_grp_1_ctrl RT_BK_toeTap_grp_1_ctrl spine_mid_cls_ctrl chest_jnt_ctrl LT_clavicle_root_jnt_ctrl RT_clavicle_root_jnt_ctrl neckBase_ctrl head_jnt_ctrl jaw_jnt_ctrl RT_ear_1_jnt_ctrl RT_ear_2_jnt_ctrl LT_ear_1_jnt_ctrl LT_ear_2_jnt_ctrl ;\n" 
        -enableBackground 0
        -align "center" 
        -label "select -r global_SRT local_RT root_ctrl pelvis_jnt_ctrl tail_1_j..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "BEAR" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -r global_SRT local_RT root_ctrl pelvis_jnt_ctrl tail_1_jnt_ctrl tail_2_jnt_ctrl spine_FK_1_jnt_ctrl spine_FK_2_jnt_ctrl LT_FT_kneeVector_ctrl LT_FT_footAttr_ctrl LT_FT_foot_IK_ctrl LT_FT_toepivot_grp_2_ctrl LT_FT_footInner_grp_2_ctrl LT_FT_footOuter_grp_2_ctrl LT_FT_heelpivot_grp_2_ctrl LT_FT_ballpivot_grp_2_ctrl LT_FT_footroll_grp_2_ctrl LT_FT_toeTap_grp_2_ctrl RT_FT_kneeVector_ctrl RT_FT_footAttr_ctrl RT_FT_foot_IK_ctrl RT_FT_toepivot_grp_2_ctrl RT_FT_footInner_grp_2_ctrl RT_FT_footOuter_grp_2_ctrl RT_FT_heelpivot_grp_2_ctrl RT_FT_ballpivot_grp_2_ctrl RT_FT_footroll_grp_2_ctrl RT_FT_toeTap_grp_2_ctrl LT_BK_kneeVector_ctrl LT_BK_footAttr_ctrl LT_BK_foot_IK_ctrl LT_BK_toepivot_grp_1_ctrl LT_BK_footInner_grp_1_ctrl LT_BK_footOuter_grp_1_ctrl LT_BK_heelpivot_grp_1_ctrl LT_BK_ballpivot_grp_1_ctrl LT_BK_footroll_grp_1_ctrl LT_BK_toeTap_grp_1_ctrl RT_BK_kneeVector_ctrl RT_BK_footAttr_ctrl RT_BK_foot_IK_ctrl RT_BK_toepivot_grp_1_ctrl RT_BK_footInner_grp_1_ctrl RT_BK_footOuter_grp_1_ctrl RT_BK_heelpivot_grp_1_ctrl RT_BK_ballpivot_grp_1_ctrl RT_BK_footroll_grp_1_ctrl RT_BK_toeTap_grp_1_ctrl spine_mid_cls_ctrl chest_jnt_ctrl LT_clavicle_root_jnt_ctrl RT_clavicle_root_jnt_ctrl neckBase_ctrl head_jnt_ctrl jaw_jnt_ctrl RT_ear_1_jnt_ctrl RT_ear_2_jnt_ctrl LT_ear_1_jnt_ctrl LT_ear_2_jnt_ctrl ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "cmds.select([u'root_ctrl', u'RT_BK_foot_IK_ctrl', u'LT_BK_foot_IK_ctrl', u'RT_FT_foot_IK_ctrl', u'LT_FT_foot_IK_ctrl'])\n" 
        -enableBackground 0
        -align "center" 
        -label "cmds.select([u'root_ctrl', u'RT_BK_foot_IK_ctrl', u'LT_BK_foot_I..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "cmds.select([u'root_ctrl', u'RT_BK_foot_IK_ctrl', u'LT_BK_foot_IK_ctrl', u'RT_FT_foot_IK_ctrl', u'LT_FT_foot_IK_ctrl'])\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r global_SRT local_RT root_ctrl spine_2_FK_jnt_ctrl pelvis_jnt_ctrl tail_1_jnt_ctrl tail_2_jnt_ctrl tail_3_jnt_ctrl tail_4_jnt_ctrl tail_5_jnt_ctrl tail_6_jnt_ctrl tail_7_jnt_ctrl LT_BK_IK_ctrl LT_BK_knee_ctrl LT_BK_foot_IK_ctrl spine_mid_cls_ctrl RT_BK_IK_ctrl RT_BK_foot_IK_ctrl chest_jnt_ctrl head_jnt_ctrl LT_ear_1_jnt_ctrl LT_ear_2_jnt_ctrl RT_ear_1_jnt_ctrl RT_ear_2_jnt_ctrl jaw_jnt_ctrl RT_clavicle_jnt_ctrl LT_clavicle_jnt_ctrl LT_FT_knee_ctrl LT_FT_foot_IK_ctrl LT_FT_IK_ctrl RT_FT_foot_IK_ctrl RT_FT_IK_ctrl RT_FT_knee_ctrl RT_knee_ctrl LT_FT_fur_jnt_ctrl RT_FT_fur_jnt_ctrl LT_fur_jnt_ctrl RT_fur_jnt_ctrl accessory_1_jnt_ctrl accessory_2_jnt_ctrl ;\n" 
        -enableBackground 0
        -align "center" 
        -label "select -r global_SRT local_RT root_ctrl spine_2_FK_jnt_ctrl pelv..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "BISON" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -r global_SRT local_RT root_ctrl spine_2_FK_jnt_ctrl pelvis_jnt_ctrl tail_1_jnt_ctrl tail_2_jnt_ctrl tail_3_jnt_ctrl tail_4_jnt_ctrl tail_5_jnt_ctrl tail_6_jnt_ctrl tail_7_jnt_ctrl LT_BK_IK_ctrl LT_BK_knee_ctrl LT_BK_foot_IK_ctrl spine_mid_cls_ctrl RT_BK_IK_ctrl RT_BK_foot_IK_ctrl chest_jnt_ctrl head_jnt_ctrl LT_ear_1_jnt_ctrl LT_ear_2_jnt_ctrl RT_ear_1_jnt_ctrl RT_ear_2_jnt_ctrl jaw_jnt_ctrl RT_clavicle_jnt_ctrl LT_clavicle_jnt_ctrl LT_FT_knee_ctrl LT_FT_foot_IK_ctrl LT_FT_IK_ctrl RT_FT_foot_IK_ctrl RT_FT_IK_ctrl RT_FT_knee_ctrl RT_knee_ctrl LT_FT_fur_jnt_ctrl RT_FT_fur_jnt_ctrl LT_fur_jnt_ctrl RT_fur_jnt_ctrl accessory_1_jnt_ctrl accessory_2_jnt_ctrl ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r global_SRT local_RT root_ctrl pelvis_jnt_ctrl tail_1_jnt_ctrl tail_2_jnt_ctrl tail_3_jnt_ctrl tail_4_jnt_ctrl spine_fk_2_jnt_ctrl chest_jnt_ctrl LT_clavicle_jnt_ctrl neck_fk_2_jnt_ctrl head_jnt_ctrl RT_clavicle_jnt_ctrl spine_mid_cls_ctrl neck_mid_cls_ctrl LT_BK_IK_ctrl LT_BK_spring_IK_ctrl LT_BK_knee_ctrl RT_BK_IK_ctrl RT_BK_spring_IK_ctrl RT_BK_knee_ctrl LT_FT_IK_ctrl LT_FT_spring_IK_ctrl LT_FT_knee_ctrl RT_FT_IK_ctrl RT_FT_knee_ctrl RT_FT_spring_ctrl LT_ear_1_jnt_ctrl LT_ear_2_jnt_ctrl RT_ear_1_jnt_ctrl RT_ear_2_jnt_ctrl RT_FT_kneeLine ;\n" 
        -enableBackground 0
        -align "center" 
        -label "select -r global_SRT local_RT root_ctrl pelvis_jnt_ctrl tail_1_j..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "DEER" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -r global_SRT local_RT root_ctrl pelvis_jnt_ctrl tail_1_jnt_ctrl tail_2_jnt_ctrl tail_3_jnt_ctrl tail_4_jnt_ctrl spine_fk_2_jnt_ctrl chest_jnt_ctrl LT_clavicle_jnt_ctrl neck_fk_2_jnt_ctrl head_jnt_ctrl RT_clavicle_jnt_ctrl spine_mid_cls_ctrl neck_mid_cls_ctrl LT_BK_IK_ctrl LT_BK_spring_IK_ctrl LT_BK_knee_ctrl RT_BK_IK_ctrl RT_BK_spring_IK_ctrl RT_BK_knee_ctrl LT_FT_IK_ctrl LT_FT_spring_IK_ctrl LT_FT_knee_ctrl RT_FT_IK_ctrl RT_FT_knee_ctrl RT_FT_spring_ctrl LT_ear_1_jnt_ctrl LT_ear_2_jnt_ctrl RT_ear_1_jnt_ctrl RT_ear_2_jnt_ctrl RT_FT_kneeLine ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "select -r global_SRT local_RT root_ctrl pelvis_jnt_ctrl tail_1_jnt_ctrl tail_2_jnt_ctrl tail_3_jnt_ctrl spine_fk_2_jnt_ctrl chest_jnt_ctrl neck_fk_2_jnt_ctrl head_jnt_ctrl LT_ear_1_jnt_ctrl LT_ear_2_jnt_ctrl LT_ear_3_jnt_ctrl RT_ear_1_jnt_ctrl RT_ear_2_jnt_ctrl RT_ear_3_jnt_ctrl jaw_jnt_ctrl LT_clavicle_jnt_ctrl RT_clavicle_jnt_ctrl spine_mid_cls_ctrl LT_BK_IK_ctrl LT_BK_foot_IK_ctrl LT_BK_heelPivot_grp_ctrl LT_BK_footOuter_grp_ctrl LT_BK_footInner_grp_ctrl LT_BK_toePivot_grp_ctrl LT_BK_ballPivot_grp_ctrl LT_BK_toeTap_grp_ctrl LT_BK_footRoll_grp_ctrl LT_BK_knee_ctrl RT_BK_knee_ctrl RT_BK_heelpivot_grp_ctrl RT_BK_footOuter_grp_ctrl RT_BK_footInner_grp_ctrl RT_BK_toePivot_grp_ctrl RT_BK_ballpivot_grp_ctrl RT_BK_footRoll_grp_ctrl RT_BK_toeTap_grp_ctrl RT_BK_foot_IK_ctrl RT_BK_IK_ctrl LT_FT_IK_ctrl LT_FT_heelpivot_grp_ctrl LT_FT_footOuter_grp_ctrl LT_FT_footInner_grp_ctrl LT_FT_toePivot_grp_ctrl LT_FT_ballpivot_grp_ctrl LT_FT_footRoll_grp_ctrl LT_FT_toeTap_grp_ctrl LT_FT_foot_IK_ctrl LT_FT_knee_ctrl RT_FT_heelpivot_grp_ctrl RT_FT_footOuter_grp_ctrl RT_FT_footInner_grp_ctrl RT_FT_toePivot_grp_ctrl RT_FT_ballpivot_grp_ctrl RT_FT_footRoll_grp_ctrl RT_FT_toeTap_grp_ctrl RT_FT_foot_IK_ctrl RT_FT_knee_ctrl RT_FT_IK_ctrl ;\n" 
        -enableBackground 0
        -align "center" 
        -label "select -r global_SRT local_RT root_ctrl pelvis_jnt_ctrl tail_1_j..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "select -r global_SRT local_RT root_ctrl pelvis_jnt_ctrl tail_1_jnt_ctrl tail_2_jnt_ctrl tail_3_jnt_ctrl spine_fk_2_jnt_ctrl chest_jnt_ctrl neck_fk_2_jnt_ctrl head_jnt_ctrl LT_ear_1_jnt_ctrl LT_ear_2_jnt_ctrl LT_ear_3_jnt_ctrl RT_ear_1_jnt_ctrl RT_ear_2_jnt_ctrl RT_ear_3_jnt_ctrl jaw_jnt_ctrl LT_clavicle_jnt_ctrl RT_clavicle_jnt_ctrl spine_mid_cls_ctrl LT_BK_IK_ctrl LT_BK_foot_IK_ctrl LT_BK_heelPivot_grp_ctrl LT_BK_footOuter_grp_ctrl LT_BK_footInner_grp_ctrl LT_BK_toePivot_grp_ctrl LT_BK_ballPivot_grp_ctrl LT_BK_toeTap_grp_ctrl LT_BK_footRoll_grp_ctrl LT_BK_knee_ctrl RT_BK_knee_ctrl RT_BK_heelpivot_grp_ctrl RT_BK_footOuter_grp_ctrl RT_BK_footInner_grp_ctrl RT_BK_toePivot_grp_ctrl RT_BK_ballpivot_grp_ctrl RT_BK_footRoll_grp_ctrl RT_BK_toeTap_grp_ctrl RT_BK_foot_IK_ctrl RT_BK_IK_ctrl LT_FT_IK_ctrl LT_FT_heelpivot_grp_ctrl LT_FT_footOuter_grp_ctrl LT_FT_footInner_grp_ctrl LT_FT_toePivot_grp_ctrl LT_FT_ballpivot_grp_ctrl LT_FT_footRoll_grp_ctrl LT_FT_toeTap_grp_ctrl LT_FT_foot_IK_ctrl LT_FT_knee_ctrl RT_FT_heelpivot_grp_ctrl RT_FT_footOuter_grp_ctrl RT_FT_footInner_grp_ctrl RT_FT_toePivot_grp_ctrl RT_FT_ballpivot_grp_ctrl RT_FT_footRoll_grp_ctrl RT_FT_toeTap_grp_ctrl RT_FT_foot_IK_ctrl RT_FT_knee_ctrl RT_FT_IK_ctrl ;\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;

} 
